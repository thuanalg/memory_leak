cscope 15 $HOME/dev/memory_leak/notify.system -q 0000016731 0001052508
	@client.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/sockë.h
>

8 
	~<¨∑/öë.h
>

9 
	~<√töë/ö.h
>

10 
	~<¨∑/öë.h
>

11 
	~"msg_nŸify.h
"

13 
	#MAXLINE
 
MAX_MSG


	)

14 c⁄° *
	gid
 = "b7bb3690-ebcb-4bf9-88b0-31c130ec44a2";

16 
£nd_msg_fb
–
MSG_COMMON
 *
msg
, *
ù
);

18 
	$˛õ¡
() {

20 
	}
}

22 
uch¨
 
	g´s256_key
[
AES_BYTES
];

23 
uch¨
 
	g´s256_iv
[
AES_IV_BYTES
];

25 
	$maö
(
¨gc
, *
¨gv
[]) {

26 
sockfd
;

27 
buf„r
[
MAXLINE
 + 1];

28 
bufout
[
MAXLINE
 + 1];

29 
time•ec
 
t0
 = {0};

30 
time•ec
 
t1
 = {0};

31 
sockaddr_ö
 
£rvaddr
;

32 
sockaddr_ö
 
fbaddr
;

33 
vÆ
 = 1;

34 
îr
 = 0;

35 
gŸ_´s
 = 0;

36 
MSG_DATA
 *
dt
 = 0;

37 *
p
 = 0;

38 
öãrvÆ
 = 3;

41 
	`£éogmask
 (
	`LOG_UPTO
 (
LOG_INFO
));

42 
	`›ílog
 ("z˛õ¡_devi˚", 
LOG_CONS
 | 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_LOCAL1
);

45 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t0
);

46 i‡–(
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
 | 
SOCK_NONBLOCK
, 0)) < 0 ) {

47 
	`≥º‹
("socket creation failed");

48 
	`exô
(
EXIT_FAILURE
);

50 
	`£tsock›t
(
sockfd
, 
IPPROTO_IP
, 
IP_MTU_DISCOVER
, &
vÆ
, (val));

51 i‡(!
¨gv
[1]) {

52 
	`Ârötf
(
°dout
, "AddressÇeedÉnteringásárgv[1].\n");

53 
	`exô
(
EXIT_FAILURE
);

55 if(
INADDR_NONE
 =
	`öë_addr
(
¨gv
[1])) {

56 
	`Ârötf
(
°dout
, "AddressÇeedÉnteringásárgv[1].\n");

57 
	`exô
(
EXIT_FAILURE
);

59 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

62 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

63 
£rvaddr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

65 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
DEV_PORT
);

68 i‡–
	`böd
(
sockfd
, (c⁄° 
sockaddr
 *)&
£rvaddr
, (servaddr)) < 0 )

70 
	`≥º‹
("bind failed");

71 
	`exô
(
EXIT_FAILURE
);

73 
	`DUM_IPV4
(&
£rvaddr
);

74 
n
 = 0;

76 
	`£nd_msg_åack
(
id
, 
sockfd
, 
¨gv
[1], 
PORT
 + 1, &
t0
, 0, 0);

77 
	`¶ìp
(1);

78 
	`cmd_2_§v
(
MSG_GET_AES
, 
G_CLI_SRV
, 0, 0, (*Ë
id
, 
¨gv
[1]);

80 
íc
 = 0;

81 
	`u¶ìp
(10 * 1000);

82 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t1
);

83 if(
t1
.
tv_£c
 - 
t0
.tv_£¯> 
öãrvÆ
) {

84 
t0
 = 
t1
;

85 if(!
gŸ_´s
) {

86 
	`£nd_msg_åack
(
id
, 
sockfd
, 
¨gv
[1], 
PORT
 + 1, &
t0
, 0, 0);

87 
	`cmd_2_§v
(
MSG_GET_AES
, 
G_CLI_SRV
, 0, 0, (*Ë
id
, 
¨gv
[1]);

89 
	`£nd_msg_åack
(
id
, 
sockfd
, 
¨gv
[1], 
PORT
 + 1, &
t0
, 
´s256_key
, 
´s256_iv
);

93 
	`mem£t
(&
fbaddr
, 0, (fbaddr));

94 
	`mem£t
(
buf„r
, 0, (buffer));

95 
n
 = 
	`ªcv‰om
(
sockfd
, (*)
buf„r
, (buffer),

97 if(
n
 < 1 ) {

100 if(
n
 < (
MSG_COMMON
)) {

103 
íc
 = 
buf„r
[
n
-1];

104 
p
 = 
buf„r
;

105 
MSG_COMMON
 *
msg
 = (MSG_COMMON *Ë
buf„r
;

106 if(
íc
 =
ENCRYPT_CLI_PUB
) {

107 
uch¨
 *
out
 = 0;

108 
ouéí
 = 0;

109 
RSA
 *
key
 = 0;

111 
key
 = 
	`gë_˛i_¥v
((*)
id
);

112 
	`rß_dec
(
key
, 
buf„r
, &
out
, 
n
-1, &
ouéí
);

113 if(!
out
) {

116 
	`mem£t
(
buf„r
, 0, (buffer));

117 
	`mem˝y
(
buf„r
, 
out
, 
ouéí
);

118 
n
 = 
ouéí
;

120 if(
key
) {

121 
	`RSA_‰ì
(
key
);

123 if(
out
) {

124 
	`MY_FREE
(
out
);

126 } if(
íc
 =
ENCRYPT_AES
) {

128 
îr
 = 
	`msg_´s_dec
(
buf„r
, 
bufout
, 
´s256_key
,

129 
´s256_iv
, 
n
, &n, 
MAX_MSG
 + 1);

130 if(
îr
) {

131 
n
 = 0;

134 
p
 = 
bufout
;

135 } if–
íc
 == 0) {

137 
dt
 = (
MSG_DATA
 *)
p
;

138 
msg
 = (
MSG_COMMON
*Ë
p
;

140 if(
msg
->
i‰ouã
 =
G_NTF_CLI
) {

141 
	`DUM_MSG
(
msg
);

142 
	`DUM_IPV4
(&
fbaddr
);

143 
msg
->
i‰ouã
 = 
F_NTF_CLI
;

144 
	`mem£t
(
msg
->
Àn
, 0, 
LEN_U16INT
);

145 
	`£nd_msg_fb
(
msg
, 
¨gv
[1]);

147 if(
msg
->
i‰ouã
 =
F_SRV_CLI
) {

148 if(
msg
->
ty≥
 =
MSG_GET_AES
) {

150 
uch¨
 *
p
 = 
dt
->
d©a
;

151 
uöt16_t
 
sz
 = 0;

152 
	`¨r_2_uöt16
(
msg
->
Àn
, &
sz
, 2);

153 
	`Ârötf
(
°dout
, "data size: %d\n");

154 if(
sz
 !(
AES_BYTES
 + 
AES_IV_BYTES
) ) {

157 
	`Ârötf
(
°dout
, "did get AES key\n");

158 
	`mem˝y
(
´s256_key
, 
p
, 
AES_BYTES
);

159 
	`mem˝y
(
´s256_iv
, 
p
 + 
AES_BYTES
, 
AES_IV_BYTES
);

160 
gŸ_´s
 = 1;

161 
öãrvÆ
 = 
INTER_TRACK
;

165 
	`Ârötf
(
°dout
, "Did gëá mesßgêdevid: %s,Ç: %d\n.\n", 
msg
->
dev_id
, 
n
);

167 
îr
 = 
	`˛o£
(
sockfd
);

168 if(
îr
) {

169 
	`LOG
(
LOG_ERR
, "Close socketÉrr.");

172 
	`˛o£log
();

174 
	}
}

176 
	$£nd_msg_fb
–
MSG_COMMON
 *
msg
, *
ù
) {

177 
n
 = 0;

178 
Àn
 = (
MSG_COMMON
);

179 
sk
 = 0;

180 
îr
 = 0;

181 
uch¨
 
buf„r
[
MAX_MSG
 + 1];

182 
sockaddr_ö
 
addr
;

185 
	`mem£t
(&
addr
, 0, (addr));

186 
addr
.
sö_Ámûy
 = 
AF_INET
;

188 
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ù
);

189 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

191 
	`mem£t
(
buf„r
, 0, (buffer));

192 i‡–(
sk
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0 ) {

193 
	`≥º‹
("socket creation failed");

197 
	`DUM_IPV4
(&
addr
);

199 
îr
 = 
	`msg_´s_íc
((*)
msg
, 
buf„r
, 
´s256_key
,

200 
´s256_iv
, 
Àn
, &
n
, 
MAX_MSG
 + 1);

201 if(
îr
) {

204 
Àn
 = 
n
;

205 
n
 = 
	`£ndto
(
sk
, 
buf„r
, 
Àn
,

206 
MSG_CONFIRM
, (c⁄° 
sockaddr
 *Ë&
addr
,

207 (
addr
));

208 if(
n
 < 
Àn
) {

209 
	`LOG
(
LOG_ERR
, "close socketÉrr.");

213 if(
sk
) {

214 
îr
 = 
	`˛o£
(
sk
);

215 if(
îr
) {

216 
	`LOG
(
LOG_ERR
, "close socketÉrr.");

219  
n
;

220 
	}
}

	@ev.aes.256.ut.c

1 
	~"msg_nŸify.h
"

2 
	~<°rög.h
>

3 
	~<›ís¶/c⁄f.h
>

4 
	~<›ís¶/evp.h
>

5 
	~<›ís¶/îr.h
>

6 
	~<°rög.h
>

7 
	~<›ís¶/os¶_typ.h
>

17 
gcm_ev_íc
(*
∂aöãxt
, 
∂aöãxt_Àn
,

18 *
Ød
, 
Ød_Àn
,

19 *
key
,

20 *
iv
, 
iv_Àn
,

21 *
cùhîãxt
,

22 *
èg
);

23 
gcm_ev_dec
(*
cùhîãxt
, 
cùhîãxt_Àn
,

24 *
Ød
, 
Ød_Àn
,

25 *
èg
,

26 *
key
,

27 *
iv
, 
iv_Àn
,

28 *
∂aöãxt
);

29 c⁄° *
	gãxt
 = "nguyenÅhaiÅhuanálgebra,ápple,Üllllllllllllll";

30 
	$h™dÀEº‹s
() {

32 
	}
}

34 
	$maö
(
¨gc
, *
¨gv
[]) {

35 
îr
 = 0;

36 
cùhîãxt
[1024];

37 
buf„r
[1024];

38 
decbuf
[1024];

39 
èg
[1024];

40 
n
 = 0;

41 
	`mem£t
(
cùhîãxt
, 0, (ciphertext));

42 
	`mem£t
(
buf„r
, 0, (buffer));

43 
	`mem£t
(
èg
, 0, (tag));

44 
	`•rötf
(
buf„r
, "%s", 
¨gv
[1]);

46 
n
 = 
	`gcm_ev_íc
(
buf„r
, 
	`°æí
(buffer),

47 
´s_iv
, 16,

48 
´s_key
,

49 
´s_iv
, 16,

50 
cùhîãxt
,

51 
èg
);

52 
	`Ârötf
(
°dout
, "----%s---\n", 
cùhîãxt
);

53 
	`Ârötf
(
°dout
, "----n%d---\n", 
n
);

54 
	`Ârötf
(
°dout
, "----èg%s---,ÅagÀn: %d\n", 
èg
, 
	`°æí
(tag));

56 
	`gcm_ev_dec
(
cùhîãxt
, 
n
,

57 
´s_iv
, 16,

58 
èg
,

59 
´s_key
,

60 
´s_iv
, 16,

61 
decbuf
);

62 
	`Ârötf
(
°dout
, "----%s---\n", 
decbuf
);

64  
EXIT_SUCCESS
;

65 
	}
}

67 
	$gcm_ev_íc
(*
∂aöãxt
, 
∂aöãxt_Àn
,

68 *
Ød
, 
Ød_Àn
,

69 *
key
,

70 *
iv
, 
iv_Àn
,

71 *
cùhîãxt
,

72 *
èg
)

74 
EVP_CIPHER_CTX
 *
˘x
;

76 
Àn
;

78 
cùhîãxt_Àn
;

82 if(!(
˘x
 = 
	`EVP_CIPHER_CTX_√w
()))

83 
	`h™dÀEº‹s
();

86 if(1 !
	`EVP_En¸y±Inô_ex
(
˘x
, 
	`EVP_´s_256_gcm
(), 
NULL
, NULL, NULL))

87 
	`h™dÀEº‹s
();

92 if(1 !
	`EVP_CIPHER_CTX_˘æ
(
˘x
, 
EVP_CTRL_GCM_SET_IVLEN
, 
iv_Àn
, 
NULL
))

93 
	`h™dÀEº‹s
();

96 if(1 !
	`EVP_En¸y±Inô_ex
(
˘x
, 
NULL
, NULL, 
key
, 
iv
))

97 
	`h™dÀEº‹s
();

103 if(1 !
	`EVP_En¸y±Upd©e
(
˘x
, 
NULL
, &
Àn
, 
Ød
, 
Ød_Àn
))

104 
	`h™dÀEº‹s
();

106 
	`Ârötf
(
°dout
, "Àn: %d\n", 
Àn
);

111 if(1 !
	`EVP_En¸y±Upd©e
(
˘x
, 
cùhîãxt
, &
Àn
, 
∂aöãxt
, 
∂aöãxt_Àn
))

112 
	`h™dÀEº‹s
();

113 
cùhîãxt_Àn
 = 
Àn
;

114 
	`Ârötf
(
°dout
, "cùhîãxt: %d\n", 
cùhîãxt_Àn
);

119 if(1 !
	`EVP_En¸y±FöÆ_ex
(
˘x
, 
cùhîãxt
 + 
Àn
, &len))

120 
	`h™dÀEº‹s
();

121 
cùhîãxt_Àn
 +
Àn
;

123 
	`Ârötf
(
°dout
, "Àn: %d\n", 
Àn
);

125 if(1 !
	`EVP_CIPHER_CTX_˘æ
(
˘x
, 
EVP_CTRL_GCM_GET_TAG
, 16, 
èg
))

126 
	`h™dÀEº‹s
();

129 
	`EVP_CIPHER_CTX_‰ì
(
˘x
);

131  
cùhîãxt_Àn
;

132 
	}
}

134 
	$gcm_ev_dec
(*
cùhîãxt
, 
cùhîãxt_Àn
,

135 *
Ød
, 
Ød_Àn
,

136 *
èg
,

137 *
key
,

138 *
iv
, 
iv_Àn
,

139 *
∂aöãxt
)

141 
EVP_CIPHER_CTX
 *
˘x
;

142 
Àn
;

143 
∂aöãxt_Àn
;

144 
ªt
;

147 if(!(
˘x
 = 
	`EVP_CIPHER_CTX_√w
()))

148 
	`h™dÀEº‹s
();

151 if(!
	`EVP_De¸y±Inô_ex
(
˘x
, 
	`EVP_´s_256_gcm
(), 
NULL
, NULL, NULL))

152 
	`h™dÀEº‹s
();

155 if(!
	`EVP_CIPHER_CTX_˘æ
(
˘x
, 
EVP_CTRL_GCM_SET_IVLEN
, 
iv_Àn
, 
NULL
))

156 
	`h™dÀEº‹s
();

159 if(!
	`EVP_De¸y±Inô_ex
(
˘x
, 
NULL
, NULL, 
key
, 
iv
))

160 
	`h™dÀEº‹s
();

166 if(!
	`EVP_De¸y±Upd©e
(
˘x
, 
NULL
, &
Àn
, 
Ød
, 
Ød_Àn
))

167 
	`h™dÀEº‹s
();

173 if(!
	`EVP_De¸y±Upd©e
(
˘x
, 
∂aöãxt
, &
Àn
, 
cùhîãxt
, 
cùhîãxt_Àn
))

174 
	`h™dÀEº‹s
();

175 
∂aöãxt_Àn
 = 
Àn
;

178 if(!
	`EVP_CIPHER_CTX_˘æ
(
˘x
, 
EVP_CTRL_GCM_SET_TAG
, 16, 
èg
))

179 
	`h™dÀEº‹s
();

185 
ªt
 = 
	`EVP_De¸y±FöÆ_ex
(
˘x
, 
∂aöãxt
 + 
Àn
, &len);

188 
	`EVP_CIPHER_CTX_‰ì
(
˘x
);

190 if(
ªt
 > 0) {

192 
∂aöãxt_Àn
 +
Àn
;

193 
	`Ârötf
(
°dout
, "∂aöãxt_Àn: %d\n", 
∂aöãxt_Àn
);

194  
∂aöãxt_Àn
;

197 
	`Ârötf
(
°dout
, "∂aötoooooooo€xt_Àn: %d\n", 
∂aöãxt_Àn
);

199 
	`Ârötf
 (
°dout
, "aes: %s\n",

200 
	`ERR_îr‹_°rög
–
	`ERR_gë_îr‹
(), 
NULL
 ) ) ;

203 
	}
}

	@gen_list.c

1 
	~"gí_li°.h
"

2 
	~<±hªad.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

7 
±hªad_muãx_t
 
	ggí_li°_mtx
 = 
PTHREAD_MUTEX_INITIALIZER
;

9 
	$add_ôem_gí_li°
(
GEN_LIST
 **
p
, *
ôem
, 
n
, *
sig
)

11 
rc
 = 1;

13 
rc
 = 
	`±hªad_muãx_lock
(&
gí_li°_mtx
);

14 if(
rc
) {

15 
	`Ârötf
(
°dout
, "lockÉº‹,Üöe: %d .\n", 
__LINE__
);

20 
îr
 = 
	`add_ôem_åaffic
–
p
, 
ôem
, 
n
, 
sig
);

21 if(
îr
) {

22 
	`Ârötf
(
°dout
, "add itemÉrror.\n");

26 
rc
 = 
	`±hªad_muãx_u∆ock
(&
gí_li°_mtx
);

27 if(
rc
) {

28 
	`Ârötf
(
°dout
, "lockÉrror .\n");

32  
rc
;

33 
	}
}

36 
	#GEN_LIST_STEP
 (1 << 15)

	)

38 
	$add_ôem_åaffic
(
GEN_LIST
 **
p
, *
ôem
, 
sz
, *
sig
)

40 
GEN_LIST
 *
t
 = 0;

41 
rc
 = -1;

42 
n
 = 0;

43 *
pd©a
 = 0;

46 if(
sz
 < 1){

49 if(!
ôem
){

52 if(!
p
){

55 if(!(*
p
))

57 (*
p
Ë(
GEN_LIST
 *Ë
	`mÆloc
(
GEN_LIST_STEP
);

58 if(!(*
p
))

61 
	`exô
(1);

63 
t
 = *
p
;

64 
	`mem£t
(
t
, 0, 
GEN_LIST_STEP
);

65 
t
->
tŸÆ
 = 
GEN_LIST_STEP
;

66 if(
sig
) {

67 *
sig
 = 1;

70 
t
 = *
p
;

71 if(
t
->
u£d_d©a
 =0 && 
sig
) {

72 *
sig
 = 1;

74 
n
 = 
t
->
u£d_d©a
 + (
GEN_LIST
Ë+ 
sz
;

75 if–(
n
+1Ë> 
t
->
tŸÆ
)

77 
up_size
 = 
t
->
tŸÆ
 + 
GEN_LIST_STEP
;

78  
up_size
 < (
n
+1))

80 
up_size
 +
GEN_LIST_STEP
;

83 (*
p
Ë(
GEN_LIST
 *Ë
	`ªÆloc
–(*p), 
up_size
);

84 if(!(*
p
))

87 
	`exô
(1);

89 
t
 = *
p
;

90 
t
->
tŸÆ
 = 
up_size
;

93 
pd©a
 = 
t
->
d©a
;

94 
	`mem˝y
(
pd©a
 + 
t
->
u£d_d©a
, 
ôem
, 
sz
);

95 
t
->
u£d_d©a
 +
sz
;

96 
rc
 = 0;

99  
rc
;

100 
	}
}

102 
	$gë_d©a_gí_li°
(
GEN_LIST
 *
p
, **
d©a
)

104 
rc
 = 0;

105 
n
 = 0;

106 *
t
 = 0;

108 if(!
p
) ;

109 if(!
d©a
) ;

110 
rc
 = 
	`±hªad_muãx_lock
(&
gí_li°_mtx
);

111 if(
rc
) {

112 
	`Ârötf
(
°dout
, "lockÉº‹,Üöe: %d .\n", 
__LINE__
);

117 if(!
p
) ;

118 
n
 = 
p
->
u£d_d©a
;

119 if(!
n
) {

122 
t
 = (*Ë
	`mÆloc
(
n
+1);

123 
	`mem£t
(
t
, 0, 
n
+1);

124 
	`mem˝y
(
t
, 
p
->
d©a
, 
n
);

125 *
d©a
 = 
t
;

126 
p
->
u£d_d©a
 = 0;

129 
rc
 = 
	`±hªad_muãx_u∆ock
(&
gí_li°_mtx
);

130 if(
rc
) {

131 
	`Ârötf
(
°dout
, "lockÉrror .\n");

136  
n
;

137 
	}
}

	@gen_list.h

1 
	~<°dlib.h
>

3 #ifde‡
__˝lu•∂us


8 
tŸÆ
;

9 
u£d_d©a
;

10 
sz_ôem
;

12 
d©a
[0];

13 } 
	tGEN_LIST
;

15 
add_ôem_gí_li°
(
GEN_LIST
 **
p
, *
ôem
, 
n
, *
sig
);

16 
add_ôem_åaffic
(
GEN_LIST
 **
p
, *
ôem
, 
sz
, *
sig
);

17 
gë_d©a_gí_li°
(
GEN_LIST
 *
p
, **
d©a
);

19 #ifde‡
__˝lu•∂us


	@list_dev_id.h

2 
	gb7bb3690
-
	gebcb
-4bf9-88b0-31c130ec44a2

3 
	ged628094
-63f3-452a-91c8-3ae24f281dd2

4 1e23f459-
	gc0de
-4edc-
	gaf31
-
	gda92dbÁ2d6d


5 831d30eb-886c-4ac7-912a-
	ge243401˚9c0


	@main.save.bin.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<time.h
>

4 
	~<°rög.h
>

8 
	msysid
;

9 
	mdevid
[128];

10 
time•ec
 
	mcfg
;

11 } 
	tNOTIFY_ST
;

12 
	#nŸify_°
 
NOTIFY_ST


	)

15 
	$maö
(
¨gc
, *
¨gv
[])

17 
i
 = 0;

18 
n
 = 0;

19 
nŸify_°
 
ôem
;

20 
FILE
 *
Â
 = 
	`f›í
 ("./mysave", "wb");

22 
	`mem£t
(&
ôem
, 0, (item));

23 
ôem
.
sysid
 = ()
i
 + 2;

24 
n
 = 
	`fwrôe
((*Ë&
ôem
, 1, (ôem), 
Â
);

25 if(
n
 < 1) {

28 
	`Ârötf
(
°dout
, "“, iãm)=(%d, %d).\n", 
n
, (
ôem
));

29 }  (++
i
) < 10);

30 if(
Â
)

32 
	`f˛o£
(
Â
);

35 
Â
 = 
	`f›í
 ("./mysave", "rb");

37 
îr
 = 0;

38 *
d©a
 = 0;

39 
nŸify_°
 *
p
 = 0;

40 
m
 = 0;

41 if(!
Â
) ;

42 
îr
 = 
	`f£ek
(
Â
, 0, 
SEEK_END
);

43 
n
 = 
	`·ñl
(
Â
);

44 
	`ªwöd
(
Â
);

45 
d©a
 = (*Ë
	`mÆloc
(
n
+1);

46 
	`mem£t
(
d©a
, 0, 
n
+1);

47 
n
 = 
	`‰ód
(
d©a
, 1,Ç, 
Â
);

48 
m
 = 
n
/(
ôem
);

49 
p
 = (
nŸify_°
*Ë
d©a
;

50 
i
 = 0; i < 
m
; ++i)

52 
	`Ârötf
(
°dout
, "(i, iãm[%d].sysid)=(%d, %d).\n", 
i
, i, 
p
[i].
sysid
);

55 if(
Â
) {

56 
	`f˛o£
(
Â
);

58  
EXIT_SUCCESS
;

59 
	}
}

	@msg_notify.c

1 
	~"msg_nŸify.h
"

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°dlib.h
>

5 
	~<±hªad.h
>

6 
	~<sys/sockë.h
>

7 
	~<¨∑/öë.h
>

8 
	~<√töë/ö.h
>

9 
	~<uni°d.h
>

15 
gcm_í¸y±
(*
∂aöãxt
, 
∂aöãxt_Àn
,

16 *
Ød
, 
Ød_Àn
,

17 *
key
,

18 *
iv
, 
iv_Àn
,

19 *
cùhîãxt
,

20 *
èg
);

21 
gcm_de¸y±
(*
cùhîãxt
, 
cùhîãxt_Àn
,

22 *
Ød
, 
Ød_Àn
,

23 *
èg
,

24 *
key
,

25 *
iv
, 
iv_Àn
,

26 *
∂aöãxt
);

28 
±hªad_muãx_t
 
	ghash_tb_mtx
 = 
PTHREAD_MUTEX_INITIALIZER
;

30 
uch¨
 
	g´s_key
[] = {

37 
uch¨
 *
	g´s_iv
 = "!@#$%^&*()(*&^%$#@!@#$%^&*(*&%$#@@@))";

41 
	$uöt64_2_¨r
(*
¨r
, 
uöt64_t
 
n
, 
sz
)

43 
i
 = 0;

45 i‡(!
¨r
) ;

46 
i
 = 0; i < 
sz
; ++i) {

47 
¨r
[
i
] = (
n
 >> (i*8)) & 0xFF;

53 
	}
}

57 
	$¨r_2_uöt64
(*
¨r
, 
uöt64_t
 *
n
, 
sz
)

59 
i
 = 0;

60 
uöt64_t
 
t
 = 0;

62 i‡(!
¨r
) ;

63 i‡(!
n
) ;

64 *
n
 = 0;

65 
i
 = 0; i < 
sz
; ++i)

67 
t
 = 
¨r
[
i
];

68 (*
n
Ë|(
t
 << (
i
*8));

73 
	}
}

77 
	$uöt32_2_¨r
(*
¨r
, 
uöt32_t
 
n
, 
sz
)

79 
i
 = 0;

81 i‡(!
¨r
) ;

82 
i
 = 0; i < 
sz
; ++i) {

83 
¨r
[
i
] = (
n
 >> (i*8)) & 0xFF;

89 
	}
}

93 
	$¨r_2_uöt32
(*
¨r
, 
uöt32_t
 *
n
, 
sz
)

95 
i
 = 0;

96 
uöt32_t
 
t
 = 0;

98 i‡(!
¨r
) ;

99 i‡(!
n
) ;

100 *
n
 = 0;

101 
i
 = 0; i < 
sz
; ++i)

103 
t
 = 
¨r
[
i
];

104 (*
n
Ë|(
t
 << (
i
*8));

109 
	}
}

113 
	$uöt16_2_¨r
(*
¨r
, 
uöt16_t
 
n
, 
sz
)

115 
i
 = 0;

117 i‡(!
¨r
) ;

118 
i
 = 0; i < 
sz
; ++i) {

119 
¨r
[
i
] = (
n
 >> (i*8)) & 0xFF;

125 
	}
}

129 
	$¨r_2_uöt16
(*
¨r
, 
uöt16_t
 *
n
, 
sz
)

131 
i
 = 0;

132 
uöt32_t
 
t
 = 0;

134 i‡(!
¨r
) ;

135 i‡(!
n
) ;

136 *
n
 = 0;

137 
i
 = 0; i < 
sz
; ++i)

139 
t
 = 
¨r
[
i
];

140 (*
n
Ë|(
t
 << (
i
*8));

145 
	}
}

149 
	$hash_func
(*
id
, 
n
)

151 
ªs
 = 0;

152 
i
 = 0;

153 
i
 = 0; i<
n
; i++)

155 
k
 = 1;

156 
j
 = 0; j < 
i
; ++j) {

157 
k
 *= 71;

158 
k
 %
HASH_SIZE
;

160 
ªs
 +(
id
[
i
] * 
k
Ë% 
HASH_SIZE
;

162 
ªs
 =Ñe†% 
HASH_SIZE
;

164  
ªs
;

165 
	}
}

169 
	$dum_ùv4
(
sockaddr_ö
 *
addr
, c⁄° *
f
, c⁄° *
fu
, 
löe
) {

170 
buff
[1024];

171 
°r
[
INET_ADDRSTRLEN
 + 1];

172 
	`mem£t
(
buff
, 0, (buff));

173 
°r
[
INET_ADDRSTRLEN
] = 0;

174 
	`öë_¡›
(
AF_INET
, &(
addr
->
sö_addr
), 
°r
, 
INET_ADDRSTRLEN
);

175 
	`•rötf
(
buff
, "File: %s, func: %s,Üine: %d, cliÖort: %d, IP: %s.",

176 
f
, 
fu
, 
löe
, (Ë
	`ht⁄s
(
addr
->
sö_p‹t
), 
°r
);

177 
	`Ârötf
(
°dout
, "%s\n", 
buff
);

179 
	}
}

183 
	$ªg_to_èbÀ
(
MSG_REGISTER
 *
msg
, 
n
, 
time•ec
 *
t
)

185 
ªs
 = 0;

186 
hn
 = 0;

187 
HASH_LIST
 *
hi
 = 0;

188 
MSG_COMMON
 *
com
 = 0;

189 
HASH_ITEM
 *
hôem
 = 0;

190 
rc
 = 0;

191 
Àn
 = 0;

192 
sz
 = 
n
;

194 
com
 = &(
msg
->com);

195 
Àn
 = 
	`MIN
(
MAX_MSG
, 
	`°æí
(
com
->
dev_id
));

196 
hn
 = 
	`hash_func
(
com
->
dev_id
, 
Àn
);

197 
hi
 = &(
li°_ªg_dev
[
hn
]);

198 
rc
 = 
	`±hªad_muãx_lock
(&
hash_tb_mtx
);

199 i‡(
rc
) {

204 i‡(
hi
->
n
)

206 
j
 = 0;

207 
check
 = 1;

208 i‡(!
hi
->
group
) {

210 
hi
->
n
 = 0;

213 
hôem
 = 
hi
->
group
;

214 
hôem
)

216 
k
 = 0;

217 
k
 = 
	`°∫cmp
(
com
->
dev_id
, 
hôem
->
msg
->com.dev_id, 
LEN_DEVID
);

218 
	`put_time_to_msg
(
com
, 
t
);

219 i‡(!
k
)

221 
check
 = 0;

224 
hôem
 = hôem->
√xt
;

225 ++
j
;

226 i‡(
j
 >
hi
->
n
) ;

228 i‡(!
check
)

230 
	`Ârötf
(
°dout
, "AlreadyÉxisted!\n");

234 
	`MY_MALLOC
(
hôem
, (
HASH_ITEM
));

235 i‡(!
hôem
) {

239 
	`MY_MALLOC
(
hôem
->
msg
 ,(
HASH_ITEM
));

240 
	`mem˝y
(
hôem
->
msg
, (*Ëmsg, 
n
);

242 
hi
->
n
 += 1;

243 
hôem
->
√xt
 = 
hi
->
group
;

244 
hi
->
group
 = 
hôem
;

245 
ªs
 = 1;

249 
	`MY_MALLOC
–
hôem
, (
HASH_ITEM
));

250 i‡(!
hôem
) {

254 
	`MY_MALLOC
–
hôem
->
msg
, 
n
);

255 i‡(!
hôem
->
msg
) {

259 
	`mem˝y
(
hôem
->
msg
, (*Ëmsg, 
n
);

261 
hi
->
n
 = 1;

262 
hi
->
group
 = 
hôem
;

263 
ªs
 = 1;

268 
rc
 = 
	`±hªad_muãx_u∆ock
(&
hash_tb_mtx
);

269 i‡(
rc
) {

272  
ªs
;

273 
	}
}

277 
	$hl_åack_msg
(
MSG_TRACKING
 *
msg
, 
n
, 
sockaddr_ö
 *
addr
, 
ty≥
) {

278 
ªs
 = 0;

279 
hn
 = 0;

280 
HASH_LIST
 *
hi
 = 0;

281 
MSG_COMMON
 *
com
 = 0;

282 
HASH_ITEM
 *
hôem
 = 0;

283 
rc
 = 0;

284 
HASH_LIST
 *
hash_èbÀ
 = 0;

285 
±hªad_muãx_t
 *
mtx
 = 0;

286 
Àn
 = 0;

288 
mtx
 = &
hash_tb_mtx
;

289 
hash_èbÀ
 = 
li°_ªg_dev
;

291 
com
 = &(
msg
->com);

292 
Àn
 = 
	`MIN
(
MAX_MSG
, 
	`°æí
(
com
->
dev_id
));

293 
hn
 = 
	`hash_func
(
com
->
dev_id
, 
Àn
);

294 
hi
 = &(
hash_èbÀ
[
hn
]);

296 
rc
 = 
	`±hªad_muãx_lock
(
mtx
);

297 i‡(
rc
) {

301 i‡(!
mtx
) {

305 i‡(
hi
->
n
)

307 
j
 = 0;

308 
found
 = 0;

309 i‡(!
hi
->
group
) {

311 
hi
->
n
 = 0;

314 
hôem
 = 
hi
->
group
;

315 
hôem
)

317 
k
 = 
	`°∫cmp
(
com
->
dev_id
, 
hôem
->
msg
->com.dev_id, 
LEN_DEVID
);

318 i‡(!
k
)

320 
found
 = 1;

323 
hôem
 = hôem->
√xt
;

324 ++
j
;

325 i‡(
j
 >
hi
->
n
) ;

327 i‡(!
found
)

329 
	`LOG
(
LOG_ERR
, "Not found device ID");

333 
hôem
->
ùv4
 = *
addr
;

334 
	`DUM_IPV4
(&(
hôem
->
ùv4
));

335 
ªs
 = 1;

339 
rc
 = 
	`±hªad_muãx_u∆ock
(
mtx
);

340 i‡(
rc
) {

343  
ªs
;

344 
	}
}

348 
	$add_to_ôem_li°
(
MSG_NOTIFY
 *
msg
, 
HASH_ITEM
 **
l
, 
sz
)

350 
îr
 = 0;

351 
n
 = 0;

352 
rc
 = 0;

353 
HASH_ITEM
 *
hi
 = 0;

356 i‡(!
l
) {

357 
îr
 = 1;

361 
	`MY_MALLOC
(
hi
, (
HASH_ITEM
));

362 i‡(!
hi
) {

364 
îr
 = 1;

368 
n
 = 
sz
;

369 
	`MY_MALLOC
(
hi
->
msg
, 
n
);

370 i‡(!
hi
->
msg
) {

374 
	`mem˝y
(
hi
->
msg
, (*Ëmsg, 
n
);

375 
hi
->
n_msg
 = 
n
;

376 
	`Ârötf
(
°dout
, "£àhi->n_msg: %d\n", 
hi
->
n_msg
);

378 
rc
 = 
	`±hªad_muãx_lock
(&
hash_tb_mtx
);

380 i‡(
rc
) {

383 i‡(!(*
l
)) {

384 (*
l
Ë
hi
;

387 
hi
->
√xt
 = (*)(*
l
);

388 (*
l
Ë
hi
;

391 
rc
 = 
	`±hªad_muãx_u∆ock
(&
hash_tb_mtx
);

392 i‡(
rc
) {

397  
îr
;

398 
	}
}

403 
	$put_time_to_msg
–
MSG_COMMON
 *
msg
, 
time•ec
 *
t
)

406 i‡(!
t
) {

410 i‡(!
msg
) {

414 
	`mem£t
(
msg
->
£c⁄d
, 0, 
LEN_U64INT
);

415 
	`mem£t
(
msg
->
«no
, 0, 
LEN_U64INT
);

416 
	`uöt64_2_¨r
(
msg
->
£c⁄d
, 
t
->
tv_£c
, 
LEN_U64INT
);

417 
	`uöt64_2_¨r
(
msg
->
«no
, 
t
->
tv_n£c
, 
LEN_U64INT
);

420 
	}
}

424 
	$dum_msg
(
MSG_COMMON
 *
ôem
, c⁄° *
f
, c⁄° *
fu
, 
löe
)

426 c⁄° *
ãxt
[] = { "Register", "Trace", "Notify", "Confirm", "" };

427 c⁄° *
i‰
[] = { "FromáÇotifierÅo server", "The server forwardsÅo client",

430 
buf
[2048];

431 
n
 = 0;

432 
Àn
 = 0;

433 
sz
 = 0;

434 
ldè
 = 0;

435 
uöt64_t
 
£c
 = 0, 
n£c
 = 0;

436 
	`mem£t
(
buf
, 0, (buf));

438 
ty≥
 = 0;

439 
i‰o
 = 0;

440 i‡(!
ôem
) ;

441 
ty≥
 = 
ôem
->type;

442 
i‰o
 = 
ôem
->
i‰ouã
;

443 
Àn
 +
n
;

444 
n
 = 
	`•rötf
(
buf
 + 
Àn
, "------Fûe: %s, Func: %†löe: %d -------- Ty≥ o‡mesßge: %s. ", 
f
, 
fu
, 
löe
, 
ãxt
[
ty≥
]);

445 
Àn
 +
n
;

446 
n
 = 
	`•rötf
(
buf
 + 
Àn
, "------Devi˚ ID: %s. ", 
ôem
->
dev_id
);

447 
Àn
 +
n
;

448 
n
 = 
	`•rötf
(
buf
 + 
Àn
, "------NŸifõ∏ID: %s. ", 
ôem
->
¡f_id
);

449 
Àn
 +
n
;

450 
sz
 = 
	`MIN
(
MAX_MSG
, 
	`°æí
(
ôem
->
dev_id
));

451 
n
 = 
	`•rötf
(
buf
 + 
Àn
, "-------- HashÇumbî devi˚ id: %u. ", 
	`hash_func
(
ôem
->
dev_id
, 
sz
));

452 
Àn
 +
n
;

453 
n
 = 
	`•rötf
(
buf
 + 
Àn
, "-------- HashÇumbîÇŸifõ∏id: %u. ", 
	`hash_func
(
ôem
->
¡f_id
, 
sz
));

454 
Àn
 +
n
;

455 
n
 = 
	`•rötf
(
buf
 + 
Àn
, "-------- i‰ouã: %s. ", 
i‰
[
i‰o
]);

456 
Àn
 +
n
;

458 
	`¨r_2_uöt16
(
ôem
->
Àn
, &
ldè
, 2);

459 
n
 = 
	`•rötf
(
buf
 + 
Àn
, "-------- Lí d©a: %d. ", 
ldè
);

460 
Àn
 +
n
;

462 
	`¨r_2_uöt64
(
ôem
->
£c⁄d
, &
£c
, 8);

463 
	`¨r_2_uöt64
(
ôem
->
«no
, &
n£c
, 8);

464 
n
 = 
	`•rötf
(
buf
 + 
Àn
, "-------- (£c,Ç™oË(%Œu, %Œu)", 
£c
, 
n£c
);

465 
Àn
 +
n
;

468 
	`Ârötf
(
°dout
, "buf\n");

470 
	}
}

474 
	$lﬂd_ªg_li°
() {

475 
ªt
 = 0;

476 
FILE
 *
Â
 = 0;

477 
buf
[1024 + 1];

478 
size_t
 
Àn
 = 0;

479 
size_t
 
n
 = 0;

480 *
d©a
 = 0;

482 *
pch
 = 0;

483 
MSG_DATA
 
msg
;

484 
time•ec
 
t
 = { 0 };

485 
sz
 = (Ë(
MSG_REGISTER
);

487 
Â
 = 
	`f›í
("list_dev_id.h", "r");

488 i‡(!
Â
) {

492 
	`f£ek
(
Â
, 0, 
SEEK_END
);

493 
Àn
 = 
	`·ñl
(
Â
);

494 i‡(
Àn
 < 1) {

498 
	`MY_MALLOC
(
d©a
, 
Àn
 + 1);

499 i‡(!
d©a
) {

503 
	`mem£t
(
d©a
, 0, 
Àn
 + 1);

504 
	`ªwöd
(
Â
);

505 
Àn
 = 0;

507 
	`mem£t
(
buf
, 0, (buf));

508 
n
 = 
	`‰ód
(
buf
, 1, 1024, 
Â
);

509 i‡(
n
 < 1) {

512 
	`mem˝y
(
d©a
 + 
Àn
, 
buf
, 
n
);

513 
Àn
 +
n
;

516 i‡(!
d©a
) {

519 
pch
 = 
	`°πok
(
d©a
, "\r\n");

520 
pch
) {

521 i‡(
	`°æí
(
pch
) > 30) {

522 
	`mem£t
(&
msg
, 0, 
sz
);

523 
	`mem˝y
(
msg
.
com
.
dev_id
, 
pch
, 
LEN_DEVID
);

524 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t
);

525 
ªt
 = 
	`ªg_to_èbÀ
((
MSG_REGISTER
*Ë&
msg
, 
sz
, &
t
);

527 
pch
 = 
	`°πok
(0, "\r\n");

531 i‡(
d©a
) {

532 
	`MY_FREE
(
d©a
);

534 i‡(
Â
) {

535 
	`f˛o£
(
Â
);

537  
ªt
;

538 
	}
}

542 
	$£nd_to_d°
(
sockfd
, 
HASH_ITEM
 **
l
, *
cou¡
, 
˛ór
)

544 
îr
 = 0;

545 
rc
 = 0;

546 
ödex
 = 0;

547 *
iid
 = 0;

548 
HASH_ITEM
 *
hi
 = 0;

549 
HASH_ITEM
 *
gr
 = 0;

550 
HASH_ITEM
 *
t
 = 0;

551 
Àn
 = 0;

552 
¢
 = 0;

553 
buf„r
[
MAX_MSG
 + 1];

555 i‡(
cou¡
) {

556 *
cou¡
 = 0;

558 
rc
 = 
	`±hªad_muãx_lock
(&
hash_tb_mtx
);

559 i‡(
rc
) {

564 i‡(!
l
) {

565 
îr
 = 1;

569 
hi
 = *
l
;

570 *
l
 = 0;

574 
rc
 = 
	`±hªad_muãx_u∆ock
(&
hash_tb_mtx
);

575 i‡(
rc
) {

578 
hi
)

580 
	`Ârötf
(
°dout
, "%s:%s:%d, ================\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
);

581 i‡(
hi
->
msg
->
com
.
i‰ouã
 =
G_NTF_CLI
 ) {

582 
iid
 = 
hi
->
msg
->
com
.
dev_id
;

584 i‡(
hi
->
msg
->
com
.
i‰ouã
 =
F_NTF_CLI
 ) {

585 
iid
 = 
hi
->
msg
->
com
.
¡f_id
;

587 i‡(
hi
->
msg
->
com
.
i‰ouã
 =
F_SRV_CLI
 ) {

588 
iid
 = 
hi
->
msg
->
com
.
dev_id
;

590 i‡(
hi
->
msg
->
com
.
i‰ouã
 =
G_NTF_SRV
 ) {

591 
iid
 = 
hi
->
msg
->
com
.
dev_id
;

593 i‡(
hi
->
msg
->
com
.
i‰ouã
 =
F_SRV_NTF
) {

594 
iid
 = 
hi
->
msg
->
com
.
dev_id
;

596 i‡(
hi
->
msg
->
com
.
i‰ouã
 =
G_CLI_NTF
 ) {

597 
iid
 = 
hi
->
msg
->
com
.
¡f_id
;

602 
Àn
 = 
	`MIN
(
MAX_MSG
, 
	`°æí
(
iid
));

603 
ödex
 = 
	`hash_func
(
iid
, 
Àn
);

604 
gr
 = (
HASH_ITEM
*Ë
li°_ªg_dev
[
ödex
].
group
;

605 i‡(!
gr
) {

607 
îr
=1;

611 
gr
) {

612 i‡(
	`°∫cmp
(
iid
, 
gr
->
msg
->
com
.
dev_id
, 
LEN_DEVID
) == 0) {

613 
t
 = 
gr
;

616 
gr
 = gr->
√xt
;

618 i‡(!
t
) {

620 
îr
 = 1;

624 
	`DUM_IPV4
(&(
t
->
ùv4
));

626 
	`mem£t
(
buf„r
, 0, (buffer));

627 if(
hi
->
msg
->
com
.
ty≥
 =
MSG_GET_AES
) {

628 
uch¨
 *
out
 = 0;

629 
	`Ârötf
(
°dout
, "iid: %s\n", 
iid
);

630 
RSA
 *
pubkey
 = 
	`gë_˛i_pub
(
iid
);

631 if(
pubkey
) {

632 
	`rß_íc
(
pubkey
, (*)
hi
->
msg
, &
out
, hi->
n_msg
, &
¢
);

633 
	`Ârötf
(
°dout
, "--------¢: %d\n", 
¢
);

634 if(
out
) {

635 
	`mem˝y
(
buf„r
, 
out
, 
¢
);

636 
buf„r
[
¢
] = 
ENCRYPT_CLI_PUB
;

637 
¢
++;

638 
	`Ârötf
(
°dout
, "--------¢: %d\n", 
¢
);

639 
	`MY_FREE
(
out
);

641 
	`RSA_‰ì
(
pubkey
);

643 
îr
 = 1;

644 
	`Ârötf
(
°dout
, " ==== GetÖublic keyÉrr\n");

646 } i‡(
hi
->
msg
->
com
.
ty≥
 =
MSG_NTF
) {

647 
îr
 = 
	`msg_´s_íc
((*)
hi
->
msg
, 
buf„r
,

648 
´s_key
, 
´s_iv
, 
hi
->
n_msg
, &
¢
, 
MAX_MSG
 + 1);

649 if(
îr
) {

650 
¢
 = 0;

655 
¢
 = 
hi
->
n_msg
;

656 
	`mem˝y
(
buf„r
, (*)
hi
->
msg
, 
¢
);

659 
	`Ârötf
(
°dout
, "==============get hi->n_msg: %d, sizeof: %u, sn: %d\n",

660 
hi
->
n_msg
, (
MSG_COMMON
), 
¢
);

661 
	`DUM_IPV4
(&(
t
->
ùv4
));

662 
¢
 = 
	`£ndto
(
sockfd
, 
buf„r
, sn,

663 
MSG_CONFIRM
, (c⁄° 
sockaddr
 *Ë&(
t
->
ùv4
), (t->ipv4));

664 
	`Ârötf
(
°dout
, "£ìììí: %d\n", 
¢
);

665 i‡(
cou¡
) {

666 (*
cou¡
)++;

668 
t
 = 
hi
;

669 
hi
 = hi->
√xt
;

670 i‡(
˛ór
) {

671 
	`MY_FREE
(
t
->
msg
);

672 
	`MY_FREE
(
t
);

675  
îr
;

676 
	}
}

680 
	$£nd_msg_åack
(c⁄° *
iid
, 
sockfd
, *
ùaddr
,

681 
p‹t
, 
time•ec
 *
t
, 
uch¨
 *
key256
, uch¨ *
iv
) {

683 
MSG_COMMON
 *
msg
 = 0;

684 
sockaddr_ö
 
addr
;

685 
n
 = 0;

686 
sz
 = (
MSG_COMMON
);;

687 
buf
[
MAX_MSG
+1];

688 
bufout
[
MAX_MSG
+1];

689 *
p
 = 0;

690 
uch¨
 *
rß_d©a
 = 0;

691 
rß_Àn
 = 0;

692 
îr
 = 0;

693 
RSA
 *
pubkey
 = 0;

696 
	`mem£t
(
buf
, 0, (buf));

697 
msg
 = (
MSG_COMMON
 *)
buf
;

699 
	`mem£t
(&
addr
, 0, (addr));

700 
addr
.
sö_Ámûy
 = 
AF_INET
;

701 
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ùaddr
);

702 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
 + 1);

706 i‡(!
t
) {

709 i‡(!
iid
) {

712 i‡(!
ùaddr
) {

716 
	`put_time_to_msg
(
msg
, 
t
);

717 
msg
->
ty≥
 = 
MSG_TRA
;

718 
	`mem˝y
(
msg
->
dev_id
, 
iid
, 
LEN_DEVID
);

720 if(!
key256
) {

721 
îr
 = 
	`fûe_2_pubrß
("§v-public-key.≥m", &
pubkey
);

722 if(!
pubkey
) {

723 
îr
 = 1;

724 
	`sy¶og
(
LOG_ERR
, "CannotÖublic key.");

727 
îr
 = 
	`rß_íc
(
pubkey
, 
buf
, &
rß_d©a
, 
sz
, &
rß_Àn
);

728 if(
îr
) {

729 
	`LOG
(
LOG_ERR
, "rsaÉncryptÉrror.");

732 
	`Ârötf
(
°dout
, "rßÜí: %d\n", 
rß_Àn
);

733 if(
rß_Àn
 >
MAX_MSG
) {

734 
	`LOG
(
LOG_ERR
, "rsaÉncryptÉrror -->Åoo big.");

737 
	`mem˝y
(
buf
, 
rß_d©a
, 
rß_Àn
);

738 
buf
[
rß_Àn
] = 
ENCRYPT_SRV_PUB
;

739 
n
 = 
rß_Àn
 + 1;

740 
p
 = 
buf
;

743 
îr
 = 
	`msg_´s_íc
(
buf
, 
bufout
, 
key256
, 
iv
, 
sz
, &
n
, 
MAX_MSG
 + 1);

744 if(
îr
) {

747 
p
 = 
bufout
;

750 
n
 = 
	`£ndto
(
sockfd
, 
p
,Ç, 
MSG_CONFIRM
,

751 (c⁄° 
sockaddr
 *Ë&
addr
, (addr));

752 i‡(
n
 < 0) {

753 
	`Ârötf
(
°dout
, "c⁄√˘Éº: %d,Éºno: %d,Åext: %s\n", 
n
, 
î∫o
, 
	`°ªº‹
(errno));

755 
	`Ârötf
(
°dout
, "åackög síàn: %d\n", 
n
);

758 if(
pubkey
) {

759 
	`RSA_‰ì
(
pubkey
);

761 if(
rß_d©a
) {

762 
	`MY_FREE
(
rß_d©a
);

765  
n
;

767 
	}
}

771 
	$¡f_´s_fûe
(
uch¨
 *
ö
, uch¨ *
out
, uch¨* 
key
, uch¨* 
ivec
, 
íc
) {

772 
îr
 = 0;

773 
FILE
 *
fö
 = 0;

774 
FILE
 *
fout
 = 0;

775 
uch¨
 
bö
[
AES_BLOCK_SIZE
 + 1];

776 
uch¨
 
bout
[
AES_BLOCK_SIZE
 + 1];

777 
AES_KEY
 
w˘x
;

778 
k
 = 0;

779 
l
 = 0;

780 
uch¨
 
iv
[
AES_BLOCK_SIZE
 + 1];

782 
	`mem£t
(&
w˘x
, 0, (wctx));

785 
i
 = 0;

787 i‡(!
ö
) {

788 
îr
 = 1;

793 i‡(!
out
) {

794 
îr
 = 1;

799 
fö
 = 
	`f›í
–
ö
, "rb");

800 i‡(!
fö
) {

801 
îr
 = 1;

806 
fout
 = 
	`f›í
–
out
, "w+b");

807 i‡(!
fout
) {

808 
îr
 = 1;

814 i‡(
íc
) {

815 
îr
 = 
	`AES_£t_í¸y±_key
(
key
, 
AES_BITS
, &
w˘x
);

816 i‡(
îr
) {

817 
	`Ârötf
(
°dout
, "error\n");

821 
îr
 = 
	`AES_£t_de¸y±_key
(
key
, 
AES_BITS
, &
w˘x
);

822 i‡(
îr
) {

823 
	`Ârötf
(
°dout
, "error\n");

829 
	`mem£t
(
bö
, 0, (bin));

830 
	`mem£t
(
bout
, 0, (bout));

831 
	`mem£t
(
iv
, 0, (iv));

832 
	`mem˝y
(
iv
, 
ivec
, 
AES_BLOCK_SIZE
);

834 
k
 = 
	`‰ód
–
bö
, 1, 
AES_BLOCK_SIZE
, 
fö
);

835 i‡(
k
 < 1) {

838 
i
 = 
AES_BLOCK_SIZE
;

839 
	`AES_cfb128_í¸y±
–
bö
, 
bout
, 
AES_BLOCK_SIZE
, &
w˘x
, 
iv
, &
i
, 
íc
);

840 
l
 = 
	`fwrôe
(
bout
, 1, 
k
, 
fout
);

841 i‡(
l
 !
k
) {

842 
îr
 = 1;

843 
	`LOG
(
LOG_ERR
, "fwriteÉrror.");

846 i‡(
k
 < 
AES_BLOCK_SIZE
) {

854 i‡(
fö
) {

855 
îr
 = 
	`f˛o£
(
fö
);

856 i‡(
îr
) {

861 i‡(
fout
) {

862 
îr
 = 
	`f˛o£
(
fout
);

863 i‡(
îr
) {

868  
îr
;

869 
	}
}

879 
	$¡f_´s_í¸y±
(
uch¨
 *
ö
, uch¨ *
out
, uch¨* 
key
, uch¨* 
ivec
, 
n
, 
íc
) {

880 
îr
 = 0;

881 
i
 = 0;

882 
AES_KEY
 
w˘x
;

883 
k
 = 0;

884 
uch¨
 
iv
[
AES_BLOCK_SIZE
 + 1];

886 
	`mem£t
(&
w˘x
, 0, (wctx));

889 i‡(
n
 < 1 || (n%
AES_BLOCK_SIZE
)) {

890 
îr
 = 1;

891 
	`LOG
(
LOG_ERR
, "Lígth o‡d©®mu° bêmu…ùÀ o‡%d.", 
AES_BLOCK_SIZE
);

894 i‡(
íc
) {

895 
îr
 = 
	`AES_£t_í¸y±_key
(
key
, 
AES_BITS
, &
w˘x
);

896 i‡(
îr
) {

897 
	`LOG
(
LOG_ERR
, " setÉncrypt keyÉrror");

901 
îr
 = 
	`AES_£t_de¸y±_key
(
key
, 
AES_BITS
, &
w˘x
);

902 i‡(
îr
) {

903 
	`LOG
(
LOG_ERR
, " set decrypt keyÉrror");

907 
k
 < 
n
) {

908 
i
 = 
AES_BLOCK_SIZE
;

909 
	`mem£t
(
iv
, 0, (iv));

910 
	`mem˝y
(
iv
, 
ivec
, 
AES_BLOCK_SIZE
);

911 
	`AES_cfb128_í¸y±
(
ö
 + 
k
, 
out
 + k, 
AES_BLOCK_SIZE
, &
w˘x
, 
iv
, &
i
, 
íc
);

912 
k
 +
AES_BLOCK_SIZE
;

916  
îr
;

917 
	}
}

921 
	$fûe_2_byãs
(c⁄° 
uch¨
 *
∑th
, uch¨ **
ouçut
)

923 
FILE
 *
Â
 = 0;

924 
îr
 = 0;

925 
sz
 = 0, 
n
 = 0;

927 i‡(!
∑th
) {

928 
îr
 = 1;

929 
	`LOG
(
LOG_ERR
, "FileÖath isÇull.");

932 i‡(!
ouçut
) {

933 
îr
 = 1;

934 
	`LOG
(
LOG_ERR
, "Buffer isÇull.");

937 
Â
 = 
	`f›í
(
∑th
, "r");

938 i‡(!
Â
) {

939 
îr
 = 1;

940 
	`LOG
(
LOG_ERR
, "C™nŸ o≥¿fûê'%s'.", 
∑th
);

943 
	`f£ek
(
Â
, 0,
SEEK_END
);

944 
sz
 = 
	`·ñl
(
Â
);

945 
	`ªwöd
(
Â
);

947 
	`MY_MALLOC
–*
ouçut
, 
sz
 + 1);

949 
n
 = 
	`‰ód
(*
ouçut
, 1, 
sz
, 
Â
);

950 i‡(
n
 !
sz
) {

951 
îr
 = 1;

952 
	`LOG
(
LOG_ERR
, "Ródög fûêgŸÉº⁄eous.", 
∑th
);

957 i‡(
îr
) {

958 i‡(*
ouçut
) {

959 
	`MY_FREE
(*
ouçut
);

962 i‡(
Â
) {

963 
îr
 = 
	`f˛o£
(
Â
);

964 i‡(
îr
) {

965 
	`LOG
(
LOG_ERR
, "C™nŸ clo£ fûê'%s'.", 
∑th
);

968  
îr
;

969 
	}
}

973 
	$fûe_2_pubrß
(c⁄° 
uch¨
 *
∑th
, 
RSA
 **
ouçut
) {

974 
îr
 = 0;

975 
BIO
 *
bio
 = 0;

976 
uch¨
 *
°r
 = 0;

977 
RSA
 *
pubkey
 = 0;

979 i‡(!
ouçut
) {

980 
îr
 = 1;

981 
	`LOG
(
LOG_ERR
, "RSA output is 'null'.");

984 
îr
 = 
	`fûe_2_byãs
(
∑th
, &
°r
);

985 i‡(
îr
) {

986 
	`LOG
(
LOG_ERR
, "ReadÖublic keyÉrror.");

989 
bio
 = 
	`BIO_√w_mem_buf
–(*)
°r
, -1 ) ;

990 i‡(!
bio
) {

991 
	`LOG
(
LOG_ERR
, "Load BIOÉrror.");

992 
îr
 = 1;

995 
	`BIO_£t_Êags
 (
bio
, 
BIO_FLAGS_BASE64_NO_NL
 ) ;

996 
pubkey
 = 
	`PEM_ªad_bio_RSA_PUBKEY
–
bio
, 
NULL
, NULL, NULL ) ;

997 i‡(!
pubkey
) {

998 
	`LOG
 (
LOG_ERR
, "ERROR: CouldÇotÜoad PUBLIC KEY! PEM_read_bio_RSA_PUBKEY FAILED: %s\n",

999 
	`ERR_îr‹_°rög
–
	`ERR_gë_îr‹
(), 
NULL
 ) ) ;

1001 *
ouçut
 = 
pubkey
;

1005 i‡(
°r
) {

1006 
	`MY_FREE
(
°r
);

1008 i‡(
bio
) {

1009 
	`BIO_‰ì
–
bio
);

1012  
îr
;

1013 
	}
}

1017 
	$fûe_2_¥vrß
(c⁄° 
uch¨
 *
∑th
, 
RSA
 **
ouçut
) {

1018 
îr
 = 0;

1019 
BIO
 *
bio
 = 0;

1020 
uch¨
 *
°r
 = 0;

1021 
RSA
 *
¥vkey
 = 0;

1023 i‡(!
ouçut
) {

1024 
îr
 = 1;

1025 
	`LOG
(
LOG_ERR
, "RSA output is 'null'.");

1028 
îr
 = 
	`fûe_2_byãs
(
∑th
, &
°r
);

1029 i‡(
îr
) {

1030 
	`LOG
(
LOG_ERR
, "ReadÖrivate keyÉrror.");

1033 
bio
 = 
	`BIO_√w_mem_buf
–(*)
°r
, -1 );

1034 i‡(!
bio
) {

1035 
îr
 = 1;

1036 
	`LOG
(
LOG_ERR
, "BIO bufferÉrror.");

1039 
¥vkey
 = 
	`PEM_ªad_bio_RSAPriv©eKey
–
bio
, 
NULL
, NULL, NULL ) ;

1040 i‡(!
¥vkey
) {

1041 
	`LOG
(
LOG_ERR
, "ERROR: CouldÇotÜoad PRIVATE KEY! PEM_read_bio_RSAPrivateKey FAILED: %s\n",

1042 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1044 *
ouçut
 = 
¥vkey
;

1047 i‡(
°r
) {

1048 
	`MY_FREE
(
°r
);

1050 i‡(
bio
) {

1051 
	`BIO_‰ì
–
bio
);

1054  
îr
;

1055 
	}
}

1059 
	$rß_íc
(
RSA
 *
pubkey
, c⁄° 
uch¨
 *
ö
, uch¨ **
out
, 
Ànö
, *
ouéí
)

1061 
n
 = 0;

1062 
îr
 = 0;

1063 
buÊí
 = 0;

1064 
puch¨
 
buf
 = 0;

1065 
rß_block
 = 0;

1068 i‡(!
pubkey
) {

1069 
îr
 = 1;

1070 
	`LOG
(
LOG_ERR
, "HaveÇoÖublic key.");

1073 i‡(!
out
) {

1074 
îr
 = 1;

1075 
	`LOG
(
LOG_ERR
, "HaveÇo outputÖointer.");

1078 i‡(
Ànö
 < 1) {

1079 
	`LOG
(
LOG_ERR
, "Length of input must be greaterÅhan 0.");

1081 
rß_block
 = 
	`RSA_size
(
pubkey
);

1082 i‡(
rß_block
 < 1) {

1083 
	`LOG
(
LOG_ERR
, "Get block of RSAÉrror.");

1086 i‡(
Ànö
 % 
rß_block
) {

1087 
buÊí
 = 
Ànö
 + (
rß_block
 -Üenin %Ñsa_block) + 1;

1089 
buÊí
 = 
Ànö
 + 1;

1092 
	`Ârötf
(
°dout
, "+++++++++++++++++++buÊí: %d\n", 
buÊí
);

1094 
	`MY_MALLOC
(
buf
, 
buÊí
);

1096 
n
 = 
	`RSA_public_í¸y±
(
Ànö
, 
ö
, 
buf
, 
pubkey
, 
RSA_PKCS1_PADDING
 ) ;

1097 i‡(
n
 < 1) {

1098 
	`LOG
(
LOG_ERR
, "ERROR: RSA_public_í¸y±: %s\n", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
));

1101 i‡(
ouéí
) {

1102 *
ouéí
 = 
n
;

1104 *
out
 = 
buf
;

1107  
îr
 ;

1108 
	}
}

1113 
	$rß_dec
(
RSA
 *
¥iv
, c⁄° 
uch¨
 *
ö
, uch¨ **
out
, 
Ànö
, *
ouéí
)

1115 
îr
 = 0;

1116 
buÊí
 = 0;

1117 
puch¨
 
buf
 = 0;

1118 
rß_block
 = 0;

1121 
n
 = 0;

1122 i‡(!
¥iv
) {

1123 
îr
 = 1;

1124 
	`LOG
(
LOG_ERR
, "HaveÇoÖriv key.");

1127 i‡(!
ö
) {

1128 
îr
 = 1;

1129 
	`LOG
(
LOG_ERR
, "HaveÇo input data");

1132 i‡(!
out
) {

1133 
îr
 = 1;

1134 
	`LOG
(
LOG_ERR
, "HaveÇo output buffer.");

1138 
rß_block
 = 
	`RSA_size
(
¥iv
);

1139 i‡(
rß_block
 < 1) {

1140 
	`LOG
(
LOG_ERR
, "Get block of RSAÉrror.");

1143 i‡(
Ànö
 % 
rß_block
) {

1144 
buÊí
 = 
Ànö
 + (
rß_block
 -Üenin %Ñsa_block) + 1;

1146 
buÊí
 = 
Ànö
 + 1;

1148 
	`Ârötf
(
°dout
, "------------buÊí: %d\n", 
buÊí
);

1150 
	`MY_MALLOC
(
buf
, 
buÊí
);

1152 
n
 = 
	`RSA_¥iv©e_de¸y±
(
Ànö
, 
ö
, 
buf
, 
¥iv
, 
RSA_PKCS1_PADDING
) ;

1153 i‡(
n
 < 1) {

1154 
	`LOG
(
LOG_ERR
, "ERROR: RSA_¥iv©e_de¸y±: %s\n", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
) ) ;

1155 
îr
 = 1;

1158 i‡(
ouéí
) {

1159 *
ouéí
 = 
n
;

1161 *
out
 = 
buf
;

1164  
îr
;

1165 
	}
}

1169 
	$put_pubkey_msg
(
MSG_DATA
 *
m
, *
n
) {

1170 
îr
 = 0;

1171 
∑th
[
MAX_PATH
 + 1];

1172 
k
 = 0;

1173 
RSA
 *
rß
 = 0;

1175 i‡(!
m
) {

1176 
	`LOG
(
LOG_ERR
, "Pointer isÇull.");

1177 
îr
 = 1;

1180 
	`mem£t
(
∑th
, 0, (path));

1181 
	`¢¥ötf
(
∑th
, 
MAX_PATH
, "%s.public-key.≥m.", 
m
->
com
.
dev_id
);

1182 
îr
 = 
	`fûe_2_pubrß
(
∑th
, &
rß
);

1183 if(
îr
) {

1184 
	`LOG
(
LOG_ERR
, "CannotÜoad RSAÖublic key.");

1185 
îr
 = 1;

1188 if(!
rß
) {

1189 
	`LOG
(
LOG_ERR
, "CannotÜoad RSAÖublic key.");

1190 
îr
 = 1;

1193 
k
 = (
RSA
*);

1194 
m
 = 
	`ªÆloc
(m, *
n
 + 
k
);

1195 
	`mem£t
(
m
->
d©a
, 0, 
k
);

1196 
	`mem˝y
(
m
->
d©a
, (*)
rß
, 
k
);

1197 if(
n
) {

1198 *
n
 +(
RSA
*);

1200 
	`uöt16_2_¨r
–(
uch¨
*)(
m
->
com
.
Àn
), 
k
, 2);

1203 if(
îr
) {

1204 if(
rß
) {

1205 
	`RSA_‰ì
(
rß
);

1208  
îr
;

1209 
	}
}

1223 
RSA
 * 
	$gë_§v_¥v
() {

1224 
RSA
 *
p
 = 0;

1225 if(
p
) {

1226  
p
;

1228 
	`fûe_2_¥vrß
("§v-¥iv©e-key.≥m", &
p
);

1229  
p
;

1230 
	}
}

1234 
RSA
 *
	$gë_˛i_pub
(*
idd
) {

1235 
RSA
 *
p
 = 0;

1236 
∑th
[1024];

1237 
	`mem£t
(
∑th
, 0, (path));

1238 
	`•rötf
(
∑th
, "%s.public-key.≥m", 
idd
);

1239 
	`Ârötf
(
°dout
, "∑th: %s\n", 
∑th
);

1240 
	`fûe_2_pubrß
(
∑th
, &
p
);

1241  
p
;

1242 
	}
}

1245 
RSA
 *
	$gë_˛i_¥v
(*
idd
) {

1246 
RSA
 *
p
 = 0;

1247 
∑th
[1024];

1248 
	`mem£t
(
∑th
, 0, (path));

1249 
	`•rötf
(
∑th
, "%s.¥iv©e-key.≥m", 
idd
);

1250 
	`fûe_2_¥vrß
(
∑th
, &
p
);

1251  
p
;

1252 
	}
}

1256 
	$gë_´s256_key
(
uch¨
 **
key
, uch¨ **
iv
) {

1257 
îr
 = 0;

1259 if(!
key
) {

1260 
îr
 = 1;

1264 if(!
iv
) {

1265 
îr
 = 1;

1269 
	`MY_MALLOC
(*
key
, 32);

1270 
	`MY_MALLOC
(*
iv
, 16);

1271 
	`mem˝y
(*
key
, 
´s_key
, 32);

1272 
	`mem˝y
(*
iv
, 
´s_iv
, 16);

1275  
îr
;

1276 
	}
}

1280 
	$cmd_2_§v
(
CMD_ENUM
 
cmd
, 
MSG_ROUTE
 
r
, *
d©a
, 
Àn
, *
idd
, *
ù
) {

1281 
îr
 = 0;

1282 
RSA
 *
pubkey
 = 0;

1283 
uch¨
 *
rß_d©a
 = 0;

1284 
rß_Àn
 = 0;

1286 
sockaddr_ö
 
£rvaddr
;

1287 
MSG_NOTIFY
 *
msg
 = 0;

1288 
uöt16_t
 
n
 = (
MSG_COMMON
);

1289 
time•ec
 
t
;

1290 
d©a_Àn
 [2];

1291 
sockfd
 = 0;

1292 
buf„r
[
MAX_MSG
 + 1];

1295 
	`mem£t
(
buf„r
, 0, (buffer));

1296 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t
);

1297 i‡–(
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
 | 
SOCK_NONBLOCK
, 0)) < 0 ) {

1298 
	`LOG
(
LOG_ERR
, "Cannot create socket.");

1299 
îr
 = 1;

1302 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

1303 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

1304 
£rvaddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ù
);

1305 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

1307 
msg
 = (
MSG_DATA
 *)
buf„r
;

1309 
msg
->
com
.
ty≥
 = 
cmd
;

1310 
msg
->
com
.
i‰ouã
 = 
r
;

1311 
	`mem˝y
(
msg
->
com
.
dev_id
, 
idd
, 
	`MIN
(
LEN_DEVID
, 
	`°æí
(idd) + 1));

1314 if(
d©a
) {

1315 
	`mem˝y
(
msg
->
d©a
, d©a, 
Àn
);

1316 
n
 +
Àn
;

1317 
	`mem£t
(
d©a_Àn
, 0, (data_len));

1318 
	`uöt16_2_¨r
(
d©a_Àn
, 
Àn
, 2);

1319 
	`mem˝y
(
msg
->
com
.
Àn
, 
d©a_Àn
, 2);

1323 
	`uöt64_2_¨r
(
msg
->
com
.
£c⁄d
, 
t
.
tv_£c
, 8);

1324 
	`uöt64_2_¨r
(
msg
->
com
.
«no
, 
t
.
tv_n£c
, 8);

1326 
	`DUM_MSG
(&(
msg
->
com
));

1328 
îr
 = 
	`fûe_2_pubrß
("§v-public-key.≥m", &
pubkey
);

1329 if(!
pubkey
) {

1330 
îr
 = 1;

1331 
	`sy¶og
(
LOG_ERR
, "CannotÖublic key.");

1333 
îr
 = 
	`rß_íc
(
pubkey
, 
buf„r
, &
rß_d©a
, 
n
, &
rß_Àn
);

1334 if(
îr
) {

1335 
	`LOG
(
LOG_ERR
, "rsaÉncryptÉrror.");

1338 
	`Ârötf
(
°dout
, "n: %d,Ñß_Àn: %di\n", 
n
, 
rß_Àn
);

1339 
	`Ârötf
(
°dout
, "rßÜí: %d\n", 
rß_Àn
);

1340 if(
rß_Àn
 >
MAX_MSG
) {

1341 
	`LOG
(
LOG_ERR
, "rsaÉncryptÉrror -->Åoo big.");

1344 
	`mem˝y
(
buf„r
, 
rß_d©a
, 
rß_Àn
);

1345 
buf„r
[
rß_Àn
] = 
ENCRYPT_SRV_PUB
;

1347 
	`Ârötf
(
°dout
, "Fûe: %s, func: %s,Ç: %d,Ñß_Àn: %d\n", 
__FILE__
, 
__FUNCTION__
, 
n
, 
rß_Àn
);

1348 
n
 = 
	`£ndto
(
sockfd
, 
buf„r
, 
rß_Àn
 + 1,

1349 
MSG_CONFIRM
, (c⁄° 
sockaddr
 *Ë&
£rvaddr
,

1350 (
£rvaddr
));

1351 
	`Ârötf
(
°dout
, "£nd gë_´s: %d\n", 
n
);

1352 if(
îr
) {

1353 
	`LOG
(
LOG_ERR
, "Close socketÉrror.");

1357 if(
pubkey
) {

1358 
	`RSA_‰ì
(
pubkey
);

1360 if(
rß_d©a
) {

1361 
	`MY_FREE
(
rß_d©a
);

1363 if(
sockfd
 > 0) {

1364 
îr
 = 
	`˛o£
(
sockfd
);

1365 if(
îr
) {

1366 
	`LOG
(
LOG_ERR
, "Close socketÉrror.");

1369  
îr
;

1370 
	}
}

1374 
	$h™dÀEº‹s
() {

1375 
	`Ârötf
(
°dout
, "aesÉrror\n");

1376 
	}
}

1378 
	$gcm_í¸y±
(*
∂aöãxt
, 
∂aöãxt_Àn
,

1379 *
Ød
, 
Ød_Àn
,

1380 *
key
,

1381 *
iv
, 
iv_Àn
,

1382 *
cùhîãxt
,

1383 *
èg
)

1385 
EVP_CIPHER_CTX
 *
˘x
;

1387 
Àn
;

1389 
cùhîãxt_Àn
;

1393 if(!(
˘x
 = 
	`EVP_CIPHER_CTX_√w
()))

1394 
	`h™dÀEº‹s
();

1397 if(1 !
	`EVP_En¸y±Inô_ex
(
˘x
, 
	`EVP_´s_256_gcm
(), 
NULL
, NULL, NULL))

1398 
	`h™dÀEº‹s
();

1403 if(1 !
	`EVP_CIPHER_CTX_˘æ
(
˘x
, 
EVP_CTRL_GCM_SET_IVLEN
, 
iv_Àn
, 
NULL
))

1404 
	`h™dÀEº‹s
();

1407 if(1 !
	`EVP_En¸y±Inô_ex
(
˘x
, 
NULL
, NULL, 
key
, 
iv
))

1408 
	`h™dÀEº‹s
();

1414 if(1 !
	`EVP_En¸y±Upd©e
(
˘x
, 
NULL
, &
Àn
, 
Ød
, 
Ød_Àn
))

1415 
	`h™dÀEº‹s
();

1417 
	`Ârötf
(
°dout
, "Àn: %d\n", 
Àn
);

1422 if(1 !
	`EVP_En¸y±Upd©e
(
˘x
, 
cùhîãxt
, &
Àn
, 
∂aöãxt
, 
∂aöãxt_Àn
))

1423 
	`h™dÀEº‹s
();

1424 
cùhîãxt_Àn
 = 
Àn
;

1425 
	`Ârötf
(
°dout
, "cùhîãxt: %d\n", 
cùhîãxt_Àn
);

1430 if(1 !
	`EVP_En¸y±FöÆ_ex
(
˘x
, 
cùhîãxt
 + 
Àn
, &len))

1431 
	`h™dÀEº‹s
();

1432 
cùhîãxt_Àn
 +
Àn
;

1434 
	`Ârötf
(
°dout
, "Àn: %d\n", 
Àn
);

1436 if(1 !
	`EVP_CIPHER_CTX_˘æ
(
˘x
, 
EVP_CTRL_GCM_GET_TAG
, 16, 
èg
))

1437 
	`h™dÀEº‹s
();

1440 
	`EVP_CIPHER_CTX_‰ì
(
˘x
);

1442  
cùhîãxt_Àn
;

1443 
	}
}

1447 
	$gcm_de¸y±
(*
cùhîãxt
, 
cùhîãxt_Àn
,

1448 *
Ød
, 
Ød_Àn
,

1449 *
èg
,

1450 *
key
,

1451 *
iv
, 
iv_Àn
,

1452 *
∂aöãxt
)

1454 
EVP_CIPHER_CTX
 *
˘x
;

1455 
Àn
;

1456 
∂aöãxt_Àn
;

1457 
ªt
;

1460 if(!(
˘x
 = 
	`EVP_CIPHER_CTX_√w
()))

1461 
	`h™dÀEº‹s
();

1464 if(!
	`EVP_De¸y±Inô_ex
(
˘x
, 
	`EVP_´s_256_gcm
(), 
NULL
, NULL, NULL))

1465 
	`h™dÀEº‹s
();

1468 if(!
	`EVP_CIPHER_CTX_˘æ
(
˘x
, 
EVP_CTRL_GCM_SET_IVLEN
, 
iv_Àn
, 
NULL
))

1469 
	`h™dÀEº‹s
();

1472 if(!
	`EVP_De¸y±Inô_ex
(
˘x
, 
NULL
, NULL, 
key
, 
iv
))

1473 
	`h™dÀEº‹s
();

1479 if(!
	`EVP_De¸y±Upd©e
(
˘x
, 
NULL
, &
Àn
, 
Ød
, 
Ød_Àn
))

1480 
	`h™dÀEº‹s
();

1486 if(!
	`EVP_De¸y±Upd©e
(
˘x
, 
∂aöãxt
, &
Àn
, 
cùhîãxt
, 
cùhîãxt_Àn
))

1487 
	`h™dÀEº‹s
();

1488 
∂aöãxt_Àn
 = 
Àn
;

1491 if(!
	`EVP_CIPHER_CTX_˘æ
(
˘x
, 
EVP_CTRL_GCM_SET_TAG
, 16, 
èg
))

1492 
	`h™dÀEº‹s
();

1498 
ªt
 = 
	`EVP_De¸y±FöÆ_ex
(
˘x
, 
∂aöãxt
 + 
Àn
, &len);

1501 
	`EVP_CIPHER_CTX_‰ì
(
˘x
);

1503 if(
ªt
 > 0) {

1505 
∂aöãxt_Àn
 +
Àn
;

1506 
	`Ârötf
(
°dout
, "OK )))))))))---Öœöãxt_Àn: %d\n", 
∂aöãxt_Àn
);

1507  
∂aöãxt_Àn
;

1510 
	`Ârötf
(
°dout
, "∂aötoooooooo€xt_Àn: %d\n", 
∂aöãxt_Àn
);

1513 
	}
}

1515 
	$rsb
() {

1517 
	}
}

1527 
	$ev_´s_íc
(
uch¨
 *
ö
, uch¨ **
out
, uch¨ *
key
, uch¨ *
iv
, 
Ànö
, *
ouéí
, uch¨ *
èg
) {

1528 
îr
 = 0;

1529 
n
 = 0;

1531 
uch¨
 
buf
[
MAX_MSG
 + 1];

1533 if(!
ö
) {

1534 
îr
 = 1;

1538 if(!
out
) {

1539 
îr
 = 1;

1543 if(!
key
) {

1544 
îr
 = 1;

1548 if(!
iv
) {

1549 
îr
 = 1;

1553 if(!
ouéí
) {

1554 
îr
 = 1;

1558 
	`mem£t
(
èg
, 0, (tag));

1559 
	`mem£t
(
buf
, 0, (buf));

1560 
n
 = 
	`gcm_í¸y±
(
ö
, 
Ànö
, 
iv
, 
AES_IV_BYTES
,

1561 
key
, 
iv
, 
AES_IV_BYTES
, 
buf
, 
èg
);

1562 if(
n
 < 1) {

1563 
îr
 = 1;

1566 
	`MY_MALLOC
(*
out
, 
n
 + 1);

1567 
	`mem˝y
(*
out
, 
buf
, 
n
);

1568 *
ouéí
 = 
n
;

1571  
îr
;

1572 
	}
}

1576 
	$ev_´s_dec
(
uch¨
 *
ö
, uch¨ **
out
, uch¨ *
key
, uch¨ *
iv
, 
Ànö
, *
ouéí
, uch¨ *
èg
) {

1577 
îr
 = 0;

1578 
n
 = 0;

1580 
uch¨
 
buf
[
MAX_MSG
 + 1];

1582 if(!
ö
) {

1583 
îr
 = 1;

1587 if(!
out
) {

1588 
îr
 = 1;

1592 if(!
key
) {

1593 
îr
 = 1;

1597 if(!
iv
) {

1598 
îr
 = 1;

1602 if(!
ouéí
) {

1603 
îr
 = 1;

1608 
	`mem£t
(
buf
, 0, (buf));

1616 
n
 = 
	`gcm_de¸y±
(
ö
, 
Ànö
, 
iv
, 
AES_IV_BYTES
, 
èg
,

1617 
key
, 
iv
, 
AES_IV_BYTES
, 
buf
);

1618 
	`Ârötf
(
°dout
, "¿dev =======:%d\n", 
n
);

1619 if(
n
 < 1) {

1620 
îr
 = 1;

1623 
	`MY_MALLOC
(*
out
, 
n
 + 1);

1624 
	`mem˝y
(*
out
, 
buf
, 
n
);

1625 *
ouéí
 = 
n
;

1628  
îr
;

1629 
	}
}

1633 
	$msg_´s_íc
(
uch¨
 *
ö
, uch¨ *
buf„r
, uch¨ *
key
, uch¨ *
iv
, 
Ànö
, *
Ànout
, 
lim
) {

1634 
îr
 = 0;

1635 
Àn
 = 0;

1636 
uch¨
 
èg
[
AES_IV_BYTES
 + 1];

1638 if(!
ö
) {

1639 
îr
 = 1;

1643 if(!
buf„r
) {

1644 
îr
 = 1;

1648 if(!
key
) {

1649 
îr
 = 1;

1653 if(!
iv
) {

1654 
îr
 = 1;

1658 if(!
Ànout
) {

1659 
îr
 = 1;

1663 if(
lim
 < (
Ànö
 + 1 + 
AES_IV_BYTES
)) {

1664 
îr
 = 1;

1668 
	`mem£t
(
èg
, 0, (tag));

1669 
Àn
 = 
	`gcm_í¸y±
(
ö
, 
Ànö
, 
iv
, 
AES_IV_BYTES
,

1670 
key
, 
iv
, 
AES_IV_BYTES
, 
buf„r
, 
èg
);

1671 if(
Àn
 < 0) {

1672 
îr
 = 1;

1675 
	`mem˝y
(
buf„r
 + 
Àn
, 
èg
, 
AES_IV_BYTES
);

1676 
Àn
 +
AES_IV_BYTES
;

1677 
buf„r
[
Àn
] = 
ENCRYPT_AES
;

1678 ++
Àn
;

1679 *
Ànout
 = 
Àn
;

1682  
îr
;

1683 
	}
}

1687 
	$msg_´s_dec
(
uch¨
 *
ö
, uch¨ *
buf
, uch¨ *
key
, uch¨ *
iv
, 
Ànö
, *
Ànout
, 
lim
) {

1688 
Àn
 = 0;

1689 
îr
 = 0;

1690 
uch¨
 
èg
[
AES_IV_BYTES
 + 1];

1692 if(!
ö
) {

1693 
îr
 = 1;

1697 if(!
buf
) {

1698 
îr
 = 1;

1702 if(!
key
) {

1703 
îr
 = 1;

1707 if(!
iv
) {

1708 
îr
 = 1;

1712 if(!
Ànout
) {

1713 
îr
 = 1;

1717 if(
Ànö
 > 
MAX_MSG
 + 1) {

1718 
îr
 = 1;

1722 if(
Ànö
 < 
AES_IV_BYTES
 + 1) {

1723 
îr
 = 1;

1727 if(
lim
 < (
Ànö
 - 1 - 
AES_IV_BYTES
)) {

1728 
îr
 = 1;

1732 
	`mem£t
(
èg
, 0, (tag));

1733 
	`mem˝y
(
èg
, 
ö
 + 
Ànö
 - 1 - 
AES_IV_BYTES
, AES_IV_BYTES);

1734 
Àn
 = 
	`gcm_de¸y±
(
ö
, 
Ànö
 - 1 - 
AES_IV_BYTES
, 
iv
, AES_IV_BYTES, 
èg
,

1735 
key
, 
iv
, 
AES_IV_BYTES
, 
buf
);

1736 if(
Àn
 < 0) {

1737 
îr
 = 1;

1738 *
Ànout
 = 0;

1741 *
Ànout
 = 
Àn
;

1745  
îr
;

1746 
	}
}

1750 
HASH_LIST
 
	gli°_ªg_dev
[
HASH_SIZE
 + 1];

1751 
HASH_ITEM
 *
	gimd_fwd_…
 = 0;

	@msg_notify.h

2 #i‚de‡
__˝lu•lus


4 #i‚de‡
_DEFAULT_SOURCE


5 
	#_DEFAULT_SOURCE


	)

7 
	~<sy¶og.h
>

8 
	~<ídün.h
>

9 
	~<°döt.h
>

10 
	~<sys/sockë.h
>

11 
	~<¨∑/öë.h
>

12 
	~<√töë/ö.h
>

13 
	~<time.h
>

14 
	~<sy¶og.h
>

15 
	~<î∫o.h
>

16 
	~<›ís¶/´s.h
>

17 
	~<›ís¶/rß.h
>

18 
	~<›ís¶/îr.h
>

19 
	~<›ís¶/≥m.h
>

20 
	~<›ís¶/evp.h
>

24 
	#PORT
 (7770)

	)

25 
	#NTF_PORT
 (7700)

	)

26 
	#DEV_PORT
 (7000)

	)

27 
	#MAX_PATH
 (2048)

	)

29 
	#MY_MALLOC
(
p
, 
n
Ë{’)=
	`mÆloc
“); if’){
	`mem£t
’,0,n); 
	`sy¶og
(
LOG_INFO
, "- Fûe: %s, func: %s,Üöe: %d, mÆlo¯p: %p,Ç: %d", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
,Ö, (n)); } { sy¶og(
LOG_ALERT
, "- Fûe: %s, func: %s,Üöe: %d, Mem‹y Eº‹.", __FILE__, __FUNCTION__, __LINE__); 
	`exô
(1); } }

	)

30 
	#MY_FREE
(
p
Ë{if’){
	`‰ì
(’)); (p)=0;} 
	`sy¶og
(
LOG_INFO
, "- Fûe: %s, func: %s,Üöe: %d, fªêp: %p\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, (p));}

	)

32 
	#LOG
 
sy¶og


	)

34 
	#LEN_DEVID
 (36)

	)

35 
	#LEN_U64INT
 (8)

	)

36 
	#LEN_U32INT
 (4)

	)

37 
	#LEN_U16INT
 (2)

	)

38 
	#MAX_MSG
 (1280)

	)

39 
	#uch¨
 

	)

40 
	#cch¨
 c⁄° 

	)

41 
	#cuch¨
 c⁄° 

	)

42 
	#puch¨
 *

	)

43 
	#uöt
 

	)

44 
	#puöt
 *

	)

45 
	#AES_BITS
 (256)

	)

46 
	#RSA_BYTES
 (512)

	)

47 
	#UNIT_BLOCK
 (128)

	)

48 
	#AES_BYTES
 (32)

	)

49 
	#AES_IV_BYTES
 
AES_BLOCK_SIZE


	)

50 
	#MAX_DATA
 (
MAX_MSG
 - 1 - 
AES_IV_BYTES
)

	)

52 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

53 
	#MIN
(
a
, 
b
Ë(◊Ë> (bË? (bË: (a))

	)

55 
	#HASH_SIZE
 (10001)

	)

57 
	#INTER_TRACK
 (60)

	)

61 
	mMSG_REG
 = 0,

62 
	mMSG_TRA
,

63 
	mMSG_NTF
,

64 
	mMSG_CNF
,

65 
	mMSG_GET_AES
,

66 } 
	tMSG_ENUM
;

67 
	#CMD_ENUM
 
MSG_ENUM


	)

71 
	mG_NTF_CLI
,

73 
	mF_NTF_CLI
,

75 
	mG_CLI_NTF
,

77 
	mF_CLI_NTF
,

79 
	mG_CLI_SRV
,

80 
	mF_SRV_CLI
,

81 
	mG_NTF_SRV
,

82 
	mF_SRV_NTF
,

83 } 
	tMSG_ROUTE
;

86 
	mENCRYPT_NON
,

87 
	mENCRYPT_SRV_PUB
,

88 
	mENCRYPT_CLI_PUB
,

89 
	mENCRYPT_AES
,

90 } 
	tRSA_AES
;

94 
	mn
;

95 *
	mgroup
;

96 } 
	tHASH_LIST
;

104 
uch¨
 
	mty≥
;

105 
uch¨
 
	mi‰ouã
;

106 
	mdev_id
[
LEN_DEVID
 + 1];

107 
	m¡f_id
[
LEN_DEVID
 + 1];

108 
uch¨
 
	m£c⁄d
[
LEN_U64INT
];

109 
uch¨
 
	m«no
[
LEN_U64INT
];

110 
uch¨
 
	mÀn
[
LEN_U16INT
];

111 } 
	tMSG_COMMON
;

114 
MSG_COMMON
 
	mcom
;

115 
	md©a
[0];

116 } 
	tMSG_DATA
;

119 
	mn
;

120 *
	m¸t
;

121 } 
	tMSG_CRT
;

123 
	#MSG_NOTIFY
 
MSG_DATA


	)

124 
	#MSG_REGISTER
 
MSG_DATA


	)

125 
	#MSG_TRACKING
 
MSG_DATA


	)

128 
	s__HASH_ITEM
 {

129 
sockaddr_ö
 
	mùv4
;

130 
sockaddr_ö
 
	mùv4_¡fõr
;

131 
sockaddr_ö6
 
	mùv6
;

132 
size_t
 
	mn_msg
;

133 
MSG_NOTIFY
 *
	mmsg
;

134 
MSG_CRT
 *
	m¸t
;

135 
__HASH_ITEM
 *
	m√xt
;

136 } 
	tHASH_ITEM
;

140 
hash_func
(*
id
, 
n
);

142 
uöt64_2_¨r
(*
¨r
, 
uöt64_t
 , 
sz
);

143 
¨r_2_uöt64
(*
¨r
, 
uöt64_t
 *
n
, 
sz
);

144 
uöt32_2_¨r
(*
¨r
, 
uöt32_t
 , 
sz
);

145 
¨r_2_uöt32
(*
¨r
, 
uöt32_t
 *
n
, 
sz
);

146 
uöt16_2_¨r
(*
¨r
, 
uöt16_t
 , 
sz
);

147 
¨r_2_uöt16
(*
¨r
, 
uöt16_t
 *
n
, 
sz
);

149 
dum_msg
(
MSG_COMMON
 *, const *, const *, );

150 
	#DUM_MSG
(
i
Ë
	`dum_msg
(i, 
__FILE__
, 
__FUNCTION__
 ,
__LINE__
)

	)

153 
dum_ùv4
(
sockaddr_ö
 *, c⁄° *, c⁄° *, 
löe
);

154 
	#DUM_IPV4
(
i
Ë
	`dum_ùv4
(i, 
__FILE__
, 
__FUNCTION__
 ,
__LINE__
)

	)

156 
ªg_to_èbÀ
(
MSG_REGISTER
 *
msg
, 
n
, 
time•ec
 *);

158 
hl_åack_msg
(
MSG_TRACKING
 *
msg
, 
n
, 
sockaddr_ö
*, 
ty≥
);

160 
add_to_ôem_li°
(
MSG_NOTIFY
 *
msg
, 
HASH_ITEM
 **
l
, 
sz
);

161 
	#add_to_imd_fwd
 
add_to_ôem_li°


	)

166 
£nd_to_d°
(
sk
, 
HASH_ITEM
 **
l
, *
c
, 
˛ór
);

168 
	#£nd_imd_fwd
 
£nd_to_d°


	)

171 
put_time_to_msg
–
MSG_COMMON
 *, 
time•ec
 *
t
);

173 
HASH_LIST
 
li°_ªg_dev
[
HASH_SIZE
 + 1];

174 
HASH_LIST
 
li°_ªg_nŸifõr
[
HASH_SIZE
 + 1];

176 
HASH_ITEM
 *
nŸifõd_li°
;

179 
£nd_msg_åack
(c⁄° *
iid
, 
sockfd
,

180 *
ùaddr
, 
p‹t
, 
time•ec
 *
t
, 
uch¨
 *
key
, uch¨ *
iv
);

182 
¡f_´s_í¸y±
(
uch¨
 *
ö
, uch¨ *
out
, uch¨* 
key
, uch¨* 
ivec
, 
n
, 
íc
);

183 
¡f_´s_fûe
(
uch¨
 *
ö
, uch¨ *
out
, uch¨* 
key
, uch¨* 
ivec
, 
íc
);

184 
fûe_2_byãs
(c⁄° 
uch¨
 *
∑th
, uch¨ **
ouçut
);

185 
fûe_2_pubrß
(c⁄° 
uch¨
 *
∑th
, 
RSA
 **
ouçut
);

186 
fûe_2_¥vrß
(c⁄° 
uch¨
 *
∑th
, 
RSA
 **
ouçut
);

187 
rß_dec
(
RSA
 *
¥iv
, c⁄° 
uch¨
 *
ö
, uch¨ **
out
, 
Ànö
, *
ouéí
);

188 
rß_íc
(
RSA
 *
pubkey
, c⁄° 
uch¨
 *
ö
, uch¨ **
out
, 
Ànö
, *
ouéí
);

190 
HASH_ITEM
 *
imd_fwd_…
;

192 
lﬂd_ªg_li°
();

193 
put_pubkey_msg
(
MSG_DATA
 *, *);

196 
RSA
 *
gë_§v_¥v
();

198 
RSA
 *
gë_˛i_pub
(*
idd
);

199 
RSA
 *
gë_˛i_¥v
(*
idd
);

205 
uch¨
 
´s_key
[];

206 
uch¨
 *
´s_iv
;

208 
gë_´s256_key
(
uch¨
 **
key
, uch¨ **
iv
);

212 
cmd_2_§v
(
CMD_ENUM
 
cmd
, 
MSG_ROUTE
 
r
, *
d©a
, 
Àn
, *
idd
, *
ù
);

213 
ev_´s_íc
(
uch¨
 *
ö
, uch¨ **
out
, uch¨ *
key
, uch¨ *
iv
, 
Ànö
, *
Ànout
, uch¨ *
èg
);

214 
ev_´s_dec
(
uch¨
 *
ö
, uch¨ **
out
, uch¨ *
key
, uch¨ *
iv
, 
Ànö
, *
Ànout
, uch¨ *
èg
);

215 
msg_´s_íc
(
uch¨
 *
ö
, uch¨ *
buf
, uch¨ *
key
, uch¨ *
iv
, 
Ànö
, *
Ànout
, 
lim
);

216 
msg_´s_dec
(
uch¨
 *
ö
, uch¨ *
buf
, uch¨ *
key
, uch¨ *
iv
, 
Ànö
, *
Ànout
, 
lim
);

217 #i‚de‡
__˝lu•lus


	@notifier.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/sockë.h
>

8 
	~<¨∑/öë.h
>

9 
	~<√töë/ö.h
>

10 
	~<¨∑/öë.h
>

11 
	~"msg_nŸify.h
"

13 
	#MAXLINE
 
MAX_MSG


	)

14 c⁄° *
	gid
 = "ed628094-63f3-452a-91c8-3ae24f281dd2";

15 *
	gdev_id
 = "b7bb3690-ebcb-4bf9-88b0-31c130ec44a2";

17 
	ggŸ_´s
 = 0;

18 
uch¨
 
	g´s256_key
[
AES_BYTES
];

19 
uch¨
 
	g´s256_iv
[
AES_IV_BYTES
];

21 
	$fõr
() {

23 
	}
}

25 
	$nŸifõr
(*
ù
) {

26 
sz
 = 
MAX_MSG
 + 1;

27 
sockaddr_ö
 
£rvaddr
;

29 
MSG_NOTIFY
 *
msg
 = 0;

30 
n
 = 0;

31 
time•ec
 
t
;

32 
buf
 [2];

33 
sockfd
 = 0;

34 
îr
 = 0;

35 
buf„r
[
MAX_MSG
 + 1];

36 
bufout
[
MAX_MSG
 + 1];

37 
uch¨
 *
p
 = 0;

38 
	`Ârötf
(
°dout
, "°æí: %d\n", 
	`°æí
(
id
));

40 
	`mem£t
(
buf„r
, 0, (buffer));

41 
	`mem£t
(
bufout
, 0, (bufout));

42 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t
);

43 i‡–(
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
 | 
SOCK_NONBLOCK
, 0)) < 0 ) {

44 
	`LOG
(
LOG_ERR
, "Cannot create socket.");

45 
	`exô
(
EXIT_FAILURE
);

47 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

48 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

49 
£rvaddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ù
);

50 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

52 
msg
 = (
MSG_NOTIFY
 *Ë
buf„r
;

54 
msg
->
com
.
ty≥
 = 
MSG_NTF
;

55 
msg
->
com
.
i‰ouã
 = 
G_NTF_CLI
;

56 
	`mem˝y
(
msg
->
com
.
dev_id
, dev_id, 
	`MIN
(
LEN_DEVID
, 
	`°æí
(dev_id) + 1));

57 
	`mem˝y
(
msg
->
com
.
¡f_id
, 
id
, 
	`MIN
(
LEN_DEVID
, 
	`°æí
(id) + 1));

58 
n
 = 
MAX_MSG
 - (
MSG_COMMON
Ë- 1 - 
AES_IV_BYTES
;

59 
	`mem£t
(
buf
, 0, (buf));

60 
	`uöt16_2_¨r
(
buf
, 
n
, 2);

61 
	`mem˝y
(
msg
->
com
.
Àn
, 
buf
, 2);

62 
	`¢¥ötf
(
msg
->
d©a
, 
n
, "%s", "fdjhfjhfj fdkfldfd kkjtjtk Nguyen Thai Thuan, Thanh Hong, Thanh Tam.");

63 
	`uöt64_2_¨r
(
msg
->
com
.
£c⁄d
, 
t
.
tv_£c
, 8);

64 
	`uöt64_2_¨r
(
msg
->
com
.
«no
, 
t
.
tv_n£c
, 8);

66 
	`DUM_MSG
(&(
msg
->
com
));

68 
p
 = (
uch¨
*Ë
msg
;

69 if(
gŸ_´s
) {

71 
îr
 = 
	`msg_´s_íc
(
buf„r
, 
bufout
, 
´s256_key
, 
´s256_iv
,

72 
MAX_MSG
 - 
AES_IV_BYTES
, &
n
, MAX_MSG + 1);

73 if(
îr
) {

76 
p
 = 
bufout
;

77 
sz
 = 
n
;

79 
p
[
MAX_MSG
] = 
ENCRYPT_NON
;

82 
n
 = 
	`£ndto
(
sockfd
, 
p
, 
sz
,

83 
MSG_CONFIRM
, (c⁄° 
sockaddr
 *Ë&
£rvaddr
,

84 (
£rvaddr
));

86 
îr
 = 
	`˛o£
(
sockfd
);

87 if(
îr
) {

88 
	`LOG
(
LOG_ERR
, "Close socketÉrror.");

90 
	}
}

94 
	$maö
(
¨gc
, *
¨gv
[]) {

95 
sockfd
;

96 
buf„r
[
MAXLINE
 + 1];

97 
bufout
[
MAXLINE
 + 1];

98 *
p
 = 0;

99 
time•ec
 
t0
 = {0};

100 
time•ec
 
t1
 = {0};

101 
sockaddr_ö
 
£rvaddr
;

102 
sockaddr_ö
 
fbaddr
;

103 
vÆ
 = 1;

104 
cou¡
 = 0;

105 
îr
 = 0;

107 
	`Ârötf
(
°dout
, "\n°æí: %d==============\n", 
	`°æí
(
id
));

108 
	`£éogmask
 (
	`LOG_UPTO
 (
LOG_INFO
));

109 
	`›ílog
 ("znŸifõr", 
LOG_CONS
 | 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_LOCAL1
);

112 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t0
);

113 i‡–(
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
 | 
SOCK_NONBLOCK
, 0)) < 0 ) {

114 
	`LOG
(
LOG_ERR
, "Cannot create socket.");

115 
	`exô
(
EXIT_FAILURE
);

117 
	`£tsock›t
(
sockfd
, 
IPPROTO_IP
, 
IP_MTU_DISCOVER
, &
vÆ
, (val));

118 i‡(!
¨gv
[1]) {

119 
	`Ârötf
(
°dout
, "AddressÇeedÉnteringásárgv[1].\n");

120 
	`exô
(
EXIT_FAILURE
);

122 if(
INADDR_NONE
 =
	`öë_addr
(
¨gv
[1])) {

123 
	`Ârötf
(
°dout
, "AddressÇeedÉnteringásárgv[1].\n");

124 
	`exô
(
EXIT_FAILURE
);

126 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

127 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

128 
£rvaddr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

130 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
NTF_PORT
);

133 i‡–
	`böd
(
sockfd
, (c⁄° 
sockaddr
 *)&
£rvaddr
, (servaddr)) < 0 )

135 
	`≥º‹
("bind failed");

136 
	`exô
(
EXIT_FAILURE
);

141 
n
 = 0, 
Àn
 = (
£rvaddr
);

142 
	`£nd_msg_åack
(
id
, 
sockfd
, 
¨gv
[1], 
PORT
 + 1, &
t0
, 0, 0);

143 
	`¶ìp
(1);

144 
	`cmd_2_§v
(
MSG_GET_AES
, 
G_NTF_SRV
, 0, 0, (*Ë
id
, 
¨gv
[1]);

147 
MSG_DATA
 *
dt
 = 0;

148 
	`u¶ìp
(100 * 1000);

149 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t1
);

150 if(
t1
.
tv_£c
 - 
t0
.tv_sec > 3) {

151 if(
cou¡
 > 30 && 
gŸ_´s
) {

153 
	`LOG
(
LOG_ERR
, "CannotÇotifyÅo CLI");

156 
t0
 = 
t1
;

157 if(
gŸ_´s
) {

158 
	`£nd_msg_åack
(
id
, 
sockfd
, 
¨gv
[1], 
PORT
 + 1, &
t0
, 
´s256_key
, 
´s256_iv
);

159 
	`nŸifõr
(
¨gv
[1]);

161 
	`£nd_msg_åack
(
id
, 
sockfd
, 
¨gv
[1], 
PORT
 + 1, &
t0
, 0, 0);

162 
	`cmd_2_§v
(
MSG_GET_AES
, 
G_NTF_SRV
, 0, 0, (*Ë
id
, 
¨gv
[1]);

164 ++
cou¡
;

166 
Àn
 = (
fbaddr
);

167 
	`mem£t
(
buf„r
, 0, (buffer));

168 
	`mem£t
(&
fbaddr
, 0, (fbaddr));

169 
n
 = 
	`ªcv‰om
(
sockfd
, (*)
buf„r
, (buffer),

170 
MSG_DONTWAIT
, (
sockaddr
 *Ë&
fbaddr
,

171 &
Àn
);

173 if(
n
 < 1 ) {

176 if(
n
 < (
MSG_COMMON
)) {

179 
p
 = 
buf„r
;

181 
MSG_COMMON
 *
msg
 = 0;

182 
uch¨
 
íc
 = 0;

183 
íc
 = 
buf„r
[
n
-1];

184 
	`Ârötf
(
°dout
, "ªcv -------: %d,Énc: %d\n", 
n
, 
íc
);

185 if(
íc
) {

186 if(
íc
 =
ENCRYPT_CLI_PUB
) {

187 
	`Ârötf
(
°dout
, "MUST dec byÑsaÖrivate key.\n");

188 
uch¨
 *
out
 = 0;

189 
ouéí
 = 0;

190 
RSA
 *
key
 = 0;

192 
key
 = 
	`gë_˛i_¥v
((*)
id
);

193 
	`rß_dec
(
key
, 
buf„r
, &
out
, 
n
-1, &
ouéí
);

194 if(!
out
) {

197 
	`mem£t
(
buf„r
, 0, (buffer));

198 
	`mem˝y
(
buf„r
, 
out
, 
ouéí
);

199 
n
 = 
ouéí
;

201 if(
key
) {

202 
	`RSA_‰ì
(
key
);

204 if(
out
) {

205 
	`MY_FREE
(
out
);

207 } i‡(
íc
 =
ENCRYPT_AES
) {

208 
îr
 = 
	`msg_´s_dec
(
buf„r
, 
bufout
, 
´s256_key
, 
´s256_iv
, 
n
, &n, 
MAX_MSG
 + 1);

209 if(
îr
) {

210 
n
 = 0;

213 
p
 = 
bufout
;

216 
	`Ârötf
(
°dout
, "\n----NON BEÉncrypted----------\n");

218 
dt
 = (
MSG_DATA
 *Ë
p
;

219 
msg
 = (
MSG_COMMON
*Ë
p
;

220 
	`Ârötf
(
°dout
, "devid ooooooooooooooﬂes: %s\n", 
msg
->
dev_id
);

221 
	`Ârötf
(
°dout
, "¡‡ooooooooooooooﬂes: %s\n", 
msg
->
¡f_id
);

222 if(
msg
->
i‰ouã
 =
F_SRV_NTF
) {

223 if(
msg
->
ty≥
 =
MSG_GET_AES
) {

225 
uch¨
 *
p
 = 
dt
->
d©a
;

226 
uöt16_t
 
sz
 = 0;

227 
	`¨r_2_uöt16
(
msg
->
Àn
, &
sz
, 2);

228 
	`Ârötf
(
°dout
, "d©®size: %d\n", 
sz
);

229 if(
sz
 !(
AES_BYTES
 + 
AES_IV_BYTES
) ) {

232 
	`Ârötf
(
°dout
, "============================================did get AES key\n");

233 
	`mem˝y
(
´s256_key
, 
p
, 
AES_BYTES
);

234 
	`mem˝y
(
´s256_iv
, 
p
 + 
AES_BYTES
, 
AES_IV_BYTES
);

235 
gŸ_´s
 = 1;

236 
	`nŸifõr
(
¨gv
[1]);

240 
	`Ârötf
(
°dout
, "Did gëÇ: %d============\n.\n", 
n
);

243 
	`˛o£
(
sockfd
);

244 
	`˛o£log
();

246 
	}
}

	@rsa.ut.c

1 
	~"msg_nŸify.h
"

2 
	~<°rög.h
>

9 
	gãxt
[1024];

12 
	$maö
(
¨gc
, *
¨gv
[]) {

13 
îr
 = 0;

14 
RSA
 *
pubkey
 = 0;

15 
RSA
 *
¥vkey
 = 0;

16 
uch¨
 *
dec
 = 0;

17 
uch¨
 *
íc
 = 0;

18 
n
 = 0;

19 
k
 = 0;

20 
	`•rötf
(
ãxt
, "%s", 
¨gv
[1]);

22 
îr
 = 
	`fûe_2_pubrß
("§v-public-key.≥m", &
pubkey
);

23 i‡(
îr
) {

24 
	`Ârötf
(
°dout
, "ERROR: RSA_public_í¸y±: %s\n", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
) ) ;

28 
îr
 = 
	`fûe_2_¥vrß
("§v-¥iv©e-key.≥m", &
¥vkey
);

29 i‡(
îr
) {

30 
	`Ârötf
(
°dout
, "ERROR: RSA_¥iv©e_de¸y±: %s\n", 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
NULL
) ) ;

34 
	`Ârötf
(
°dout
, "sizêo‡publi¯key: %d\n", 
	`RSA_size
(
pubkey
));

35 
	`Ârötf
(
°dout
, "sizêo‡¥iv©êkey: %d\n", 
	`RSA_size
(
¥vkey
));

37 
îr
 = 
	`rß_íc
(
pubkey
, 
ãxt
, &
íc
, 
	`°æí
—ext), &
n
);

38 i‡(
îr
) {

39 
	`Ârötf
(
°dout
, "encÉrror.\n");

42 
	`Ârötf
(
°dout
, "öÀn: %d,Ç: %d, \¿-------------------Énc: %s\n", 
	`°æí
(
ãxt
), 
n
, 
íc
);

44 
îr
 = 
	`rß_dec
(
¥vkey
, 
íc
, &
dec
, 
n
, &
k
);

45 i‡(
îr
) {

46 
	`Ârötf
(
°dout
, "decÉrror.\n");

49 
	`Ârötf
(
°dout
, "öÀn: %d, ouéí: %d, dec: %s, \¿-------------------Énc: %s\n", 
n
, 
k
, 
dec
);

53 if(
pubkey
) {

54 
	`RSA_‰ì
(
pubkey
);

57 if(
¥vkey
) {

58 
	`RSA_‰ì
(
¥vkey
);

61 i‡(
dec
) {

62 
	`MY_FREE
(
dec
);

65 i‡(
íc
) {

66 
	`MY_FREE
(
íc
);

69  
EXIT_SUCCESS
;

70 
	}
}

	@rubbish/skylab_shared_data.cc

2 
	~"skyœb_sh¨ed_d©a.h
"

3 
	~<uni°d.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<sys/mm™.h
>

8 
	~<sys/°©.h
>

9 
	~<f˙é.h
>

10 
	~<±hªad.h
>

11 
	~<uni°d.h
>

12 #ifde‡
SKYLAB_CCUBE_SHM


13 
	~"ccube_utûs.h
"

14 #ñi‡
deföed
(
SKYLAB_PROXY_SHM
)

15 
	~"°a_quic_°ªam_mux.h
"

20 
	#_X
(
u
Ë
AAA_
##
	)
u

22 
	#IGX_SKYLAB_PATH
 "/77b5ó39-1dc2-4875-8b4c-8700972db7ff_"

	)

23 
	#IGX_SKYLAB_SHARED_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

24 
	#LIST_SHARED_TRAFFIC_SZ
 (1 * 1024 * 1024)

	)

25 
	#SHARED_TRAFFIC_STEP
 (100 *1024)

	)

28 
	$_X
(
öô_£rvi˚
)(*
∑th
, **, );

29 
	$_X
(
öô_shm_mtx
)(
±hªad_muãx_t
 *);

30 
	`ªÆ_equÆ
(
TRAFFIC_STREAM_INFO
 *
a
, TRAFFIC_STREAM_INFO *
b
);

31 
	`com∑ª_åaffic_öfo
(
TRAFFIC_STREAM_INFO
 *
a
, TRAFFIC_STREAM_INFO *
b
);

33 
	$skyœb_u∆ök_shm
()

35 
îr
 = 0;

36 *
∑th
 = (*)
IGX_SKYLAB_PATH
;

39 if(
skyœb_d©a_shm
)

41 
îr
 = 
	`munm≠
(
skyœb_d©a_shm
, 
LIST_SHARED_TRAFFIC_SZ
);

44 if(!
∑th
)

46 
îr
 = 
	`shm_u∆ök
(
∑th
);

50 
	`Ârötf
(
°dout
, "î∏- %s: %d\n", 
__FUNCTION__
, 
îr
);

51  
îr
;

52 
	}
}

54 
	$dump_åaffic_to_°r
(
TRAFFIC_STREAM_INFO
 *
p
, *
mlog
)

56 if(!
p
 || !
mlog
)

60 *
d©a
 = 0;

61 
	`a•rötf
(&
d©a
, "start_at(sec,Çano sec): (%llu, %llu), stream_id: %d, is_first: %s, \
: %llu, delta_upload: %llu,Öid: %llu, download: %llu, \
_dow∆ﬂd: %Œu,ÖrŸo: %s, is_˛o£d: %s,Ö‹t: %d\n\n",

64 ()
p
->
°¨t_©
.
tv_£c
,

65 ()
p
->
°¨t_©
.
tv_n£c
,

66 ()
p
->
°ªam_id
,

67 
p
->
is_fú°
 ? "1" : "0",

68 
p
->
u∂ﬂd
,

69 
p
->
dñè_u∂ﬂd
,Ö->
pid
,Ö->
dow∆ﬂd
,Ö->
dñè_dow∆ﬂd
,

70 
p
->
¥Ÿo
,Ö->
is_˛o£d
 ? "1":"0",Ö->
p‹t
);

72 if(
d©a
)

74 
°d
::
°rög
 *
°r
 = (°d::°rög *)
mlog
;

75 (*
°r
Ë+
d©a
;

76 
	`‰ì
(
d©a
);

78 
	}
}

80 *
	$skyœb_›í_shm
()

82 
îr
 = 0;

83 *
∑th
 = (*)
IGX_SKYLAB_PATH
;

86 
îr
 = 
	`_X
(
öô_£rvi˚
)(
∑th
, &
skyœb_d©a_shm
, 
LIST_SHARED_TRAFFIC_SZ
);

89 if(!
îr
){

90  
skyœb_d©a_shm
;

94 
	}
}

97 
	$_X
(
öô_£rvi˚
)(*
∑th
, **
out
, 
sz
)

99 
¸óã
 = 0;

100 *
key
 = 
∑th
;

101 
îr
 = 0;

102 
shm
 = 0;

103 *
d©a
 = 0;

109 if(!
out
)

111 
îr
 = 
__LINE__
;

115 
shm
 = 
	`shm_›í
(
key
, 
O_CREAT
 | 
O_RDWR
 | 
O_EXCL
, 
IGX_SKYLAB_SHARED_MODE
);

116 if(
shm
 >= 0)

119 
¸óã
 = 1;

124 
shm
 = 
	`shm_›í
(
key
, 
O_RDWR
 | 
O_EXCL
, 
IGX_SKYLAB_SHARED_MODE
);

127 if(
shm
 < 0)

129 
îr
 = 
__LINE__
;

133 
	`·runˇã
(
shm
, 
sz
);

136 
d©a
 = 
	`mm≠
(0, 
sz
, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
 , 
MAP_SHARED
, 
shm
, 0);

138 if(
d©a
 =
MAP_FAILED
)

140 
îr
 = 
__LINE__
;

144 if(!
d©a
)

146 
îr
 = 
__LINE__
;

149 *
out
 = 
d©a
;

150 if(!
¸óã
)

152 
	`¶ìp
(1);

156 
	`mem£t
(
d©a
, 0, 
sz
);

158 
LIST_SHARED_TRAFFIC
 *
p
 = (LIST_SHARED_TRAFFIC *)
d©a
;

159 
±hªad_muãx_t
 *
mtx
 = &(
p
->
‰ame_mtx
);

160 
p
->
tŸÆ
 = 
LIST_SHARED_TRAFFIC_SZ
;

161 
îr
 = 
	`_X
(
öô_shm_mtx
)(
mtx
);

164 if(
shm
 > -1)

166 
îr
 = 
	`˛o£
(
shm
);

168  
îr
;

169 
	}
}

171 
	$_X
(
öô_shm_mtx
)(
±hªad_muãx_t
 *
shm_mtx
)

173 
îr
 = 0;

176 if(!
shm_mtx
)

178 
îr
 = 
__LINE__
;

182 
±hªad_muãx©å_t
 
psh¨edm
;

183 
	`±hªad_muãx©å_öô
(&
psh¨edm
);

184 
	`±hªad_muãx©å_£çsh¨ed
(&
psh¨edm
, 
PTHREAD_PROCESS_SHARED
);

185 
îr
 = 
	`±hªad_muãx_öô
(
shm_mtx
, &
psh¨edm
);

186 if(
îr
)

188 
îr
 = 
__LINE__
;

193 
	`Ârötf
(
°dout
, "î∏- %s: %d\n", 
__FUNCTION__
, 
îr
);

194  
îr
;

195 
	}
}

197 
	$skyœb_wrôe_shm
(
LIST_SHARED_TRAFFIC
 *
p
, *
d©a
, 
n
)

199 
rs
 = 0;

201 
îrx
 = 0;

205 *
tmp
 = 0;

206 if(!
d©a
)

208 
rs
 = -1;

211 if(!
p
)

213 
rs
 = -2;

216 if(
n
 < 1){

220 
tmp
 = 
p
->
d©a
;

222 
îrx
 = 
	`±hªad_muãx_lock
(&(
p
->
‰ame_mtx
));

226 if(
îrx
) {

230 if–(
n
 + 
p
->
u£d_d©a
 + (
LIST_SHARED_TRAFFIC
)Ë>p->
tŸÆ
)

232 
p
->
u£d_d©a
 = 0;

236 
	`mem˝y
(
tmp
 + 
p
->
u£d_d©a
, 
d©a
, 
n
);

237 
p
->
u£d_d©a
 +
n
;

238 
rs
 = 
p
->
u£d_d©a
;

242 if(!
îrx
){

243 
îrx
 = 
	`±hªad_muãx_u∆ock
(&(
p
->
‰ame_mtx
));

248  
rs
;

249 
	}
}

251 
	$skyœb_ªad_shm
(
LIST_SHARED_TRAFFIC
 *
p
, **
d©a
, 
˛ón
)

253 
rs
 = 0;

254 *
tmp
 = 0;

255 
îrx
 = 0;

258 
n
 = 0;

259 if(!
d©a
)

261 
rs
 = -1;

264 if(!
p
)

266 
rs
 = -2;

270 
îrx
 = 
	`±hªad_muãx_lock
(&(
p
->
‰ame_mtx
));

272 if(
îrx
) {

275 
n
 = 
p
->
u£d_d©a
;

276 if–
n
 < 1)

280 
tmp
 = (*)
	`mÆloc
(
n
 + 1);

281 if(!
tmp
)

285 
	`mem£t
(
tmp
, 0,
n
 + 1);

286 
	`mem˝y
(
tmp
 , 
p
->
d©a
, 
n
);

287 
p
->
u£d_d©a
 = 0;

288 
p
->
d©a
[0] = 0;

289 
rs
 = 
n
;

293 if(!
îrx
) {

294 
îrx
 = 
	`±hªad_muãx_u∆ock
(&(
p
->
‰ame_mtx
));

296 (*
d©a
Ë
tmp
;

299  
rs
;

300 
	}
}

302 
±hªad_t
 
	gdummy_w©chög
 = 0;

303 
LIST_SHARED_TRAFFIC
 *
	gp£ssi⁄s
 = 0;

304 
±hªad_muãx_t
 
	g£ssi⁄_mtx
 = 
PTHREAD_MUTEX_INITIALIZER
;

305 
™Æy£_d©a
();

306 *
	$dummy_w©chög_body
(*
dè
)

313 
	`¶ìp
(3);

314 
	`™Æy£_d©a
();

317 
	}
}

319 
	$skyœb_öô_w©chög_thªad
()

321 
rc
 = 0;

322 
îr
 = 0;

323 if(!
p£ssi⁄s
)

325 
p£ssi⁄s
 = (
LIST_SHARED_TRAFFIC
*)
	`mÆloc
((LIST_SHARED_TRAFFIC));

326 
	`mem£t
(
p£ssi⁄s
, 0, (
LIST_SHARED_TRAFFIC
));

327 
p£ssi⁄s
->
tŸÆ
 = (
LIST_SHARED_TRAFFIC
);

328 
îr
 = 
	`±hªad_muãx_öô
–&(
p£ssi⁄s
->
‰ame_mtx
), 0);

330 if(
îr
)

332 
	`exô
(1);

334 
rc
 = 
	`±hªad_¸óã
(&
dummy_w©chög
, 0, 
dummy_w©chög_body
, 0);

335 if(
rc
)

337 
	`exô
(1);

339 
	}
}

341 *
	gskyœb_d©a_shm
 = 0;

343 
	$™Æy£_d©a
()

345 *
d©a
 = 0;

346 
n
 = 0;

347 
k
 = 0;

348 
szôem
 = (
TRAFFIC_STREAM_INFO
);

349 
i
 = 0;

351 
TRAFFIC_STREAM_INFO
 *
tmp
 = 0;

352 
TRAFFIC_STREAM_INFO
 *
t
 = 0;

354 
LIST_SHARED_TRAFFIC
 *
p
 = (LIST_SHARED_TRAFFIC *)
skyœb_d©a_shm
;

356 
time•ec
 
upd©ed_©
;

357 
	`mem£t
(&
upd©ed_©
, 0, (updated_at));

359 if–
	`˛ock_gëtime
–
CLOCK_REALTIME
, &
upd©ed_©
) == -1 ) {

360 
	`LOG
(
ERROR
Ë<< "MC2-985, " << 
__FILE__
 << ":" << 
__FUNCTION__
 << ":" << 
__LINE__


362 << 
°d
::
ídl
;

363 
	`exô
(1);

368 if(!
p
)

372 if(!
p£ssi⁄s
)

376 
n
 = 
	`skyœb_ªad_shm
(
p
, (**)&
d©a
, 0);

378 if–
n
 < 1 || !
d©a
){

381 
k
 = 
n
 / 
szôem
;

382 
tmp
 = (
TRAFFIC_STREAM_INFO
 *)
d©a
;

386 
mm
 = 0, 
u
 = 0;

387 
±hªad_muãx_t
 *
mtx
 = &(
£ssi⁄_mtx
);

388 
	`±hªad_muãx_lock
(
mtx
);

391 
i
 = 0; i < 
k
; ++i)

393 
found
 = 0;

394 
c⁄d
 = 0;

398 
t
 = (
TRAFFIC_STREAM_INFO
 *)
p£ssi⁄s
->
d©a
;

399 
mm
 = 
p£ssi⁄s
->
u£d_d©a
/
szôem
;

401 
u
 = 0; u < 
mm
; ++u)

414 
c⁄d
 = (
upd©ed_©
.
tv_£c
 - 
t
[
u
].updated_at.tv_sec > (10*60));

415 if(
c⁄d
){

416 
t
[
u
].
is_˛o£d
 = 1;

419 
c⁄d
 = (
t
[
u
].
°¨t_©
.
tv_£c
 !
tmp
[
i
].start_at.tv_sec);

420 if(
c⁄d
){

424 
c⁄d
 = (
t
[
u
].
°¨t_©
.
tv_n£c
 !
tmp
[
i
].start_at.tv_nsec);

425 if(
c⁄d
){

429 
c⁄d
 = (
t
[
u
].
pid
 !
tmp
[
i
].pid);

430 if(
c⁄d
){

434 
c⁄d
 = (
t
[
u
].
°ªam_id
 !
tmp
[
i
].stream_id);

435 if(
c⁄d
){

439 
found
 = 1;

454 if(!
found
){

455 
	`add_ôem_åaffic
(&
p£ssi⁄s
, (*)(
tmp
 + 
i
), 
szôem
);

459 
t
[
u
].
upd©ed_©
 = 
tmp
[
i
].updated_at;

460 if(
tmp
[
i
].
p‹t
 > 0)

462 
t
[
u
].
p‹t
 = 
tmp
[
i
].port;

464 if(
tmp
[
i
].
u∂ﬂd
 > 
t
[
u
].upload)

466 
t
[
u
].
dñè_u∂ﬂd
 +–
tmp
[
i
].
u∂ﬂd
 -Å[u].upload);

467 
t
[
u
].
u∂ﬂd
 = 
tmp
[
i
].upload;

469 if(
tmp
[
i
].
dow∆ﬂd
 > 
t
[
u
].download)

471 
t
[
u
].
dñè_dow∆ﬂd
 +–
tmp
[
i
].
dow∆ﬂd
 -Å[u].download);

472 
t
[
u
].
dow∆ﬂd
 = 
tmp
[
i
].download;

474 if(
t
[
u
].
is_fú°
)

476 
t
[
u
].
is_fú°
 = 0;

477 
t
[
u
].
dñè_dow∆ﬂd
 = 
tmp
[
i
].
dow∆ﬂd
;

478 
t
[
u
].
dñè_u∂ﬂd
 = 
tmp
[
i
].
u∂ﬂd
;

480 
t
[
u
].
is_˛o£d
 = 
tmp
[
i
].is_closed;

481 if(
tmp
[
i
].
¥Ÿo
[0])

483 
	`¢¥ötf
(
t
[
u
].
¥Ÿo
, 5, "%s", 
tmp
[
i
].proto);

485 if(
tmp
[
i
].
ù
[0])

487 
	`¢¥ötf
(
t
[
u
].
ù
, 64, "%s", 
tmp
[
i
].ip);

495 
	`±hªad_muãx_u∆ock
(
mtx
);

499 if(
d©a
){

500 
	`‰ì
(
d©a
);

502 
	}
}

509 
	$add_ôem_åaffic
(
LIST_SHARED_TRAFFIC
 **
p
, *
ôem
, 
sz
)

511 
LIST_SHARED_TRAFFIC
 *
t
 = 0;

512 
n
 = 0;

513 *
pd©a
 = 0;

516 if(
sz
 < 1){

519 if(!
ôem
){

522 if(!
p
){

525 if(!(*
p
))

527 (*
p
Ë(
LIST_SHARED_TRAFFIC
 *Ë
	`mÆloc
(
SHARED_TRAFFIC_STEP
);

528 if(!(*
p
))

530 
	`LOG
(
FATAL
Ë<< 
__LINE__
 <<", MALLOCÉº‹ " << 
°d
::
ídl
;

531 
	`exô
(1);

533 
t
 = *
p
;

534 
	`mem£t
(
t
, 0, 
SHARED_TRAFFIC_STEP
);

535 
t
->
tŸÆ
 = 
SHARED_TRAFFIC_STEP
;

537 
t
 = *
p
;

538 
n
 = 
t
->
u£d_d©a
 + (
LIST_SHARED_TRAFFIC
Ë+ 
sz
;

539 if–(
n
+1Ë> 
t
->
tŸÆ
)

541 
up_size
 = 
t
->
tŸÆ
 + 
SHARED_TRAFFIC_STEP
;

542  
up_size
 < (
n
+1))

544 
up_size
 +
SHARED_TRAFFIC_STEP
;

547 (*
p
Ë(
LIST_SHARED_TRAFFIC
 *Ë
	`ªÆloc
–(*p), 
up_size
);

548 if(!(*
p
))

550 
	`LOG
(
FATAL
Ë<< 
__LINE__
 <<", MC2-985 , REALLOCÉº‹ " << 
°d
::
ídl
;

551 
	`exô
(1);

553 
t
 = *
p
;

554 
t
->
tŸÆ
 = 
up_size
;

557 
pd©a
 = 
t
->
d©a
;

558 
	`mem˝y
(
pd©a
 + 
t
->
u£d_d©a
, 
ôem
, 
sz
);

559 
t
->
u£d_d©a
 +
sz
;

562 
	}
}

564 
	$skyœb_èke_åaffic_d©a
(**
d©a
)

566 
n
 = 0;

567 *
p
 = 0;

568 
LIST_SHARED_TRAFFIC
 *
µ
 = 0;

569 
k
 = 0;

570 
sz
 = (
TRAFFIC_STREAM_INFO
);

571 
TRAFFIC_STREAM_INFO
 *
t
 = 0;

574 
i
 = 0;

575 if(!
d©a
)

579 if(!
p£ssi⁄s
)

583 
±hªad_muãx_t
 *
mtx
 = &(
£ssi⁄_mtx
);

584 
	`±hªad_muãx_lock
(
mtx
);

587 
n
 = 
p£ssi⁄s
->
u£d_d©a
;

588 if(!
n
)

592 
k
 = 
n
 / 
sz
;

593 
p
 = (*Ë
	`mÆloc
(
n
 + 1);

594 
	`mem£t
(
p
, 0, 
n
 + 1);

595 
	`mem˝y
(
p
, 
p£ssi⁄s
->
d©a
, 
n
);

597 
t
 = (
TRAFFIC_STREAM_INFO
 *)
p£ssi⁄s
->
d©a
;

598 
i
 = 0; i < 
k
; ++i)

600 if(
t
[
i
].
is_˛o£d
)

604 
t
[
i
].
dñè_u∂ﬂd
 = 0;

605 
t
[
i
].
dñè_dow∆ﬂd
 = 0;

606 
	`add_ôem_åaffic
(&
µ
, (*)(
t
 + 
i
), 
sz
);

608 if(
µ
)

611 
p£ssi⁄s
->
u£d_d©a
 = 
µ
->used_data;

612 
	`mem˝y
(
p£ssi⁄s
->
d©a
, 
µ
->d©a,Öp->
u£d_d©a
);

615 
p£ssi⁄s
->
u£d_d©a
 = 0;

620 
	`±hªad_muãx_u∆ock
(
mtx
);

623 if(
µ
)

625 
	`‰ì
(
µ
);

626 
µ
 = 0;

628 if(
p
) {

629 
high
 = 0;

630 
ii
 = 0;

633 
high
 = (
n
 / (
TRAFFIC_STREAM_INFO
));

634 if(
high
 < 1){

638 
TRAFFIC_STREAM_INFO
 
ôem
;

639 
TRAFFIC_STREAM_INFO
 *
öfo
 = (TRAFFIC_STREAM_INFO *)
p
;

640 
checked
 = 0;

641 
j
 = 0;

642 
k
 = 0;

643 
TRAFFIC_STREAM_INFO
 *
t
 = 0;

644 
ôem
 = 
öfo
[0];

645 
	`add_ôem_åaffic
(&
µ
, (*)&
ôem
, (item));

646 
ii
 = 1; iò< 
high
; ++ii)

648 if(!
µ
)

652 
k
 = 
µ
->
u£d_d©a
/(
TRAFFIC_STREAM_INFO
);

653 
t
 = (
TRAFFIC_STREAM_INFO
 *)
µ
->
d©a
;

654 
checked
 = 0;

655 
j
 = 0; j < 
k
; ++j)

657 if(
	`ªÆ_equÆ
(
öfo
 + 
ii
, 
t
 + 
j
))

659 
t
[
j
].
dñè_u∂ﬂd
 +
öfo
[
ii
].delta_upload;

660 
t
[
j
].
dñè_dow∆ﬂd
 +
öfo
[
ii
].delta_download;

661 
checked
 = 1;

665 if(!
checked
)

667 
	`add_ôem_åaffic
(&
µ
, (*Ë(
öfo
 + 
ii
), (
ôem
));

670 
	`‰ì
(
p
);Ö = 0;

671 
n
 = 
µ
->
u£d_d©a
;

672 
p
 = (*Ë
	`mÆloc
(
n
 + 1);

673 
	`mem£t
(
p
, 0, 
n
 + 1);

674 
	`mem˝y
(
p
, 
µ
->
d©a
, 
n
);

675 *
d©a
 = 
p
;

676 if(
µ
)

678 
	`‰ì
(
µ
);

683  
n
;

684 
	}
}

691 
	$ªÆ_equÆ
(
TRAFFIC_STREAM_INFO
 *
a
, TRAFFIC_STREAM_INFO *
b
){

692  (
	`com∑ª_åaffic_öfo
(
a
, 
b
) == 0);

693 
	}
}

706 
	$com∑ª_åaffic_öfo
(
TRAFFIC_STREAM_INFO
 *
a
, TRAFFIC_STREAM_INFO *
b
)

708 
n
 = 0;

711 if(!
a
Ë{
n
 = 1; ;};

712 if(!
b
Ë{
n
 = -1 ; ;};

713 if(
a
->
p‹t
 < 
b
->p‹tË{
n
 = 1; ;};

714 if(
a
->
p‹t
 > 
b
->p‹tË{
n
 = -1;;};

715 
n
 = 
	`°∫cmp
(
a
->
¥Ÿo
, 
b
->proto, 4);

716 if(
n
) {

717 
n
 = (n > 0) ? 1 : -1;

720 
n
 = 
	`°∫cmp
(
a
->
ù
, 
b
->ip, 24);

721 if(
n
) {

722 
n
 = (n > 0) ? 1 : -1;

725 
n
 = 0;

728  
n
;

729 
	}
}

	@rubbish/skylab_shared_data.h

4 #i‚de‡
__SHARE_TRAFFIC__


5 
	#__SHARE_TRAFFIC__


	)

7 
	~<sys/time.h
>

8 
	~<±hªad.h
>

10 #ifde‡
__˝lu•∂us


15 
tŸÆ
;

16 
u£d_d©a
;

17 
±hªad_muãx_t
 
‰ame_mtx
;

19 
d©a
[0];

21 } 
	tLIST_SHARED_TRAFFIC
;

25 
is_fú°
;

26 
is_˛o£d
;

27 
time•ec
 
°¨t_©
;

28 
time•ec
 
upd©ed_©
;

29 
°ªam_id
;

30 
ù
[32];

31 
¥Ÿo
[7];

32 
p‹t
;

33 
u∂ﬂd
;

34 
dow∆ﬂd
;

35 
pid
;

36 
dñè_u∂ﬂd
;

37 
dñè_dow∆ﬂd
;

39 } 
	tTRAFFIC_STREAM_INFO
;

42 
low_p‹t
;

43 
high_p‹t
;

44 
¥Ÿocﬁ
[7];

45 } 
	tTRAFFIC_ROLE
;

49 *
skyœb_d©a_shm
;

51 
add_ôem_åaffic
(
LIST_SHARED_TRAFFIC
 **
p
, *
ôem
, 
sz
);

52 *
skyœb_›í_shm
();

53 
skyœb_u∆ök_shm
();

54 
skyœb_wrôe_shm
(
LIST_SHARED_TRAFFIC
 *
p
, *
d©a
, 
n
);

55 
skyœb_ªad_shm
(
LIST_SHARED_TRAFFIC
 *
p
, **
d©a
, 
⁄ly_ªad
);

56 
skyœb_öô_w©chög_thªad
();

57 
skyœb_èke_åaffic_d©a
(**
p
);

58 
dump_åaffic_to_°r
(
TRAFFIC_STREAM_INFO
 *
p
, *
mlog
);

60 #ifde‡
__˝lu•∂us


	@server.c

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/sockë.h
>

8 
	~<¨∑/öë.h
>

9 
	~<√töë/ö.h
>

10 
	~<sig«l.h
>

11 
	~<±hªad.h
>

12 
	~<time.h
>

13 
	~"gí_li°.h
"

14 
	~"msg_nŸify.h
"

16 
	#RECV_POST
 
PORT


	)

17 
	#SEND_POST
 (
PORT
 + 1)

	)

18 
	#MAXLINE
 
MAX_MSG


	)

19 
	#USER_SIG
 
SIGALRM


	)

23 
ªg_u£r_sig
();

24 
±hªad_muãx_t
 
	giswaôög_mtx
 = 
PTHREAD_MUTEX_INITIALIZER
;

25 
£t_waôög
(
w
);

26 
gë_waôög
(*
ªt
);

28 
	gg_waôög
 = 1;

29 
	gg_ru¬ow
 = 0;

31 
	$£t_waôög
(
w
) {

32 
îr
 = 0;

33 
rc
 = 0;

35 
rc
 = 
	`±hªad_muãx_lock
(&
iswaôög_mtx
);

36 if(
rc
) {

38 
îr
 = 
rc
;

41 
g_waôög
 = 
w
 ? 1 : 0;

43 
rc
 = 
	`±hªad_muãx_u∆ock
(&
iswaôög_mtx
);

44 if(
rc
) {

46 
îr
 = 
rc
;

48  
îr
;

49 
	}
}

51 
	$gë_waôög
(*
ªt
) {

52 
îr
 = 0;

53 
rc
 = 0;

55 
rc
 = 
	`±hªad_muãx_lock
(&
iswaôög_mtx
);

56 if(
rc
) {

58 
îr
 = 
rc
;

62 if(!
ªt
) {

64 
îr
 = 1;

65 *
ªt
 = 
g_waôög
;

67 *
ªt
 = 
g_waôög
;

70 
rc
 = 
	`±hªad_muãx_u∆ock
(&
iswaôög_mtx
);

71 if(
rc
) {

73 
îr
 = 
rc
;

75  
îr
;

76 
	}
}

79 
	#COUNT_EXIT_READ
 1

	)

80 
±hªad_t
 
	gªad_thªadid
 = 0;

81 
pid_t
 
	gmaö_pid
 = 0;

82 
	gis_°›_£rvî
 = 0;

83 
±hªad_t
 
£ndög_thªad
(*
¨g
);

84 *
£ndög_routöe_thªad
(*
¨g
);

86 
GEN_LIST
 *
	ggí_li°
 = 0;

88 
	$h™dÀr
(
signo
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

90 if(
maö_pid
 !
öfo
->
si_pid
) {

91 
	`±hªad_kûl
(
ªad_thªadid
, 
USER_SIG
);

93 if(
	`±hªad_£lf
(Ë=
ªad_thªadid
) {

94 
g_ru¬ow
 = 1;

97 
	`LOG
(
LOG_INFO
, "£ndögÖid--------------: %Œu\n", ()
öfo
->
si_pid
);

98 
	}
}

108 *
	$£ndög_routöe_thªad
(*
¨g
)

110 
buf„r
[
MAX_MSG
+1];

111 
bufout
[
MAX_MSG
+1];

112 *
p
 = 0;

113 
sockaddr_ö
 
£rvaddr
, 
˛üddr
;

114 
sockfd
 = 0;

115 
n
, 
îr
;

116 
vÆ
 = 1;

117 
c
 = 0;

118 
time•ec
 
t0
;

119 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
t0
);

121 i‡–(
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
 | 
SOCK_NONBLOCK
, 0)) < 0 ) {

123 
	`≥º‹
("socket creation failed");

124 
	`exô
(
EXIT_FAILURE
);

126 
	`£tsock›t
(
sockfd
, 
IPPROTO_IP
, 
IP_MTU_DISCOVER
, &
vÆ
, (val));

127 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

128 
	`mem£t
(&
˛üddr
, 0, (cliaddr));

131 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

132 
£rvaddr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

133 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
SEND_POST
);

135 
⁄
 = 1;

136 
îr
 = 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄
, ());

137 if(
îr
) {

138 
	`≥º‹
("setsockopt");

139 
	`exô
(1);

142 i‡–
	`böd
(
sockfd
, (c⁄° 
sockaddr
 *)&
£rvaddr
, (servaddr)) < 0 )

144 
	`≥º‹
("bind failed");

145 
	`exô
(
EXIT_FAILURE
);

151 
Àn
 = 0;

153 
MSG_COMMON
 *
msg
 = 0;

154 
	`mem£t
(&
˛üddr
, 0, (cliaddr));

155 
	`mem£t
(
buf„r
, 0, (buffer));

156 
Àn
 = (
˛üddr
);

157 
	`mem£t
(
buf„r
, 0, (buffer));

158 
n
 = 
	`ªcv‰om
(
sockfd
, (*)
buf„r
, 
MAX_MSG
,

159 
MSG_DONTWAIT
, ( 
sockaddr
 *Ë&
˛üddr
, &
Àn
);

161 if(
n
 < 1)

163 if(!
g_ru¬ow
) {

164 
	`u¶ìp
(1000 * 1000);

167 
g_ru¬ow
++;

168 
g_ru¬ow
 %= 3;

171 if(
n
 < (
MSG_COMMON
)) {

174 
p
 = 
buf„r
;

175 if(
buf„r
[
n
-1] =
ENCRYPT_SRV_PUB
) {

176 
Àn
 = 0;

177 
uch¨
 *
out
 = 0;

178 
RSA
 *
¥v
 = 
	`gë_§v_¥v
();

179 if(!
¥v
) {

180 
	`LOG
(
LOG_ERR
, "cannot get serverÖrivate key.");

183 
	`rß_dec
(
¥v
, 
buf„r
, &
out
, 
n
 - 1, &
Àn
);

184 if(
out
) {

185 
n
 = 
Àn
;

186 
	`mem£t
(
buf„r
, 0, (buffer));

187 
	`mem˝y
(
buf„r
, 
out
, 
Àn
);

188 
	`MY_FREE
(
out
);

189 
msg
 = (
MSG_COMMON
*Ë
buf„r
;

191 } if(
buf„r
[
n
-1] =
ENCRYPT_AES
) {

193 
îr
 = 
	`msg_´s_dec
(
buf„r
, 
bufout
, 
´s_key
, 
´s_iv
, 
n
, &n, 
MAX_MSG
 + 1);

194 if(
îr
) {

195 
n
 = 0;

198 
p
 = 
bufout
;

200 
msg
 = (
MSG_COMMON
*Ë
p
;

202 if(
msg
->
ty≥
 =
MSG_TRA
) {

203 
d⁄e
 = 
	`hl_åack_msg
((
MSG_TRACKING
 *)
msg
, 
n
, &
˛üddr
, 0);

204 if(!
d⁄e
) {

205 
	`LOG
(
LOG_ERR
, "HandleÅrackingÉrror.");

209 if(
msg
->
ty≥
 =
MSG_TRA
) {

216 if(
n
 > 0 && 
˛üddr
.
sö_Ámûy
 =
AF_INET
) {

217 
	`DUM_IPV4
(&
˛üddr
);

222 
	`£nd_imd_fwd
(
sockfd
, &
imd_fwd_…
, &
c
, 1);

224 
îr
 = 
	`˛o£
(
sockfd
);

225 if(
îr
)

227 
	`LOG
(
LOG_ERR
, "close socketÉrror.\n");

230 
	}
}

234 
±hªad_t
 
	$£ndög_thªad
(*
¨g
)

236 
±hªad_t
 
±id
 = 0;

237 
rc
 = 0;

239 
rc
 = 
	`±hªad_¸óã
(&
±id
, 0, 
£ndög_routöe_thªad
, 
¨g
);

240 if(!
rc
) {

241 
ªad_thªadid
 = 
±id
;

243  
rc
 ? 0 : 
±id
;

244 
	}
}

246 
	$£rvî
() {

248 
	}
}

250 
	$maö
(
¨gc
, *
¨gv
[]) {

251 
sockfd
;

252 
buf„r
[
MAX_MSG
 + 1];

253 
bufout
[
MAX_MSG
 + 1];

254 *
pglobÆ
 = 0;

255 
sockaddr_ö
 
£rvaddr
, 
˛üddr
;

256 
vÆ
 = 1;

257 
cou¡
 = 0;

258 
Àn
, 
n
, 
îr
;

260 
	`£éogmask
 (
	`LOG_UPTO
 (
LOG_INFO
));

261 
	`›ílog
 ("z£rvî_nŸify", 
LOG_CONS
 | 
LOG_PID
 | 
LOG_NDELAY
, 
LOG_LOCAL1
);

263 
maö_pid
 = 
	`gëpid
();

265 
	`ªg_u£r_sig
();

267 
cou¡
 = 
	`lﬂd_ªg_li°
();

268 
	`Ârötf
(
°dout
, "cou¡: %d\n", 
cou¡
);

270 
	`£ndög_thªad
(0);

273 i‡–(
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0 ) {

274 
	`≥º‹
("socket creation failed");

275 
	`exô
(
EXIT_FAILURE
);

278 
	`£tsock›t
(
sockfd
, 
IPPROTO_IP
, 
IP_MTU_DISCOVER
, &
vÆ
, (val));

280 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

281 
	`mem£t
(&
˛üddr
, 0, (cliaddr));

284 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

285 
£rvaddr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

286 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
RECV_POST
);

288 
⁄
 = 1;

289 
îr
 = 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄
, ());

290 if(
îr
) {

291 
	`≥º‹
("setsockopt");

292 
	`exô
(1);

295 i‡–
	`böd
(
sockfd
, (c⁄° 
sockaddr
 *)&
£rvaddr
, (servaddr)) < 0 )

297 
	`≥º‹
("bind failed");

298 
	`exô
(
EXIT_FAILURE
);

302 
Àn
 = (
˛üddr
);

303 !
is_°›_£rvî
) {

304 
MSG_COMMON
 *
msg
 = 0;

305 
uch¨
 
íc
 = 0;

307 
	`mem£t
(
buf„r
, 0, (buffer));

308 
n
 = 
	`ªcv‰om
(
sockfd
, (*)
buf„r
, 
MAX_MSG
 + 1,

309 
MSG_DONTWAIT
, ( 
sockaddr
 *Ë&
˛üddr
, &
Àn
);

311 if(
n
 < 1) {

313 
	`u¶ìp
(100 * 1000);

316 if–
n
 < (
MSG_COMMON
)) {

320 
pglobÆ
 = 
buf„r
;

321 
íc
 = 
buf„r
[
n
-1];

322 
	`Ârötf
(
°dout
, "+++++++++n: %d, ha†í¸y±: %s\n", 
n
, 
buf„r
[n-1] ? "YES" : "NO");

323 if(
íc
 =
ENCRYPT_SRV_PUB
) {

324 
Àn
 = 0;

325 
uch¨
 *
out
 = 0;

326 
RSA
 *
¥v
 = 
	`gë_§v_¥v
();

327 if(!
¥v
) {

328 
	`LOG
(
LOG_ERR
, "S1 cannot get serverÖrivate key.");

331 
	`rß_dec
(
¥v
, 
buf„r
, &
out
, 
n
 - 1, &
Àn
);

332 
	`Ârötf
(
°dout
, "S1 LET u£ RSA dec,ÑßÖriv©e------: %p.\n", 
¥v
);

333 if(
out
) {

334 
n
 = 
Àn
;

335 
	`mem£t
(
buf„r
, 0, (buffer));

336 
	`Ârötf
(
°dout
, "Àn: %d\n", 
Àn
);

337 
	`mem˝y
(
buf„r
, 
out
, 
Àn
);

338 
	`MY_FREE
(
out
);

339 
msg
 = (
MSG_COMMON
*Ë
buf„r
;

340 
	`Ârötf
(
°dout
, "S1 devid: %s\n", 
msg
->
dev_id
);

342 } if(
íc
 =
ENCRYPT_AES
) {

343 
îr
 = 
	`msg_´s_dec
(
buf„r
, 
bufout
,

344 
´s_key
, 
´s_iv
, 
n
, &n, 
MAX_MSG
 + 1);

345 if(
îr
) {

346 
n
 = 0;

349 
pglobÆ
 = 
bufout
;

351 
msg
 = (
MSG_COMMON
*Ë
pglobÆ
;

352 
	`DUM_MSG
(
msg
);

353 if(
msg
->
i‰ouã
 =
G_NTF_CLI
 || msg->i‰ouã =
G_CLI_NTF
 ||

354 
msg
->
i‰ouã
 =
F_NTF_CLI
 || msg->i‰ouã =
F_CLI_NTF
) {

355 if(
msg
->
ty≥
 =
MSG_NTF
) {

356 
îr
 = 0;

359 
MSG_NOTIFY
 *
p
 = (MSG_NOTIFY *Ë
msg
;

363 
	`add_to_imd_fwd
–
p
, &
imd_fwd_…
, 
n
);

364 
îr
 = 
	`±hªad_kûl
–
ªad_thªadid
, 
USER_SIG
);

365 if(
îr
) {

366 
	`LOG
(
LOG_ERR
, "signalingÉrror.");

370 } if(
msg
->
i‰ouã
 =
G_CLI_SRV
) {

371 
îr
 = 0;

374 
MSG_NOTIFY
 *
p
 = (MSG_NOTIFY *Ë
msg
;

375 
p
->
com
.
i‰ouã
 = 
F_SRV_CLI
;

377 
	`uöt16_2_¨r
–
msg
->
Àn
, 
AES_BYTES
 + 
AES_IV_BYTES
, 2);

379 
	`mem˝y
(
pglobÆ
 + 
n
, 
´s_key
, 
AES_BYTES
);

380 
	`mem˝y
(
pglobÆ
 + 
n
 + 
AES_BYTES
, 
´s_iv
, 
AES_IV_BYTES
);

381 
n
 +
AES_BYTES
 + 
AES_IV_BYTES
;

382 
	`Ârötf
(
°dout
, "ADDDÅÿli° FW______: %s,Ç: %d\n", 
msg
->
dev_id
, 
n
);

383 
	`add_to_imd_fwd
–
p
, &
imd_fwd_…
, 
n
);

384 
îr
 = 
	`±hªad_kûl
–
ªad_thªadid
, 
USER_SIG
);

385 if(
îr
) {

386 
	`LOG
(
LOG_ERR
, "signalingÉrror.");

388 } if(
msg
->
i‰ouã
 =
G_NTF_SRV
) {

389 
îr
 = 0;

392 
MSG_NOTIFY
 *
p
 = (MSG_NOTIFY *Ë
msg
;

393 
p
->
com
.
i‰ouã
 = 
F_SRV_NTF
;

395 
	`uöt16_2_¨r
–
msg
->
Àn
, 
AES_BYTES
 + 
AES_IV_BYTES
, 2);

397 
	`mem˝y
(
pglobÆ
 + 
n
, 
´s_key
, 
AES_BYTES
);

398 
	`mem˝y
(
pglobÆ
 + 
n
 + 
AES_BYTES
, 
´s_iv
, 
AES_IV_BYTES
);

399 
n
 +
AES_BYTES
 + 
AES_IV_BYTES
;

400 
	`Ârötf
(
°dout
, "ADDDÅÿli° FW_____ fROM NTFÅÿSRV_: %s,Ç: %d\n", 
msg
->
dev_id
, 
n
);

401 
	`add_to_imd_fwd
–
p
, &
imd_fwd_…
, 
n
);

402 
îr
 = 
	`±hªad_kûl
–
ªad_thªadid
, 
USER_SIG
);

403 if(
îr
) {

404 
	`LOG
(
LOG_ERR
, "signalingÉrror.");

407 if(
n
 > 0 && 
˛üddr
.
sö_Ámûy
 =
AF_INET
) {

408 
	`DUM_IPV4
(&
˛üddr
);

411 
îr
 = 
	`˛o£
(
sockfd
);

412 if(
îr
)

414 
	`LOG
(
LOG_ERR
, "˛o£ fdÉº‹: %d", 
îr
);

416 
	`¶ìp
(1);

417 
	`˛o£log
 ();

419 
	}
}

422 
	$ªg_u£r_sig
() {

423 
siga˘i⁄
 
a˘
 = { 0 };

424 
a˘
.
ß_Êags
 = 
SA_SIGINFO
 | 
SA_ONSTACK
;

425 
a˘
.
ß_siga˘i⁄
 = &
h™dÀr
;

426 i‡(
	`siga˘i⁄
(
USER_SIG
, &
a˘
, 
NULL
) == -1) {

427 
	`≥º‹
("sigaction");

428 
	`exô
(
EXIT_FAILURE
);

430 
	}
}

	@test_msg_notify.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"msg_nŸify.h
"

4 
	$maö
(
¨gc
, *
¨gv
[])

8 
i
 = 0;

9 
uöt64_t
 
a
 = 0x112233446677;

10 
uöt32_t
 
c
 = 0x55889900;

11 
uöt32_t
 
e
 = 0x1789;

12 
uöt64_t
 
b
 = 0;

13 
uöt32_t
 
d
 = 0;

14 
uöt32_t
 
f
 = 0;

15 
¨r
[8];

17 
	`uöt64_2_¨r
(
¨r
, 
a
, 8);

18 
	`Ârötf
(
°dout
, "\narr: \n");

19 
i
 = 0; i < 8; ++i)

21 
j
 = 0;

22 
j
 = 0; j < 
i
; ++j)

24 
	`Ârötf
(
°dout
, "\t");

26 
	`Ârötf
(
°dout
, "%x\n", 
¨r
[
i
] & 0xFF);

28 
	`Ârötf
(
°dout
, "a: %lx\n", 
a
);

31 
	`¨r_2_uöt64
(
¨r
, &
b
, 8);

32 
	`Ârötf
(
°dout
, "b: %lx\n", 
b
);

35 
	`uöt32_2_¨r
(
¨r
, 
c
, 4);

36 
	`Ârötf
(
°dout
, "\narr: \n");

37 
i
 = 0; i < 4; ++i)

39 
j
 = 0;

40 
j
 = 0; j < 
i
; ++j)

42 
	`Ârötf
(
°dout
, "\t");

44 
	`Ârötf
(
°dout
, "%x\n", 
¨r
[
i
] & 0xFF);

46 
	`Ârötf
(
°dout
, "c: %x\n", 
c
);

49 
	`¨r_2_uöt32
(
¨r
, &
d
, 4);

50 
	`Ârötf
(
°dout
, "d: %lx\n", 
d
);

54 
	`uöt16_2_¨r
(
¨r
, 
e
, 4);

55 
	`Ârötf
(
°dout
, "\narr: \n");

56 
i
 = 0; i < 2; ++i)

58 
j
 = 0;

59 
j
 = 0; j < 
i
; ++j)

61 
	`Ârötf
(
°dout
, "\t");

63 
	`Ârötf
(
°dout
, "%x\n", 
¨r
[
i
] & 0xFF);

65 
	`Ârötf
(
°dout
, "e: %x\n", 
e
);

68 
	`¨r_2_uöt32
(
¨r
, &
f
, 4);

69 
	`Ârötf
(
°dout
, "f: %x\n", 
f
);

72 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

148 #ifde‡
__USE_ATFILE


149 
	#AT_FDCWD
 -100

	)

152 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

153 
	#AT_REMOVEDIR
 0x200

	)

155 
	#AT_SYMLINK_FOLLOW
 0x400

	)

156 #ifde‡
__USE_GNU


157 
	#AT_NO_AUTOMOUNT
 0x800

	)

159 
	#AT_EMPTY_PATH
 0x1000

	)

160 
	#AT_STATX_SYNC_TYPE
 0x6000

	)

161 
	#AT_STATX_SYNC_AS_STAT
 0x0000

	)

162 
	#AT_STATX_FORCE_SYNC
 0x2000

	)

163 
	#AT_STATX_DONT_SYNC
 0x4000

	)

165 
	#AT_EACCESS
 0x200

	)

174 #i‚de‡
__USE_FILE_OFFSET64


175 
f˙é
 (
__fd
, 
__cmd
, ...);

177 #ifde‡
__REDIRECT


178 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

180 
	#f˙é
 
f˙é64


	)

183 #ifde‡
__USE_LARGEFILE64


184 
f˙é64
 (
__fd
, 
__cmd
, ...);

194 #i‚de‡
__USE_FILE_OFFSET64


195 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__REDIRECT


198 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

199 
	`__n⁄nuŒ
 ((1));

201 
	#›í
 
›í64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

208 #ifde‡
__USE_ATFILE


218 #i‚de‡
__USE_FILE_OFFSET64


219 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

220 
	`__n⁄nuŒ
 ((2));

222 #ifde‡
__REDIRECT


223 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

224 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

226 
	#›í©
 
›í©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

231 
	`__n⁄nuŒ
 ((2));

240 #i‚de‡
__USE_FILE_OFFSET64


241 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__REDIRECT


244 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

245 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

247 
	#¸ót
 
¸ót64


	)

250 #ifde‡
__USE_LARGEFILE64


251 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

254 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

255 && !
deföed
 
__USE_POSIX
))

264 
	#F_ULOCK
 0

	)

265 
	#F_LOCK
 1

	)

266 
	#F_TLOCK
 2

	)

267 
	#F_TEST
 3

	)

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

275 
	#lockf
 
lockf64


	)

278 #ifde‡
__USE_LARGEFILE64


279 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

283 #ifde‡
__USE_XOPEN2K


286 #i‚de‡
__USE_FILE_OFFSET64


287 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

288 
__advi£
Ë
__THROW
;

290 #ifde‡
__REDIRECT_NTH


291 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

292 
__off64_t
 
__Àn
, 
__advi£
),

293 
posix_Ádvi£64
);

295 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

298 #ifde‡
__USE_LARGEFILE64


299 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

300 
__advi£
Ë
__THROW
;

308 #i‚de‡
__USE_FILE_OFFSET64


309 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

311 #ifde‡
__REDIRECT


312 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

313 
__off64_t
 
__Àn
),

314 
posix_ÁŒoˇã64
);

316 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

319 #ifde‡
__USE_LARGEFILE64


320 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

326 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

327 && 
deföed
 
__va_¨g_∑ck_Àn


328 
	~<bôs/f˙é2.h
>

331 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_ETHERNET
 = 143,

91 
	#IPPROTO_ETHERNET
 
IPPROTO_ETHERNET


	)

92 
	mIPPROTO_RAW
 = 255,

93 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

94 
	mIPPROTO_MPTCP
 = 262,

95 
	#IPPROTO_MPTCP
 
IPPROTO_MPTCP


	)

96 
	mIPPROTO_MAX


102 #i‡!
__USE_KERNEL_IPV6_DEFS


105 
	mIPPROTO_HOPOPTS
 = 0,

106 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

107 
	mIPPROTO_ROUTING
 = 43,

108 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

109 
	mIPPROTO_FRAGMENT
 = 44,

110 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

111 
	mIPPROTO_ICMPV6
 = 58,

112 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

113 
	mIPPROTO_NONE
 = 59,

114 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

115 
	mIPPROTO_DSTOPTS
 = 60,

116 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

117 
	mIPPROTO_MH
 = 135

118 
	#IPPROTO_MH
 
IPPROTO_MH


	)

123 
uöt16_t
 
	tö_p‹t_t
;

128 
	mIPPORT_ECHO
 = 7,

129 
	mIPPORT_DISCARD
 = 9,

130 
	mIPPORT_SYSTAT
 = 11,

131 
	mIPPORT_DAYTIME
 = 13,

132 
	mIPPORT_NETSTAT
 = 15,

133 
	mIPPORT_FTP
 = 21,

134 
	mIPPORT_TELNET
 = 23,

135 
	mIPPORT_SMTP
 = 25,

136 
	mIPPORT_TIMESERVER
 = 37,

137 
	mIPPORT_NAMESERVER
 = 42,

138 
	mIPPORT_WHOIS
 = 43,

139 
	mIPPORT_MTP
 = 57,

141 
	mIPPORT_TFTP
 = 69,

142 
	mIPPORT_RJE
 = 77,

143 
	mIPPORT_FINGER
 = 79,

144 
	mIPPORT_TTYLINK
 = 87,

145 
	mIPPORT_SUPDUP
 = 95,

148 
	mIPPORT_EXECSERVER
 = 512,

149 
	mIPPORT_LOGINSERVER
 = 513,

150 
	mIPPORT_CMDSERVER
 = 514,

151 
	mIPPORT_EFSSERVER
 = 520,

154 
	mIPPORT_BIFFUDP
 = 512,

155 
	mIPPORT_WHOSERVER
 = 513,

156 
	mIPPORT_ROUTESERVER
 = 520,

159 
	mIPPORT_RESERVED
 = 1024,

162 
	mIPPORT_USERRESERVED
 = 5000

170 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

171 
	#IN_CLASSA_NET
 0xff000000

	)

172 
	#IN_CLASSA_NSHIFT
 24

	)

173 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

174 
	#IN_CLASSA_MAX
 128

	)

176 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

177 
	#IN_CLASSB_NET
 0xffff0000

	)

178 
	#IN_CLASSB_NSHIFT
 16

	)

179 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

180 
	#IN_CLASSB_MAX
 65536

	)

182 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

183 
	#IN_CLASSC_NET
 0xffffff00

	)

184 
	#IN_CLASSC_NSHIFT
 8

	)

185 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

187 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

188 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

190 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

191 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

194 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

196 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

198 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

201 
	#IN_LOOPBACKNET
 127

	)

203 #i‚de‡
INADDR_LOOPBACK


204 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

208 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

209 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

210 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

211 
	#INADDR_ALLSNOOPERS_GROUP
 ((
ö_addr_t
Ë0xe000006aË

	)

212 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

214 #i‡!
__USE_KERNEL_IPV6_DEFS


216 
	sö6_addr


220 
uöt8_t
 
	m__u6_addr8
[16];

221 
uöt16_t
 
	m__u6_addr16
[8];

222 
uöt32_t
 
	m__u6_addr32
[4];

223 } 
	m__ö6_u
;

224 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

225 #ifde‡
__USE_MISC


226 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

227 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

232 c⁄° 
ö6_addr
 
ö6addr_™y
;

233 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

234 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

235 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

237 
	#INET_ADDRSTRLEN
 16

	)

238 
	#INET6_ADDRSTRLEN
 46

	)

242 
	ssockaddr_ö


244 
__SOCKADDR_COMMON
 (
sö_
);

245 
ö_p‹t_t
 
	msö_p‹t
;

246 
ö_addr
 
	msö_addr
;

249 
	msö_zîo
[ (
sockaddr
) -

250 
__SOCKADDR_COMMON_SIZE
 -

251  (
ö_p‹t_t
) -

252  (
ö_addr
)];

255 #i‡!
__USE_KERNEL_IPV6_DEFS


257 
	ssockaddr_ö6


259 
__SOCKADDR_COMMON
 (
sö6_
);

260 
ö_p‹t_t
 
	msö6_p‹t
;

261 
uöt32_t
 
	msö6_Êowöfo
;

262 
ö6_addr
 
	msö6_addr
;

263 
uöt32_t
 
	msö6_sc›e_id
;

267 #ifde‡
__USE_MISC


269 
	sù_mªq


272 
ö_addr
 
	mimr_mu…üddr
;

275 
ö_addr
 
	mimr_öãrÁ˚
;

278 
	sù_mªq_sour˚


281 
ö_addr
 
	mimr_mu…üddr
;

284 
ö_addr
 
	mimr_öãrÁ˚
;

287 
ö_addr
 
	mimr_sour˚addr
;

291 #i‡!
__USE_KERNEL_IPV6_DEFS


293 
	sùv6_mªq


296 
ö6_addr
 
	mùv6mr_mu…üddr
;

299 
	mùv6mr_öãrÁ˚
;

303 #ifde‡
__USE_MISC


305 
	sgroup_ªq


308 
uöt32_t
 
	mgr_öãrÁ˚
;

311 
sockaddr_°‹age
 
	mgr_group
;

314 
	sgroup_sour˚_ªq


317 
uöt32_t
 
	mg§_öãrÁ˚
;

320 
sockaddr_°‹age
 
	mg§_group
;

323 
sockaddr_°‹age
 
	mg§_sour˚
;

328 
	sù_msfûãr


331 
ö_addr
 
	mimsf_mu…üddr
;

334 
ö_addr
 
	mimsf_öãrÁ˚
;

337 
uöt32_t
 
	mimsf_fmode
;

340 
uöt32_t
 
	mimsf_num§c
;

342 
ö_addr
 
	mimsf_¶i°
[1];

345 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

346 -  (
ö_addr
) \

347 + (
num§c
Ë*  (
ö_addr
))

	)

349 
	sgroup_fûãr


352 
uöt32_t
 
	mgf_öãrÁ˚
;

355 
sockaddr_°‹age
 
	mgf_group
;

358 
uöt32_t
 
	mgf_fmode
;

361 
uöt32_t
 
	mgf_num§c
;

363 
sockaddr_°‹age
 
	mgf_¶i°
[1];

366 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

367 -  (
sockaddr_°‹age
) \

368 + ((
num§c
) \

369 *  (
sockaddr_°‹age
)))

	)

379 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

380 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

381 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

383 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

385 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

387 
	~<ídün.h
>

390 
	~<bôs/byãsw≠.h
>

391 
	~<bôs/uöä-idítôy.h
>

393 #ifde‡
__OPTIMIZE__


397 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

405 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


406 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

407 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

409 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

414 #ifde‡
__GNUC__


415 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

416 (
__exãnsi⁄__
 \

417 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

418 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

419 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

420 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

421 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

423 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

424 (
__exãnsi⁄__
 \

425 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

426 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

427 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

428 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

429 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

431 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

432 (
__exãnsi⁄__
 \

433 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

434 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

436 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

437 (
__exãnsi⁄__
 \

438 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

439 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

441 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

442 (
__exãnsi⁄__
 \

443 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

444 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

445 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

446 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

448 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

449 (
__exãnsi⁄__
 \

450 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

451 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

452 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

453 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

454 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

456 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

457 (
__exãnsi⁄__
 \

458 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

459 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

460 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

461 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

462 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

463 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

465 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

471 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

472 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

473 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

474 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

475 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

477 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„800000))

	)

481 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

483 =
	`ht⁄l
 (0x„c00000))

	)

485 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

486 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

490 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

494 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

496 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

497 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

498 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

499 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

500 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

503 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

505 #ifde‡
__USE_MISC


507 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

510 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

511 
__THROW
;

515 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

519 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

523 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

527 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

531 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

532 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

533 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

536 #ifde‡
__USE_GNU


537 
cmsghdr
;

539 #i‡!
__USE_KERNEL_IPV6_DEFS


541 
	sö6_pktöfo


543 
ö6_addr
 
ùi6_addr
;

544 
ùi6_ifödex
;

548 
	sù6_mtuöfo


550 
sockaddr_ö6
 
ù6m_addr
;

551 
uöt32_t
 
ù6m_mtu
;

556 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

557 
__THROW
 
__©åibuã_dïªˇãd__
;

558 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

559 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

560 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

561 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

562 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

563 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

564 
__mu…x
, 
__∂usy
)

565 
__THROW
 
__©åibuã_dïªˇãd__
;

566 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

567 
uöt8_t
 **
__çåp
)

568 
__THROW
 
__©åibuã_dïªˇãd__
;

569 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

570 
uöt8_t
 **
__çåp
, 
__ty≥
)

571 
__THROW
 
__©åibuã_dïªˇãd__
;

575 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

576 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

580 
__THROW
;

581 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

582 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

583 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

584 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

585 **
__d©abuÂ
Ë
__THROW
;

586 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

587 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

588 **
__d©abuÂ
Ë
__THROW
;

589 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

590 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

594 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

595 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

596 
__£gmíts
Ë
__THROW
;

597 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

598 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

599 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

600 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

601 
__THROW
;

607 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

608 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

609 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

610 
__THROW
;

613 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

614 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

615 
uöt32_t
 
__num§c
,

616 c⁄° 
ö_addr
 *
__¶i°
)

617 
__THROW
;

621 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

624 
uöt32_t
 *
__num§c
,

625 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

629 c⁄° 
sockaddr
 *
__group
,

630 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

631 
uöt32_t
 
__num§c
,

632 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

635 
__END_DECLS


	@/usr/include/openssl/aes.h

10 #i‚de‡
HEADER_AES_H


11 
	#HEADER_AES_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 
	~<°ddef.h
>

16 #ifde‡ 
__˝lu•lus


20 
	#AES_ENCRYPT
 1

	)

21 
	#AES_DECRYPT
 0

	)

27 
	#AES_MAXNR
 14

	)

28 
	#AES_BLOCK_SIZE
 16

	)

31 
	s´s_key_°
 {

32 #ifde‡
AES_LONG


33 
rd_key
[4 * (
AES_MAXNR
 + 1)];

35 
rd_key
[4 * (
AES_MAXNR
 + 1)];

37 
rounds
;

39 
´s_key_°
 
	tAES_KEY
;

41 c⁄° *
AES_›ti⁄s
();

43 
AES_£t_í¸y±_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

44 
AES_KEY
 *
key
);

45 
AES_£t_de¸y±_key
(c⁄° *
u£rKey
, c⁄° 
bôs
,

46 
AES_KEY
 *
key
);

48 
AES_í¸y±
(c⁄° *
ö
, *
out
,

49 c⁄° 
AES_KEY
 *
key
);

50 
AES_de¸y±
(c⁄° *
ö
, *
out
,

51 c⁄° 
AES_KEY
 *
key
);

53 
AES_ecb_í¸y±
(c⁄° *
ö
, *
out
,

54 c⁄° 
AES_KEY
 *
key
, c⁄° 
íc
);

55 
AES_cbc_í¸y±
(c⁄° *
ö
, *
out
,

56 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

57 *
ivec
, c⁄° 
íc
);

58 
AES_cfb128_í¸y±
(c⁄° *
ö
, *
out
,

59 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

60 *
ivec
, *
num
, c⁄° 
íc
);

61 
AES_cfb1_í¸y±
(c⁄° *
ö
, *
out
,

62 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

63 *
ivec
, *
num
, c⁄° 
íc
);

64 
AES_cfb8_í¸y±
(c⁄° *
ö
, *
out
,

65 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

66 *
ivec
, *
num
, c⁄° 
íc
);

67 
AES_ofb128_í¸y±
(c⁄° *
ö
, *
out
,

68 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

69 *
ivec
, *
num
);

71 
AES_ige_í¸y±
(c⁄° *
ö
, *
out
,

72 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

73 *
ivec
, c⁄° 
íc
);

75 
AES_bi_ige_í¸y±
(c⁄° *
ö
, *
out
,

76 
size_t
 
Àngth
, c⁄° 
AES_KEY
 *
key
,

77 c⁄° 
AES_KEY
 *
key2
, c⁄° *
ivec
,

78 c⁄° 
íc
);

80 
AES_wøp_key
(
AES_KEY
 *
key
, c⁄° *
iv
,

81 *
out
,

82 c⁄° *
ö
, 
öÀn
);

83 
AES_unwøp_key
(
AES_KEY
 *
key
, c⁄° *
iv
,

84 *
out
,

85 c⁄° *
ö
, 
öÀn
);

88 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conf.h

10 #i‚de‡ 
HEADER_CONF_H


11 
	#HEADER_CONF_H


	)

13 
	~<›ís¶/bio.h
>

14 
	~<›ís¶/lhash.h
>

15 
	~<›ís¶/ß„°ack.h
>

16 
	~<›ís¶/e_os2.h
>

17 
	~<›ís¶/os¶_typ.h
>

18 
	~<›ís¶/c⁄„º.h
>

20 #ifde‡ 
__˝lu•lus


25 *
£˘i⁄
;

26 *
«me
;

27 *
vÆue
;

28 } 
	tCONF_VALUE
;

30 
DEFINE_STACK_OF
(
CONF_VALUE
)

31 
DEFINE_LHASH_OF
(
CONF_VALUE
);

33 
c⁄f_°
;

34 
c⁄f_mëhod_°
;

35 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

37 
	sc⁄f_mëhod_°
 {

38 c⁄° *
«me
;

39 
CONF
 *(*
¸óã
Ë(
CONF_METHOD
 *
mëh
);

40 (*
öô
Ë(
CONF
 *
c⁄f
);

41 (*
de°roy
Ë(
CONF
 *
c⁄f
);

42 (*
de°roy_d©a
Ë(
CONF
 *
c⁄f
);

43 (*
lﬂd_bio
Ë(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

44 (*
dump
Ë(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

45 (*
is_numbî
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

46 (*
to_öt
Ë(c⁄° 
CONF
 *
c⁄f
, 
c
);

47 (*
lﬂd
Ë(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

52 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

53 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

55 
DEFINE_STACK_OF
(
CONF_MODULE
)

56 
DEFINE_STACK_OF
(
CONF_IMODULE
)

59 
	tc⁄f_öô_func
 (
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

60 
	tc⁄f_föish_func
 (
	tCONF_IMODULE
 *
	tmd
);

62 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

63 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

64 
	#CONF_MFLAGS_SILENT
 0x4

	)

65 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

66 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

67 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

69 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

70 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
, 
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

71 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
, c⁄° *
fûe
,

72 *
ñöe
);

73 #i‚de‡
OPENSSL_NO_STDIO


74 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

75 *
ñöe
);

77 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,

78 *
ñöe
);

79 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

80 c⁄° *
£˘i⁄
);

81 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

82 c⁄° *
«me
);

83 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, c⁄° *
group
,

84 c⁄° *
«me
);

85 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

86 #i‚de‡
OPENSSL_NO_STDIO


87 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

89 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

91 
DEPRECATEDIN_1_1_0
(
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
))

93 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

94 
	#OPENSSL_no_c⁄fig
() \

95 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_NO_LOAD_CONFIG
, 
NULL
)

	)

103 
	sc⁄f_°
 {

104 
CONF_METHOD
 *
mëh
;

105 *
mëh_d©a
;

106 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

109 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

110 
CONF_METHOD
 *
NCONF_deÁu…
();

111 
CONF_METHOD
 *
NCONF_WIN32
();

112 
NCONF_‰ì
(
CONF
 *
c⁄f
);

113 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

115 
NCONF_lﬂd
(
CONF
 *
c⁄f
, c⁄° *
fûe
, *
ñöe
);

116 #i‚de‡
OPENSSL_NO_STDIO


117 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
, *
ñöe
);

119 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

120 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,

121 c⁄° *
£˘i⁄
);

122 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
);

123 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
, c⁄° *
group
, c⁄° *
«me
,

124 *
ªsu…
);

125 #i‚de‡
OPENSSL_NO_STDIO


126 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

128 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

130 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

134 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

135 
Êags
);

136 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

137 
Êags
);

138 
CONF_moduÀs_u∆ﬂd
(
Æl
);

139 
CONF_moduÀs_föish
();

140 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

141 
	#CONF_moduÀs_‰ì
(Ë0Ë

	)

143 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

144 
c⁄f_föish_func
 *
ffunc
);

146 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

147 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

148 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

149 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

150 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

151 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

152 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

153 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

154 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

156 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

158 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

159 (*
li°_cb
Ë(c⁄° *
ñem
, 
Àn
, *
u§
),

160 *
¨g
);

162 
OPENSSL_lﬂd_buûtö_moduÀs
();

165 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

10 #i‚de‡
HEADER_ERR_H


11 
	#HEADER_ERR_H


	)

13 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

17 
	~<°dlib.h
>

20 
	~<›ís¶/os¶_typ.h
>

21 
	~<›ís¶/bio.h
>

22 
	~<›ís¶/lhash.h
>

24 #ifde‡ 
__˝lu•lus


28 #i‚de‡
OPENSSL_NO_ERR


29 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

31 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

34 
	~<î∫o.h
>

36 
	#ERR_TXT_MALLOCED
 0x01

	)

37 
	#ERR_TXT_STRING
 0x02

	)

39 
	#ERR_FLAG_MARK
 0x01

	)

40 
	#ERR_FLAG_CLEAR
 0x02

	)

42 
	#ERR_NUM_ERRORS
 16

	)

43 
	sîr_°©e_°
 {

44 
îr_Êags
[
ERR_NUM_ERRORS
];

45 
îr_buf„r
[
ERR_NUM_ERRORS
];

46 *
îr_d©a
[
ERR_NUM_ERRORS
];

47 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

48 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

49 
îr_löe
[
ERR_NUM_ERRORS
];

50 
t›
, 
bŸtom
;

51 } 
	tERR_STATE
;

54 
	#ERR_LIB_NONE
 1

	)

55 
	#ERR_LIB_SYS
 2

	)

56 
	#ERR_LIB_BN
 3

	)

57 
	#ERR_LIB_RSA
 4

	)

58 
	#ERR_LIB_DH
 5

	)

59 
	#ERR_LIB_EVP
 6

	)

60 
	#ERR_LIB_BUF
 7

	)

61 
	#ERR_LIB_OBJ
 8

	)

62 
	#ERR_LIB_PEM
 9

	)

63 
	#ERR_LIB_DSA
 10

	)

64 
	#ERR_LIB_X509
 11

	)

66 
	#ERR_LIB_ASN1
 13

	)

67 
	#ERR_LIB_CONF
 14

	)

68 
	#ERR_LIB_CRYPTO
 15

	)

69 
	#ERR_LIB_EC
 16

	)

70 
	#ERR_LIB_SSL
 20

	)

76 
	#ERR_LIB_BIO
 32

	)

77 
	#ERR_LIB_PKCS7
 33

	)

78 
	#ERR_LIB_X509V3
 34

	)

79 
	#ERR_LIB_PKCS12
 35

	)

80 
	#ERR_LIB_RAND
 36

	)

81 
	#ERR_LIB_DSO
 37

	)

82 
	#ERR_LIB_ENGINE
 38

	)

83 
	#ERR_LIB_OCSP
 39

	)

84 
	#ERR_LIB_UI
 40

	)

85 
	#ERR_LIB_COMP
 41

	)

86 
	#ERR_LIB_ECDSA
 42

	)

87 
	#ERR_LIB_ECDH
 43

	)

88 
	#ERR_LIB_OSSL_STORE
 44

	)

89 
	#ERR_LIB_FIPS
 45

	)

90 
	#ERR_LIB_CMS
 46

	)

91 
	#ERR_LIB_TS
 47

	)

92 
	#ERR_LIB_HMAC
 48

	)

94 
	#ERR_LIB_CT
 50

	)

95 
	#ERR_LIB_ASYNC
 51

	)

96 
	#ERR_LIB_KDF
 52

	)

97 
	#ERR_LIB_SM2
 53

	)

99 
	#ERR_LIB_USER
 128

	)

101 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

102 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

103 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

104 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

105 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

106 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

107 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

108 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

109 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

110 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

111 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

112 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

113 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

114 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

115 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

116 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

117 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

118 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

119 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

120 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

121 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

122 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

123 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

124 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

125 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

126 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

127 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

128 
	#OSSL_STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OSSL_STORE
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

129 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

130 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

131 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

132 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

133 
	#CTîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CT
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

134 
	#ASYNCîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASYNC
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

135 
	#KDFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_KDF
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

136 
	#SM2îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SM2
,(f),‘),
OPENSSL_FILE
,
OPENSSL_LINE
)

	)

138 
	#ERR_PACK
(
l
,
f
,
r
) ( \

139 ((()(
l
) & 0x0FF) << 24L) | \

140 ((()(
f
) & 0xFFF) << 12L) | \

141 ((()(
r
Ë& 0xFFFËË)

	)

142 
	#ERR_GET_LIB
(
l
Ë()((÷Ë>> 24LË& 0x0FFL)

	)

143 
	#ERR_GET_FUNC
(
l
Ë()((÷Ë>> 12LË& 0xFFFL)

	)

144 
	#ERR_GET_REASON
(
l
Ë()–÷Ë& 0xFFFL)

	)

145 
	#ERR_FATAL_ERROR
(
l
Ë()–÷Ë& 
ERR_R_FATAL
)

	)

148 
	#SYS_F_FOPEN
 1

	)

149 
	#SYS_F_CONNECT
 2

	)

150 
	#SYS_F_GETSERVBYNAME
 3

	)

151 
	#SYS_F_SOCKET
 4

	)

152 
	#SYS_F_IOCTLSOCKET
 5

	)

153 
	#SYS_F_BIND
 6

	)

154 
	#SYS_F_LISTEN
 7

	)

155 
	#SYS_F_ACCEPT
 8

	)

156 
	#SYS_F_WSASTARTUP
 9

	)

157 
	#SYS_F_OPENDIR
 10

	)

158 
	#SYS_F_FREAD
 11

	)

159 
	#SYS_F_GETADDRINFO
 12

	)

160 
	#SYS_F_GETNAMEINFO
 13

	)

161 
	#SYS_F_SETSOCKOPT
 14

	)

162 
	#SYS_F_GETSOCKOPT
 15

	)

163 
	#SYS_F_GETSOCKNAME
 16

	)

164 
	#SYS_F_GETHOSTBYNAME
 17

	)

165 
	#SYS_F_FFLUSH
 18

	)

166 
	#SYS_F_OPEN
 19

	)

167 
	#SYS_F_CLOSE
 20

	)

168 
	#SYS_F_IOCTL
 21

	)

169 
	#SYS_F_STAT
 22

	)

170 
	#SYS_F_FCNTL
 23

	)

171 
	#SYS_F_FSTAT
 24

	)

174 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

175 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

176 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

177 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

178 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

179 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

180 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

181 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

182 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

183 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

184 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

185 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

186 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

187 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

188 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

189 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

190 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

191 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

192 
	#ERR_R_OSSL_STORE_LIB
 
ERR_LIB_OSSL_STORE


	)

194 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

195 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

198 
	#ERR_R_FATAL
 64

	)

199 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

200 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

201 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

202 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

203 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

204 
	#ERR_R_INIT_FAIL
 (6|
ERR_R_FATAL
)

	)

205 
	#ERR_R_PASSED_INVALID_ARGUMENT
 (7)

	)

206 
	#ERR_R_OPERATION_FAIL
 (8|
ERR_R_FATAL
)

	)

213 
	sERR_°rög_d©a_°
 {

214 
îr‹
;

215 c⁄° *
°rög
;

216 } 
	tERR_STRING_DATA
;

218 
DEFINE_LHASH_OF
(
ERR_STRING_DATA
);

220 
ERR_put_îr‹
(
lib
, 
func
, 
ªas⁄
, c⁄° *
fûe
, 
löe
);

221 
ERR_£t_îr‹_d©a
(*
d©a
, 
Êags
);

223 
ERR_gë_îr‹
();

224 
ERR_gë_îr‹_löe
(c⁄° **
fûe
, *
löe
);

225 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

226 c⁄° **
d©a
, *
Êags
);

227 
ERR_≥ek_îr‹
();

228 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
, *
löe
);

229 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

230 c⁄° **
d©a
, *
Êags
);

231 
ERR_≥ek_œ°_îr‹
();

232 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
, *
löe
);

233 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
, *
löe
,

234 c⁄° **
d©a
, *
Êags
);

235 
ERR_˛ór_îr‹
();

236 *
ERR_îr‹_°rög
(
e
, *
buf
);

237 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

238 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

239 c⁄° *
ERR_func_îr‹_°rög
(
e
);

240 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

241 
ERR_¥öt_îr‹s_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

242 *
u
);

243 #i‚de‡
OPENSSL_NO_STDIO


244 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

246 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

247 
ERR_add_îr‹_d©a
(
num
, ...);

248 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

249 
ERR_lﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 *
°r
);

250 
ERR_lﬂd_°rögs_c⁄°
(c⁄° 
ERR_STRING_DATA
 *
°r
);

251 
ERR_u∆ﬂd_°rögs
(
lib
, 
ERR_STRING_DATA
 *
°r
);

252 
ERR_lﬂd_ERR_°rögs
();

254 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

255 
	#ERR_lﬂd_¸y±o_°rögs
() \

256 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_LOAD_CRYPTO_STRINGS
, 
NULL
)

	)

257 
	#ERR_‰ì_°rögs
(Ë0Ë

	)

260 
DEPRECATEDIN_1_1_0
(
ERR_ªmove_thªad_°©e
(*))

261 
DEPRECATEDIN_1_0_0
(
ERR_ªmove_°©e
(
pid
))

262 
ERR_STATE
 *
ERR_gë_°©e
();

264 
ERR_gë_√xt_îr‹_libøry
();

266 
ERR_£t_m¨k
();

267 
ERR_p›_to_m¨k
();

268 
ERR_˛ór_œ°_m¨k
();

270 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evp.h

10 #i‚de‡
HEADER_ENVELOPE_H


11 
	#HEADER_ENVELOPE_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

14 
	~<›ís¶/os¶_typ.h
>

15 
	~<›ís¶/symhacks.h
>

16 
	~<›ís¶/bio.h
>

17 
	~<›ís¶/ev≥º.h
>

19 
	#EVP_MAX_MD_SIZE
 64

	)

20 
	#EVP_MAX_KEY_LENGTH
 64

	)

21 
	#EVP_MAX_IV_LENGTH
 16

	)

22 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

24 
	#PKCS5_SALT_LEN
 8

	)

26 
	#PKCS5_DEFAULT_ITER
 2048

	)

28 
	~<›ís¶/obje˘s.h
>

30 
	#EVP_PK_RSA
 0x0001

	)

31 
	#EVP_PK_DSA
 0x0002

	)

32 
	#EVP_PK_DH
 0x0004

	)

33 
	#EVP_PK_EC
 0x0008

	)

34 
	#EVP_PKT_SIGN
 0x0010

	)

35 
	#EVP_PKT_ENC
 0x0020

	)

36 
	#EVP_PKT_EXCH
 0x0040

	)

37 
	#EVP_PKS_RSA
 0x0100

	)

38 
	#EVP_PKS_DSA
 0x0200

	)

39 
	#EVP_PKS_EC
 0x0400

	)

41 
	#EVP_PKEY_NONE
 
NID_undef


	)

42 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

43 
	#EVP_PKEY_RSA2
 
NID_rß


	)

44 
	#EVP_PKEY_RSA_PSS
 
NID_rßsßPss


	)

45 
	#EVP_PKEY_DSA
 
NID_dß


	)

46 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

47 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

48 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

49 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

50 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

51 
	#EVP_PKEY_DHX
 
NID_dhpubli˙umbî


	)

52 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

53 
	#EVP_PKEY_SM2
 
NID_sm2


	)

54 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

55 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

56 
	#EVP_PKEY_SCRYPT
 
NID_id_s¸y±


	)

57 
	#EVP_PKEY_TLS1_PRF
 
NID_és1_¥f


	)

58 
	#EVP_PKEY_HKDF
 
NID_hkdf


	)

59 
	#EVP_PKEY_POLY1305
 
NID_pﬁy1305


	)

60 
	#EVP_PKEY_SIPHASH
 
NID_sùhash


	)

61 
	#EVP_PKEY_X25519
 
NID_X25519


	)

62 
	#EVP_PKEY_ED25519
 
NID_ED25519


	)

63 
	#EVP_PKEY_X448
 
NID_X448


	)

64 
	#EVP_PKEY_ED448
 
NID_ED448


	)

66 #ifde‡ 
__˝lu•lus


70 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

71 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

72 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

73 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

75 #i‚de‡
EVP_MD


76 
EVP_MD
 *
EVP_MD_mëh_√w
(
md_ty≥
, 
pkey_ty≥
);

77 
EVP_MD
 *
EVP_MD_mëh_dup
(c⁄° EVP_MD *
md
);

78 
EVP_MD_mëh_‰ì
(
EVP_MD
 *
md
);

80 
EVP_MD_mëh_£t_öput_blocksize
(
EVP_MD
 *
md
, 
blocksize
);

81 
EVP_MD_mëh_£t_ªsu…_size
(
EVP_MD
 *
md
, 
ªsu…size
);

82 
EVP_MD_mëh_£t_≠p_d©asize
(
EVP_MD
 *
md
, 
d©asize
);

83 
EVP_MD_mëh_£t_Êags
(
EVP_MD
 *
md
, 
Êags
);

84 
EVP_MD_mëh_£t_öô
(
EVP_MD
 *
md
, (*
öô
)(
EVP_MD_CTX
 *
˘x
));

85 
EVP_MD_mëh_£t_upd©e
(
EVP_MD
 *
md
, (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,

86 c⁄° *
d©a
,

87 
size_t
 
cou¡
));

88 
EVP_MD_mëh_£t_föÆ
(
EVP_MD
 *
md
, (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,

89 *
md
));

90 
EVP_MD_mëh_£t_c›y
(
EVP_MD
 *
md
, (*
c›y
)(
EVP_MD_CTX
 *
to
,

91 c⁄° 
EVP_MD_CTX
 *
‰om
));

92 
EVP_MD_mëh_£t_˛ónup
(
EVP_MD
 *
md
, (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
));

93 
EVP_MD_mëh_£t_˘æ
(
EVP_MD
 *
md
, (*
˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
,

94 
p1
, *
p2
));

96 
EVP_MD_mëh_gë_öput_blocksize
(c⁄° 
EVP_MD
 *
md
);

97 
EVP_MD_mëh_gë_ªsu…_size
(c⁄° 
EVP_MD
 *
md
);

98 
EVP_MD_mëh_gë_≠p_d©asize
(c⁄° 
EVP_MD
 *
md
);

99 
EVP_MD_mëh_gë_Êags
(c⁄° 
EVP_MD
 *
md
);

100 (*
EVP_MD_mëh_gë_öô
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

101 (*
EVP_MD_mëh_gë_upd©e
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

102 c⁄° *
d©a
,

103 
size_t
 
cou¡
);

104 (*
EVP_MD_mëh_gë_föÆ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
,

105 *
md
);

106 (*
EVP_MD_mëh_gë_c›y
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
to
,

107 c⁄° 
EVP_MD_CTX
 *
‰om
);

108 (*
EVP_MD_mëh_gë_˛ónup
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
);

109 (*
EVP_MD_mëh_gë_˘æ
(c⁄° 
EVP_MD
 *
md
))(
EVP_MD_CTX
 *
˘x
, 
cmd
,

110 
p1
, *
p2
);

113 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

116 
	#EVP_MD_FLAG_XOF
 0x0002

	)

120 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

124 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

128 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

132 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

135 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

139 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

140 
	#EVP_MD_CTRL_MICALG
 0x2

	)

141 
	#EVP_MD_CTRL_XOF_LEN
 0x3

	)

145 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

151 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

153 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

155 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

162 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

170 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

171 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

172 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

173 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

175 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

182 
	#EVP_MD_CTX_FLAG_FINALISE
 0x0200

	)

185 
EVP_CIPHER
 *
EVP_CIPHER_mëh_√w
(
cùhî_ty≥
, 
block_size
, 
key_Àn
);

186 
EVP_CIPHER
 *
EVP_CIPHER_mëh_dup
(c⁄° EVP_CIPHER *
cùhî
);

187 
EVP_CIPHER_mëh_‰ì
(
EVP_CIPHER
 *
cùhî
);

189 
EVP_CIPHER_mëh_£t_iv_Àngth
(
EVP_CIPHER
 *
cùhî
, 
iv_Àn
);

190 
EVP_CIPHER_mëh_£t_Êags
(
EVP_CIPHER
 *
cùhî
, 
Êags
);

191 
EVP_CIPHER_mëh_£t_im∂_˘x_size
(
EVP_CIPHER
 *
cùhî
, 
˘x_size
);

192 
EVP_CIPHER_mëh_£t_öô
(
EVP_CIPHER
 *
cùhî
,

193 (*
öô
Ë(
EVP_CIPHER_CTX
 *
˘x
,

194 c⁄° *
key
,

195 c⁄° *
iv
,

196 
íc
));

197 
EVP_CIPHER_mëh_£t_do_cùhî
(
EVP_CIPHER
 *
cùhî
,

198 (*
do_cùhî
Ë(
EVP_CIPHER_CTX
 *
˘x
,

199 *
out
,

200 c⁄° *
ö
,

201 
size_t
 
öl
));

202 
EVP_CIPHER_mëh_£t_˛ónup
(
EVP_CIPHER
 *
cùhî
,

203 (*
˛ónup
Ë(
EVP_CIPHER_CTX
 *));

204 
EVP_CIPHER_mëh_£t_£t_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

205 (*
£t_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

206 
ASN1_TYPE
 *));

207 
EVP_CIPHER_mëh_£t_gë_a¢1_∑øms
(
EVP_CIPHER
 *
cùhî
,

208 (*
gë_a¢1_∑ømëîs
Ë(
EVP_CIPHER_CTX
 *,

209 
ASN1_TYPE
 *));

210 
EVP_CIPHER_mëh_£t_˘æ
(
EVP_CIPHER
 *
cùhî
,

211 (*
˘æ
Ë(
EVP_CIPHER_CTX
 *, 
ty≥
,

212 
¨g
, *
±r
));

214 (*
EVP_CIPHER_mëh_gë_öô
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

215 c⁄° *
key
,

216 c⁄° *
iv
,

217 
íc
);

218 (*
EVP_CIPHER_mëh_gë_do_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *
˘x
,

219 *
out
,

220 c⁄° *
ö
,

221 
size_t
 
öl
);

222 (*
EVP_CIPHER_mëh_gë_˛ónup
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *);

223 (*
EVP_CIPHER_mëh_gë_£t_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

224 
ASN1_TYPE
 *);

225 (*
EVP_CIPHER_mëh_gë_gë_a¢1_∑øms
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

226 
ASN1_TYPE
 *);

227 (*
EVP_CIPHER_mëh_gë_˘æ
(c⁄° 
EVP_CIPHER
 *
cùhî
))(
EVP_CIPHER_CTX
 *,

228 
ty≥
, 
¨g
,

229 *
±r
);

235 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

236 
	#EVP_CIPH_ECB_MODE
 0x1

	)

237 
	#EVP_CIPH_CBC_MODE
 0x2

	)

238 
	#EVP_CIPH_CFB_MODE
 0x3

	)

239 
	#EVP_CIPH_OFB_MODE
 0x4

	)

240 
	#EVP_CIPH_CTR_MODE
 0x5

	)

241 
	#EVP_CIPH_GCM_MODE
 0x6

	)

242 
	#EVP_CIPH_CCM_MODE
 0x7

	)

243 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

244 
	#EVP_CIPH_WRAP_MODE
 0x10002

	)

245 
	#EVP_CIPH_OCB_MODE
 0x10003

	)

246 
	#EVP_CIPH_MODE
 0xF0007

	)

248 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

250 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

252 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

254 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

256 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

258 
	#EVP_CIPH_NO_PADDING
 0x100

	)

260 
	#EVP_CIPH_RAND_KEY
 0x200

	)

262 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

264 
	#EVP_CIPH_CUSTOM_IV_LENGTH
 0x800

	)

266 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

268 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

270 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

272 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

276 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

277 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

278 
	#EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK
 0x400000

	)

280 
	#EVP_CIPH_FLAG_PIPELINE
 0X800000

	)

287 
	#EVP_CIPHER_CTX_FLAG_WRAP_ALLOW
 0x1

	)

291 
	#EVP_CTRL_INIT
 0x0

	)

292 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

293 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

294 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

295 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

296 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

297 
	#EVP_CTRL_RAND_KEY
 0x6

	)

298 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

299 
	#EVP_CTRL_COPY
 0x8

	)

300 
	#EVP_CTRL_AEAD_SET_IVLEN
 0x9

	)

301 
	#EVP_CTRL_AEAD_GET_TAG
 0x10

	)

302 
	#EVP_CTRL_AEAD_SET_TAG
 0x11

	)

303 
	#EVP_CTRL_AEAD_SET_IV_FIXED
 0x12

	)

304 
	#EVP_CTRL_GCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

305 
	#EVP_CTRL_GCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

306 
	#EVP_CTRL_GCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

307 
	#EVP_CTRL_GCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

308 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

309 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_AEAD_SET_IVLEN


	)

310 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_AEAD_GET_TAG


	)

311 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_AEAD_SET_TAG


	)

312 
	#EVP_CTRL_CCM_SET_IV_FIXED
 
EVP_CTRL_AEAD_SET_IV_FIXED


	)

313 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

314 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

320 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

322 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

324 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

326 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_AAD
 0x19

	)

327 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT
 0x1a

	)

328 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT
 0x1b

	)

329 
	#EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE
 0x1c

	)

331 
	#EVP_CTRL_SSL3_MASTER_SECRET
 0x1d

	)

334 
	#EVP_CTRL_SET_SBOX
 0x1e

	)

339 
	#EVP_CTRL_SBOX_USED
 0x1f

	)

343 
	#EVP_CTRL_KEY_MESH
 0x20

	)

345 
	#EVP_CTRL_BLOCK_PADDING_MODE
 0x21

	)

348 
	#EVP_CTRL_SET_PIPELINE_OUTPUT_BUFS
 0x22

	)

350 
	#EVP_CTRL_SET_PIPELINE_INPUT_BUFS
 0x23

	)

352 
	#EVP_CTRL_SET_PIPELINE_INPUT_LENS
 0x24

	)

354 
	#EVP_CTRL_GET_IVLEN
 0x25

	)

357 
	#EVP_PADDING_PKCS7
 1

	)

358 
	#EVP_PADDING_ISO7816_4
 2

	)

359 
	#EVP_PADDING_ANSI923
 3

	)

360 
	#EVP_PADDING_ISO10126
 4

	)

361 
	#EVP_PADDING_ZERO
 5

	)

364 
	#EVP_AEAD_TLS1_AAD_LEN
 13

	)

367 *
out
;

368 c⁄° *
öp
;

369 
size_t
 
Àn
;

370 
öãæóve
;

371 } 
	tEVP_CTRL_TLS1_1_MULTIBLOCK_PARAM
;

375 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

377 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

379 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

383 
	#EVP_CCM_TLS_FIXED_IV_LEN
 4

	)

385 
	#EVP_CCM_TLS_EXPLICIT_IV_LEN
 8

	)

387 
	#EVP_CCM_TLS_IV_LEN
 12

	)

389 
	#EVP_CCM_TLS_TAG_LEN
 16

	)

391 
	#EVP_CCM8_TLS_TAG_LEN
 8

	)

394 
	#EVP_CHACHAPOLY_TLS_TAG_LEN
 16

	)

396 
	sevp_cùhî_öfo_°
 {

397 c⁄° 
EVP_CIPHER
 *
cùhî
;

398 
iv
[
EVP_MAX_IV_LENGTH
];

399 } 
	tEVP_CIPHER_INFO
;

403 (
EVP_PBE_KEYGEN
Ë(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
,

404 
	t∑s¶í
, 
	tASN1_TYPE
 *
	t∑øm
,

405 c⁄° 
	tEVP_CIPHER
 *
	tcùhî
, c⁄° 
	tEVP_MD
 *
	tmd
,

406 
	tí_de
);

408 #i‚de‡
OPENSSL_NO_RSA


409 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

410 (*)(
rß
))

	)

413 #i‚de‡
OPENSSL_NO_DSA


414 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

415 (*)(
dß
))

	)

418 #i‚de‡
OPENSSL_NO_DH


419 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

420 (*)(
dh
))

	)

423 #i‚de‡
OPENSSL_NO_EC


424 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

425 (*)(
eckey
))

	)

427 #i‚de‡
OPENSSL_NO_SIPHASH


428 
	#EVP_PKEY_assign_SIPHASH
(
pkey
,
shkey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_SIPHASH
,\

429 (*)(
shkey
))

	)

432 #i‚de‡
OPENSSL_NO_POLY1305


433 
	#EVP_PKEY_assign_POLY1305
(
pkey
,
pﬁykey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_POLY1305
,\

434 (*)(
pﬁykey
))

	)

438 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

439 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

440 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

441 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

443 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

444 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

445 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

446 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

447 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

448 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

449 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

451 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

452 (*
EVP_MD_CTX_upd©e_‚
(
EVP_MD_CTX
 *
˘x
))(EVP_MD_CTX *ctx,

453 c⁄° *
d©a
, 
size_t
 
cou¡
);

454 
EVP_MD_CTX_£t_upd©e_‚
(
EVP_MD_CTX
 *
˘x
,

455 (*
upd©e
Ë(
EVP_MD_CTX
 *
˘x
,

456 c⁄° *
d©a
, 
size_t
 
cou¡
));

457 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

458 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

459 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

460 
EVP_PKEY_CTX
 *
EVP_MD_CTX_pkey_˘x
(c⁄° 
EVP_MD_CTX
 *
˘x
);

461 
EVP_MD_CTX_£t_pkey_˘x
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 *
p˘x
);

462 *
EVP_MD_CTX_md_d©a
(c⁄° 
EVP_MD_CTX
 *
˘x
);

464 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

465 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

466 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

467 
EVP_CIPHER_im∂_˘x_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

468 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

469 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

470 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

471 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

473 c⁄° 
EVP_CIPHER
 *
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

474 
EVP_CIPHER_CTX_í¸y±ög
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

475 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

476 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

477 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

478 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

479 c⁄° *
EVP_CIPHER_CTX_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

480 c⁄° *
EVP_CIPHER_CTX_‹igöÆ_iv
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

481 *
EVP_CIPHER_CTX_iv_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

482 *
EVP_CIPHER_CTX_buf_noc⁄°
(
EVP_CIPHER_CTX
 *
˘x
);

483 
EVP_CIPHER_CTX_num
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

484 
EVP_CIPHER_CTX_£t_num
(
EVP_CIPHER_CTX
 *
˘x
, 
num
);

485 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

486 *
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

487 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

488 *
EVP_CIPHER_CTX_gë_cùhî_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

489 *
EVP_CIPHER_CTX_£t_cùhî_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
cùhî_d©a
);

490 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

491 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

492 
	#EVP_CIPHER_CTX_Êags
(
c
Ë
	`EVP_CIPHER_Êags
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

494 
	#EVP_CIPHER_CTX_mode
(
c
Ë
	`EVP_CIPHER_mode
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

496 
	#EVP_ENCODE_LENGTH
(
l
Ë(((÷)+2)/3*4)+(÷)/48+1)*2+80)

	)

497 
	#EVP_DECODE_LENGTH
(
l
Ë((÷)+3)/4*3+80)

	)

499 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

500 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

501 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

502 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

503 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

504 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

505 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

506 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

507 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

508 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

510 #ifde‡
CONST_STRICT


511 
BIO_£t_md
(
BIO
 *, c⁄° 
EVP_MD
 *
md
);

513 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)(md))

	)

515 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)(mdp))

	)

516 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0, \

517 (*)(
md˝
))

	)

518 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0, \

519 (*)(
md˝
))

	)

520 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

521 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0, \

522 (*)(
c_µ
))

	)

524  
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

525 *
out
,

526 c⁄° *
ö
, 
öl
);

528 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

529 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

530 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

531 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

532 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

533 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

534 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

535 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

537 
EVP_MD_CTX_˘æ
(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

538 
EVP_MD_CTX
 *
EVP_MD_CTX_√w
();

539 
EVP_MD_CTX_ª£t
(
EVP_MD_CTX
 *
˘x
);

540 
EVP_MD_CTX_‰ì
(
EVP_MD_CTX
 *
˘x
);

541 
	#EVP_MD_CTX_¸óã
(Ë
	`EVP_MD_CTX_√w
()

	)

542 
	#EVP_MD_CTX_öô
(
˘x
Ë
	`EVP_MD_CTX_ª£t
((˘x))

	)

543 
	#EVP_MD_CTX_de°roy
(
˘x
Ë
	`EVP_MD_CTX_‰ì
((˘x))

	)

544 
__owur
 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

545 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

546 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

547 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
, 
Êags
);

548 
__owur
 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
,

549 
ENGINE
 *
im∂
);

550 
__owur
 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
, c⁄° *
d
,

551 
size_t
 
˙t
);

552 
__owur
 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
, *
md
,

553 *
s
);

554 
__owur
 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

555 *
md
, *
size
,

556 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

558 
__owur
 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
, c⁄° EVP_MD_CTX *
ö
);

559 
__owur
 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

560 
__owur
 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
,

561 *
s
);

562 
__owur
 
EVP_Dige°FöÆXOF
(
EVP_MD_CTX
 *
˘x
, *
md
,

563 
size_t
 
Àn
);

565 
EVP_ªad_pw_°rög
(*
buf
, 
Àngth
, c⁄° *
¥om±
, 
vîify
);

566 
EVP_ªad_pw_°rög_mö
(*
buf
, 
möÀn
, 
maxÀn
,

567 c⁄° *
¥om±
, 
vîify
);

568 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

569 *
EVP_gë_pw_¥om±
();

571 
__owur
 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
, c⁄° 
EVP_MD
 *
md
,

572 c⁄° *
ß…
,

573 c⁄° *
d©a
, 
d©Æ
, 
cou¡
,

574 *
key
, *
iv
);

576 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

577 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

578 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

580 
__owur
 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

581 c⁄° *
key
, c⁄° *
iv
);

582  
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

583 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

584 c⁄° *
key
,

585 c⁄° *
iv
);

586  
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

587 *
oué
, c⁄° *
ö
, 
öl
);

588  
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

589 *
oué
);

590  
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

591 *
oué
);

593 
__owur
 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

594 c⁄° *
key
, c⁄° *
iv
);

595  
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

596 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

597 c⁄° *
key
,

598 c⁄° *
iv
);

599  
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

600 *
oué
, c⁄° *
ö
, 
öl
);

601 
__owur
 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

602 *
oué
);

603  
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

604 *
oué
);

606 
__owur
 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
cùhî
,

607 c⁄° *
key
, c⁄° *
iv
,

608 
íc
);

609  
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,

610 c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

611 c⁄° *
key
,

612 c⁄° *
iv
, 
íc
);

613 
__owur
 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

614 *
oué
, c⁄° *
ö
, 
öl
);

615 
__owur
 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

616 *
oué
);

617 
__owur
 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
,

618 *
oué
);

620 
__owur
 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
md
, *
s
,

621 
EVP_PKEY
 *
pkey
);

623 
__owur
 
EVP_Dige°Sign
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

624 
size_t
 *
sigÀn
, c⁄° *
tbs
,

625 
size_t
 
tb¶í
);

627 
__owur
 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigbuf
,

628 
sigÀn
, 
EVP_PKEY
 *
pkey
);

630 
__owur
 
EVP_Dige°Vîify
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sigªt
,

631 
size_t
 
sigÀn
, c⁄° *
tbs
,

632 
size_t
 
tb¶í
);

634  
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

635 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

636 
EVP_PKEY
 *
pkey
);

637 
__owur
 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

638 
size_t
 *
sigÀn
);

640 
__owur
 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

641 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
,

642 
EVP_PKEY
 *
pkey
);

643 
__owur
 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
, c⁄° *
sig
,

644 
size_t
 
sigÀn
);

646 #i‚de‡
OPENSSL_NO_RSA


647 
__owur
 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

648 c⁄° *
ek
, 
ekl
,

649 c⁄° *
iv
, 
EVP_PKEY
 *
¥iv
);

650 
__owur
 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

652 
__owur
 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

653 **
ek
, *
ekl
, *
iv
,

654 
EVP_PKEY
 **
pubk
, 
≈ubk
);

655 
__owur
 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

658 
EVP_ENCODE_CTX
 *
EVP_ENCODE_CTX_√w
();

659 
EVP_ENCODE_CTX_‰ì
(
EVP_ENCODE_CTX
 *
˘x
);

660 
EVP_ENCODE_CTX_c›y
(
EVP_ENCODE_CTX
 *
d˘x
, EVP_ENCODE_CTX *
s˘x
);

661 
EVP_ENCODE_CTX_num
(
EVP_ENCODE_CTX
 *
˘x
);

662 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

663 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

664 c⁄° *
ö
, 
öl
);

665 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
);

666 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

668 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

669 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
, *
out
, *
oué
,

670 c⁄° *
ö
, 
öl
);

671 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

672 *
out
, *
oué
);

673 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

675 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

676 
	#EVP_CIPHER_CTX_öô
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

677 
	#EVP_CIPHER_CTX_˛ónup
(
c
Ë
	`EVP_CIPHER_CTX_ª£t
(c)

	)

679 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

680 
EVP_CIPHER_CTX_ª£t
(
EVP_CIPHER_CTX
 *
c
);

681 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
c
);

682 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

683 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

684 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

685 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

687 c⁄° 
BIO_METHOD
 *
BIO_f_md
();

688 c⁄° 
BIO_METHOD
 *
BIO_f_ba£64
();

689 c⁄° 
BIO_METHOD
 *
BIO_f_cùhî
();

690 c⁄° 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

691 
__owur
 
BIO_£t_cùhî
(
BIO
 *
b
, c⁄° 
EVP_CIPHER
 *
c
, c⁄° *
k
,

692 c⁄° *
i
, 
íc
);

694 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

695 #i‚de‡
OPENSSL_NO_MD2


696 c⁄° 
EVP_MD
 *
EVP_md2
();

698 #i‚de‡
OPENSSL_NO_MD4


699 c⁄° 
EVP_MD
 *
EVP_md4
();

701 #i‚de‡
OPENSSL_NO_MD5


702 c⁄° 
EVP_MD
 *
EVP_md5
();

703 c⁄° 
EVP_MD
 *
EVP_md5_sha1
();

705 #i‚de‡
OPENSSL_NO_BLAKE2


706 c⁄° 
EVP_MD
 *
EVP_bœke2b512
();

707 c⁄° 
EVP_MD
 *
EVP_bœke2s256
();

709 c⁄° 
EVP_MD
 *
EVP_sha1
();

710 c⁄° 
EVP_MD
 *
EVP_sha224
();

711 c⁄° 
EVP_MD
 *
EVP_sha256
();

712 c⁄° 
EVP_MD
 *
EVP_sha384
();

713 c⁄° 
EVP_MD
 *
EVP_sha512
();

714 c⁄° 
EVP_MD
 *
EVP_sha512_224
();

715 c⁄° 
EVP_MD
 *
EVP_sha512_256
();

716 c⁄° 
EVP_MD
 *
EVP_sha3_224
();

717 c⁄° 
EVP_MD
 *
EVP_sha3_256
();

718 c⁄° 
EVP_MD
 *
EVP_sha3_384
();

719 c⁄° 
EVP_MD
 *
EVP_sha3_512
();

720 c⁄° 
EVP_MD
 *
EVP_shake128
();

721 c⁄° 
EVP_MD
 *
EVP_shake256
();

722 #i‚de‡
OPENSSL_NO_MDC2


723 c⁄° 
EVP_MD
 *
EVP_mdc2
();

725 #i‚de‡
OPENSSL_NO_RMD160


726 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

728 #i‚de‡
OPENSSL_NO_WHIRLPOOL


729 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

731 #i‚de‡
OPENSSL_NO_SM3


732 c⁄° 
EVP_MD
 *
EVP_sm3
();

734 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

735 #i‚de‡
OPENSSL_NO_DES


736 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

737 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

738 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

739 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

740 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

741 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

742 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

743 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

744 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

745 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

746 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

747 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

748 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

749 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

750 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

751 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

752 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

753 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

754 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

755 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

757 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_wøp
();

765 #i‚de‡
OPENSSL_NO_RC4


766 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

767 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

768 #i‚de‡
OPENSSL_NO_MD5


769 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

772 #i‚de‡
OPENSSL_NO_IDEA


773 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

774 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

775 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

776 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

777 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

779 #i‚de‡
OPENSSL_NO_RC2


780 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

781 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

782 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

783 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

784 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

785 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

786 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

788 #i‚de‡
OPENSSL_NO_BF


789 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

790 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

791 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

792 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

793 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

795 #i‚de‡
OPENSSL_NO_CAST


796 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

797 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

798 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

799 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

800 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

802 #i‚de‡
OPENSSL_NO_RC5


803 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

804 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

805 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

806 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

807 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

810 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

812 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

814 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

815 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

816 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

818 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

819 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

820 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp
();

821 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_wøp_∑d
();

822 #i‚de‡
OPENSSL_NO_OCB


823 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ocb
();

825 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

826 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

827 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

828 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

829 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

830 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

831 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

832 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

833 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

834 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

835 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp
();

836 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_wøp_∑d
();

837 #i‚de‡
OPENSSL_NO_OCB


838 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ocb
();

840 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

841 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

842 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

843 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

844 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

845 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

846 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

847 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

848 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

849 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

850 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

851 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp
();

852 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_wøp_∑d
();

853 #i‚de‡
OPENSSL_NO_OCB


854 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ocb
();

856 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

857 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

858 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha256
();

859 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha256
();

860 #i‚de‡
OPENSSL_NO_ARIA


861 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ecb
();

862 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cbc
();

863 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb1
();

864 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb8
();

865 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_cfb128
();

866 
	#EVP_¨ü_128_cfb
 
EVP_¨ü_128_cfb128


	)

867 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_˘r
();

868 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ofb
();

869 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_gcm
();

870 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_128_ccm
();

871 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ecb
();

872 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cbc
();

873 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb1
();

874 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb8
();

875 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_cfb128
();

876 
	#EVP_¨ü_192_cfb
 
EVP_¨ü_192_cfb128


	)

877 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_˘r
();

878 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ofb
();

879 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_gcm
();

880 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_192_ccm
();

881 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ecb
();

882 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cbc
();

883 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb1
();

884 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb8
();

885 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_cfb128
();

886 
	#EVP_¨ü_256_cfb
 
EVP_¨ü_256_cfb128


	)

887 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_˘r
();

888 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ofb
();

889 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_gcm
();

890 c⁄° 
EVP_CIPHER
 *
EVP_¨ü_256_ccm
();

892 #i‚de‡
OPENSSL_NO_CAMELLIA


893 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

894 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

895 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

896 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

897 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

898 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

899 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

900 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_˘r
();

901 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

902 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

903 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

904 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

905 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

906 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

907 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

908 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_˘r
();

909 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

910 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

911 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

912 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

913 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

914 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

915 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

916 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_˘r
();

918 #i‚de‡
OPENSSL_NO_CHACHA


919 c⁄° 
EVP_CIPHER
 *
EVP_chacha20
();

920 #i‚de‡
OPENSSL_NO_POLY1305


921 c⁄° 
EVP_CIPHER
 *
EVP_chacha20_pﬁy1305
();

925 #i‚de‡
OPENSSL_NO_SEED


926 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

927 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

928 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

929 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

930 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

933 #i‚de‡
OPENSSL_NO_SM4


934 c⁄° 
EVP_CIPHER
 *
EVP_sm4_ecb
();

935 c⁄° 
EVP_CIPHER
 *
EVP_sm4_cbc
();

936 c⁄° 
EVP_CIPHER
 *
EVP_sm4_cfb128
();

937 
	#EVP_sm4_cfb
 
EVP_sm4_cfb128


	)

938 c⁄° 
EVP_CIPHER
 *
EVP_sm4_ofb
();

939 c⁄° 
EVP_CIPHER
 *
EVP_sm4_˘r
();

942 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

943 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
() \

944 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

945 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
 \

946 | 
OPENSSL_INIT_LOAD_CONFIG
, 
NULL
)

	)

947 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
() \

948 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
 \

949 | 
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

951 #ifde‡
OPENSSL_LOAD_CONF


952 
	#O≥nSSL_add_Æl_Æg‹ôhms
(Ë
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

954 
	#O≥nSSL_add_Æl_Æg‹ôhms
(Ë
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

957 
	#O≥nSSL_add_Æl_cùhîs
() \

958 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_CIPHERS
, 
NULL
)

	)

959 
	#O≥nSSL_add_Æl_dige°s
() \

960 
	`OPENSSL_öô_¸y±o
(
OPENSSL_INIT_ADD_ALL_DIGESTS
, 
NULL
)

	)

962 
	#EVP_˛ónup
(Ë0Ë

	)

965 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

966 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

968 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

969 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

971 
EVP_CIPHER_do_Æl
((*
‚
Ë(c⁄° 
EVP_CIPHER
 *
cùh
,

972 c⁄° *
‰om
, c⁄° *
to
, *
x
),

973 *
¨g
);

974 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)

975 (c⁄° 
EVP_CIPHER
 *
cùh
, c⁄° *
‰om
,

976 c⁄° *
to
, *
x
), *
¨g
);

978 
EVP_MD_do_Æl
((*
‚
Ë(c⁄° 
EVP_MD
 *
cùh
,

979 c⁄° *
‰om
, c⁄° *
to
, *
x
),

980 *
¨g
);

981 
EVP_MD_do_Æl_s‹ãd
((*
‚
)

982 (c⁄° 
EVP_MD
 *
cùh
, c⁄° *
‰om
,

983 c⁄° *
to
, *
x
), *
¨g
);

985 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

986 c⁄° *
íc_key
, 
íc_key_Àn
,

987 
EVP_PKEY
 *
¥iv©e_key
);

988 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

989 c⁄° *
key
, 
key_Àn
,

990 
EVP_PKEY
 *
pub_key
);

991 
EVP_PKEY_ty≥
(
ty≥
);

992 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

993 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

994 
EVP_PKEY_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

995 
EVP_PKEY_£curôy_bôs
(c⁄° 
EVP_PKEY
 *
pkey
);

996 
EVP_PKEY_size
(c⁄° 
EVP_PKEY
 *
pkey
);

997 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

998 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

999 
EVP_PKEY_£t_Æüs_ty≥
(
EVP_PKEY
 *
pkey
, 
ty≥
);

1000 #i‚de‡
OPENSSL_NO_ENGINE


1001 
EVP_PKEY_£t1_ígöe
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1002 
ENGINE
 *
EVP_PKEY_gë0_ígöe
(c⁄° 
EVP_PKEY
 *
pkey
);

1004 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
, 
ty≥
, *
key
);

1005 *
EVP_PKEY_gë0
(c⁄° 
EVP_PKEY
 *
pkey
);

1006 c⁄° *
EVP_PKEY_gë0_hmac
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1007 #i‚de‡
OPENSSL_NO_POLY1305


1008 c⁄° *
EVP_PKEY_gë0_pﬁy1305
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1010 #i‚de‡
OPENSSL_NO_SIPHASH


1011 c⁄° *
EVP_PKEY_gë0_sùhash
(c⁄° 
EVP_PKEY
 *
pkey
, 
size_t
 *
Àn
);

1014 #i‚de‡
OPENSSL_NO_RSA


1015 
rß_°
;

1016 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
, 
rß_°
 *
key
);

1017 
rß_°
 *
EVP_PKEY_gë0_RSA
(
EVP_PKEY
 *
pkey
);

1018 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

1020 #i‚de‡
OPENSSL_NO_DSA


1021 
dß_°
;

1022 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
, 
dß_°
 *
key
);

1023 
dß_°
 *
EVP_PKEY_gë0_DSA
(
EVP_PKEY
 *
pkey
);

1024 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

1026 #i‚de‡
OPENSSL_NO_DH


1027 
dh_°
;

1028 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
, 
dh_°
 *
key
);

1029 
dh_°
 *
EVP_PKEY_gë0_DH
(
EVP_PKEY
 *
pkey
);

1030 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

1032 #i‚de‡
OPENSSL_NO_EC


1033 
ec_key_°
;

1034 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
, 
ec_key_°
 *
key
);

1035 
ec_key_°
 *
EVP_PKEY_gë0_EC_KEY
(
EVP_PKEY
 *
pkey
);

1036 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

1039 
EVP_PKEY
 *
EVP_PKEY_√w
();

1040 
EVP_PKEY_up_ªf
(
EVP_PKEY
 *
pkey
);

1041 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

1043 
EVP_PKEY
 *
d2i_PublicKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1044 
Àngth
);

1045 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

1047 
EVP_PKEY
 *
d2i_Priv©eKey
(
ty≥
, EVP_PKEY **
a
, c⁄° **
µ
,

1048 
Àngth
);

1049 
EVP_PKEY
 *
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

1050 
Àngth
);

1051 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

1053 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

1054 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

1055 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
mode
);

1056 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1058 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

1060 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1061 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1062 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1063 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1064 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

1065 
ödít
, 
ASN1_PCTX
 *
p˘x
);

1067 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

1069 
EVP_PKEY_£t1_és_ícodedpoöt
(
EVP_PKEY
 *
pkey
,

1070 c⁄° *
±
, 
size_t
 
±Àn
);

1071 
size_t
 
EVP_PKEY_gë1_és_ícodedpoöt
(
EVP_PKEY
 *
pkey
, **
µt
);

1073 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

1076 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1077 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1080 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1081 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

1084 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1085 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1086 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1087 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

1088 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1089 
keyÀn
, *
out
);

1090 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

1091 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

1092 c⁄° 
EVP_MD
 *
dige°
, 
keyÀn
, *
out
);

1093 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

1094 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
,

1095 c⁄° 
EVP_MD
 *
md
, 
í_de
);

1097 #i‚de‡
OPENSSL_NO_SCRYPT


1098 
EVP_PBE_s¸y±
(c⁄° *
∑ss
, 
size_t
 
∑s¶í
,

1099 c⁄° *
ß…
, 
size_t
 
ß…Àn
,

1100 
uöt64_t
 
N
, uöt64_à
r
, uöt64_à
p
, uöt64_à
maxmem
,

1101 *
key
, 
size_t
 
keyÀn
);

1103 
PKCS5_v2_s¸y±_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
,

1104 
∑s¶í
, 
ASN1_TYPE
 *
∑øm
,

1105 c⁄° 
EVP_CIPHER
 *
c
, c⁄° 
EVP_MD
 *
md
, 
í_de
);

1108 
PKCS5_PBE_add
();

1110 
EVP_PBE_CùhîInô
(
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

1111 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

1116 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

1118 
	#EVP_PBE_TYPE_PRF
 0x1

	)

1120 
	#EVP_PBE_TYPE_KDF
 0x2

	)

1122 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
,

1123 
md_nid
, 
EVP_PBE_KEYGEN
 *
keygí
);

1124 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

1125 
EVP_PBE_KEYGEN
 *
keygí
);

1126 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
, *
p˙id
, *
pmnid
,

1127 
EVP_PBE_KEYGEN
 **
pkeygí
);

1128 
EVP_PBE_˛ónup
();

1129 
EVP_PBE_gë
(*
±y≥
, *
µbe_nid
, 
size_t
 
num
);

1131 
	#ASN1_PKEY_ALIAS
 0x1

	)

1132 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1133 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1135 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1136 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1137 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1138 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1139 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1140 
	#ASN1_PKEY_CTRL_CMS_RI_TYPE
 0x8

	)

1142 
	#ASN1_PKEY_CTRL_SET1_TLS_ENCPT
 0x9

	)

1143 
	#ASN1_PKEY_CTRL_GET1_TLS_ENCPT
 0xa

	)

1145 
EVP_PKEY_a¢1_gë_cou¡
();

1146 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1147 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1148 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1149 c⁄° *
°r
, 
Àn
);

1150 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1151 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1152 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
,

1153 *
µkey_Êags
, c⁄° **
pöfo
,

1154 c⁄° **
µem_°r
,

1155 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1157 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_gë0_a¢1
(c⁄° 
EVP_PKEY
 *
pkey
);

1158 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1159 c⁄° *
≥m_°r
,

1160 c⁄° *
öfo
);

1161 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1162 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1163 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1164 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1165 (*
pub_decode
Ë(
EVP_PKEY
 *
pk
,

1166 
X509_PUBKEY
 *
pub
),

1167 (*
pub_ícode
Ë(
X509_PUBKEY
 *
pub
,

1168 c⁄° 
EVP_PKEY
 *
pk
),

1169 (*
pub_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1170 c⁄° 
EVP_PKEY
 *
b
),

1171 (*
pub_¥öt
Ë(
BIO
 *
out
,

1172 c⁄° 
EVP_PKEY
 *
pkey
,

1173 
ödít
, 
ASN1_PCTX
 *
p˘x
),

1174 (*
pkey_size
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1175 (*
pkey_bôs
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1176 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1177 (*
¥iv_decode
Ë(
EVP_PKEY
 *
pk
,

1178 c⁄° 
PKCS8_PRIV_KEY_INFO


1179 *
p8öf
),

1180 (*
¥iv_ícode
Ë(
PKCS8_PRIV_KEY_INFO
 *
p8
,

1181 c⁄° 
EVP_PKEY
 *
pk
),

1182 (*
¥iv_¥öt
Ë(
BIO
 *
out
,

1183 c⁄° 
EVP_PKEY
 *
pkey
,

1184 
ödít
,

1185 
ASN1_PCTX
 *
p˘x
));

1186 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1187 (*
∑øm_decode
Ë(
EVP_PKEY
 *
pkey
,

1188 c⁄° **
pdî
,

1189 
dîÀn
),

1190 (*
∑øm_ícode
Ë(c⁄° 
EVP_PKEY
 *
pkey
,

1191 **
pdî
),

1192 (*
∑øm_missög
Ë(c⁄° 
EVP_PKEY
 *
pk
),

1193 (*
∑øm_c›y
Ë(
EVP_PKEY
 *
to
,

1194 c⁄° 
EVP_PKEY
 *
‰om
),

1195 (*
∑øm_cmp
Ë(c⁄° 
EVP_PKEY
 *
a
,

1196 c⁄° 
EVP_PKEY
 *
b
),

1197 (*
∑øm_¥öt
Ë(
BIO
 *
out
,

1198 c⁄° 
EVP_PKEY
 *
pkey
,

1199 
ödít
,

1200 
ASN1_PCTX
 *
p˘x
));

1202 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1203 (*
pkey_‰ì
Ë(
EVP_PKEY
 *
pkey
));

1204 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1205 (*
pkey_˘æ
Ë(
EVP_PKEY
 *
pkey
, 
›
,

1206 
¨g1
, *
¨g2
));

1207 
EVP_PKEY_a¢1_£t_ôem
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1208 (*
ôem_vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1209 c⁄° 
ASN1_ITEM
 *
ô
,

1210 *
a¢
,

1211 
X509_ALGOR
 *
a
,

1212 
ASN1_BIT_STRING
 *
sig
,

1213 
EVP_PKEY
 *
pkey
),

1214 (*
ôem_sign
Ë(
EVP_MD_CTX
 *
˘x
,

1215 c⁄° 
ASN1_ITEM
 *
ô
,

1216 *
a¢
,

1217 
X509_ALGOR
 *
Æg1
,

1218 
X509_ALGOR
 *
Æg2
,

1219 
ASN1_BIT_STRING
 *
sig
));

1221 
EVP_PKEY_a¢1_£t_sigöf
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1222 (*
sigöf_£t
Ë(
X509_SIG_INFO
 *
sigöf
,

1223 c⁄° 
X509_ALGOR
 *
Æg
,

1224 c⁄° 
ASN1_STRING
 *
sig
));

1226 
EVP_PKEY_a¢1_£t_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1227 (*
pkey_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1229 
EVP_PKEY_a¢1_£t_public_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1230 (*
pkey_pub_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1232 
EVP_PKEY_a¢1_£t_∑øm_check
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1233 (*
pkey_∑øm_check
Ë(c⁄° 
EVP_PKEY
 *
pk
));

1235 
EVP_PKEY_a¢1_£t_£t_¥iv_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1236 (*
£t_¥iv_key
Ë(
EVP_PKEY
 *
pk
,

1238 *
¥iv
,

1239 
size_t
 
Àn
));

1240 
EVP_PKEY_a¢1_£t_£t_pub_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1241 (*
£t_pub_key
Ë(
EVP_PKEY
 *
pk
,

1242 c⁄° *
pub
,

1243 
size_t
 
Àn
));

1244 
EVP_PKEY_a¢1_£t_gë_¥iv_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1245 (*
gë_¥iv_key
Ë(c⁄° 
EVP_PKEY
 *
pk
,

1246 *
¥iv
,

1247 
size_t
 *
Àn
));

1248 
EVP_PKEY_a¢1_£t_gë_pub_key
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1249 (*
gë_pub_key
Ë(c⁄° 
EVP_PKEY
 *
pk
,

1250 *
pub
,

1251 
size_t
 *
Àn
));

1253 
EVP_PKEY_a¢1_£t_£curôy_bôs
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1254 (*
pkey_£curôy_bôs
Ë(c⁄° 
EVP_PKEY


1255 *
pk
));

1257 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1258 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1259 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1260 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1261 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1262 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1263 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1264 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1265 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1266 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1267 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1269 
	#EVP_PKEY_OP_TYPE_SIG
 \

1270 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1271 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1273 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1274 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1276 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1277 (
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1279 
	#EVP_PKEY_OP_TYPE_GEN
 \

1280 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1282 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1283 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1284 
EVP_PKEY_CTRL_MD
, 0, (*)(
md
))

	)

1286 
	#EVP_PKEY_CTX_gë_sig«tuª_md
(
˘x
, 
pmd
) \

1287 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1288 
EVP_PKEY_CTRL_GET_MD
, 0, (*)(
pmd
))

	)

1290 
	#EVP_PKEY_CTX_£t_mac_key
(
˘x
, 
key
, 
Àn
) \

1291 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_KEYGEN
, \

1292 
EVP_PKEY_CTRL_SET_MAC_KEY
, 
Àn
, (*)(
key
))

	)

1294 
	#EVP_PKEY_CTRL_MD
 1

	)

1295 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1297 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1298 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1300 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1302 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1304 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1307 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1309 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1310 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1311 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1313 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1315 
	#EVP_PKEY_CTRL_GET_MD
 13

	)

1317 
	#EVP_PKEY_CTRL_SET_DIGEST_SIZE
 14

	)

1319 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1321 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1325 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1328 
	#EVP_PKEY_FLAG_FIPS
 0x4000

	)

1330 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1331 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1332 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1333 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1334 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1335 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1336 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1337 
EVP_PKEY_mëh_ªmove
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1338 
size_t
 
EVP_PKEY_mëh_gë_cou¡
();

1339 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_gë0
(
size_t
 
idx
);

1341 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1342 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1343 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1344 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1346 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1347 
cmd
, 
p1
, *
p2
);

1348 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1349 c⁄° *
vÆue
);

1350 
EVP_PKEY_CTX_˘æ_uöt64
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1351 
cmd
, 
uöt64_t
 
vÆue
);

1353 
EVP_PKEY_CTX_°r2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
°r
);

1354 
EVP_PKEY_CTX_hex2˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
cmd
, c⁄° *
hex
);

1356 
EVP_PKEY_CTX_md
(
EVP_PKEY_CTX
 *
˘x
, 
›ty≥
, 
cmd
, c⁄° *
md
);

1358 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1359 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1361 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1362 c⁄° *
key
, 
keyÀn
);

1363 
EVP_PKEY
 *
EVP_PKEY_√w_øw_¥iv©e_key
(
ty≥
, 
ENGINE
 *
e
,

1364 c⁄° *
¥iv
,

1365 
size_t
 
Àn
);

1366 
EVP_PKEY
 *
EVP_PKEY_√w_øw_public_key
(
ty≥
, 
ENGINE
 *
e
,

1367 c⁄° *
pub
,

1368 
size_t
 
Àn
);

1369 
EVP_PKEY_gë_øw_¥iv©e_key
(c⁄° 
EVP_PKEY
 *
pkey
, *
¥iv
,

1370 
size_t
 *
Àn
);

1371 
EVP_PKEY_gë_øw_public_key
(c⁄° 
EVP_PKEY
 *
pkey
, *
pub
,

1372 
size_t
 *
Àn
);

1374 
EVP_PKEY
 *
EVP_PKEY_√w_CMAC_key
(
ENGINE
 *
e
, c⁄° *
¥iv
,

1375 
size_t
 
Àn
, c⁄° 
EVP_CIPHER
 *
cùhî
);

1377 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1378 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1379 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1381 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1383 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1384 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1386 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1387 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1388 *
sig
, 
size_t
 *
sigÀn
,

1389 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1390 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1391 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1392 c⁄° *
sig
, 
size_t
 
sigÀn
,

1393 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1394 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1395 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1396 *
rout
, 
size_t
 *
rouéí
,

1397 c⁄° *
sig
, 
size_t
 
sigÀn
);

1398 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1399 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1400 *
out
, 
size_t
 *
ouéí
,

1401 c⁄° *
ö
, 
size_t
 
öÀn
);

1402 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1403 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1404 *
out
, 
size_t
 *
ouéí
,

1405 c⁄° *
ö
, 
size_t
 
öÀn
);

1407 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1408 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1409 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1411 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1413 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1414 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1415 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1416 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1417 
EVP_PKEY_check
(
EVP_PKEY_CTX
 *
˘x
);

1418 
EVP_PKEY_public_check
(
EVP_PKEY_CTX
 *
˘x
);

1419 
EVP_PKEY_∑øm_check
(
EVP_PKEY_CTX
 *
˘x
);

1421 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1422 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1424 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1426 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1427 (*
öô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1429 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1430 (*
c›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1431 
EVP_PKEY_CTX
 *
§c
));

1433 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1434 (*
˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1436 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1437 (*
∑ømgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1438 (*
∑ømgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1439 
EVP_PKEY
 *
pkey
));

1441 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1442 (*
keygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1443 (*
keygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1444 
EVP_PKEY
 *
pkey
));

1446 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1447 (*
sign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1448 (*
sign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1449 *
sig
, 
size_t
 *
sigÀn
,

1450 c⁄° *
tbs
,

1451 
size_t
 
tb¶í
));

1453 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1454 (*
vîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1455 (*
vîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1456 c⁄° *
sig
,

1457 
size_t
 
sigÀn
,

1458 c⁄° *
tbs
,

1459 
size_t
 
tb¶í
));

1461 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1462 (*
vîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1463 *
˘x
),

1464 (*
vîify_ªcovî
Ë(
EVP_PKEY_CTX


1465 *
˘x
,

1467 *
sig
,

1468 
size_t
 *
sigÀn
,

1470 *
tbs
,

1471 
size_t
 
tb¶í
));

1473 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1474 (*
sign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1475 
EVP_MD_CTX
 *
m˘x
),

1476 (*
sign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1477 *
sig
,

1478 
size_t
 *
sigÀn
,

1479 
EVP_MD_CTX
 *
m˘x
));

1481 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1482 (*
vîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1483 
EVP_MD_CTX
 *
m˘x
),

1484 (*
vîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1485 c⁄° *
sig
,

1486 
sigÀn
,

1487 
EVP_MD_CTX
 *
m˘x
));

1489 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1490 (*
í¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1491 (*
í¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1492 *
out
,

1493 
size_t
 *
ouéí
,

1494 c⁄° *
ö
,

1495 
size_t
 
öÀn
));

1497 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1498 (*
de¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1499 (*
de¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1500 *
out
,

1501 
size_t
 *
ouéí
,

1502 c⁄° *
ö
,

1503 
size_t
 
öÀn
));

1505 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1506 (*
dîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1507 (*
dîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1508 *
key
,

1509 
size_t
 *
keyÀn
));

1511 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1512 (*
˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1513 *
p2
),

1514 (*
˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1515 c⁄° *
ty≥
,

1516 c⁄° *
vÆue
));

1518 
EVP_PKEY_mëh_£t_dige°sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1519 (*
dige°sign
Ë(
EVP_MD_CTX
 *
˘x
,

1520 *
sig
,

1521 
size_t
 *
sigÀn
,

1522 c⁄° *
tbs
,

1523 
size_t
 
tb¶í
));

1525 
EVP_PKEY_mëh_£t_dige°vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1526 (*
dige°vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1527 c⁄° *
sig
,

1528 
size_t
 
sigÀn
,

1529 c⁄° *
tbs
,

1530 
size_t
 
tb¶í
));

1532 
EVP_PKEY_mëh_£t_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1533 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1535 
EVP_PKEY_mëh_£t_public_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1536 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1538 
EVP_PKEY_mëh_£t_∑øm_check
(
EVP_PKEY_METHOD
 *
pmëh
,

1539 (*
check
Ë(
EVP_PKEY
 *
pkey
));

1541 
EVP_PKEY_mëh_£t_dige°_cu°om
(
EVP_PKEY_METHOD
 *
pmëh
,

1542 (*
dige°_cu°om
Ë(
EVP_PKEY_CTX
 *
˘x
,

1543 
EVP_MD_CTX
 *
m˘x
));

1545 
EVP_PKEY_mëh_gë_öô
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1546 (**
pöô
Ë(
EVP_PKEY_CTX
 *
˘x
));

1548 
EVP_PKEY_mëh_gë_c›y
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1549 (**
pc›y
Ë(
EVP_PKEY_CTX
 *
d°
,

1550 
EVP_PKEY_CTX
 *
§c
));

1552 
EVP_PKEY_mëh_gë_˛ónup
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1553 (**
p˛ónup
Ë(
EVP_PKEY_CTX
 *
˘x
));

1555 
EVP_PKEY_mëh_gë_∑ømgí
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1556 (**
µ¨amgí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1557 (**
µ¨amgí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1558 
EVP_PKEY
 *
pkey
));

1560 
EVP_PKEY_mëh_gë_keygí
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1561 (**
pkeygí_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1562 (**
pkeygí
Ë(
EVP_PKEY_CTX
 *
˘x
,

1563 
EVP_PKEY
 *
pkey
));

1565 
EVP_PKEY_mëh_gë_sign
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1566 (**
psign_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1567 (**
psign
Ë(
EVP_PKEY_CTX
 *
˘x
,

1568 *
sig
, 
size_t
 *
sigÀn
,

1569 c⁄° *
tbs
,

1570 
size_t
 
tb¶í
));

1572 
EVP_PKEY_mëh_gë_vîify
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1573 (**
pvîify_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1574 (**
pvîify
Ë(
EVP_PKEY_CTX
 *
˘x
,

1575 c⁄° *
sig
,

1576 
size_t
 
sigÀn
,

1577 c⁄° *
tbs
,

1578 
size_t
 
tb¶í
));

1580 
EVP_PKEY_mëh_gë_vîify_ªcovî
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1581 (**
pvîify_ªcovî_öô
Ë(
EVP_PKEY_CTX


1582 *
˘x
),

1583 (**
pvîify_ªcovî
Ë(
EVP_PKEY_CTX


1584 *
˘x
,

1586 *
sig
,

1587 
size_t
 *
sigÀn
,

1589 *
tbs
,

1590 
size_t
 
tb¶í
));

1592 
EVP_PKEY_mëh_gë_sign˘x
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1593 (**
psign˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1594 
EVP_MD_CTX
 *
m˘x
),

1595 (**
psign˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1596 *
sig
,

1597 
size_t
 *
sigÀn
,

1598 
EVP_MD_CTX
 *
m˘x
));

1600 
EVP_PKEY_mëh_gë_vîify˘x
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1601 (**
pvîify˘x_öô
Ë(
EVP_PKEY_CTX
 *
˘x
,

1602 
EVP_MD_CTX
 *
m˘x
),

1603 (**
pvîify˘x
Ë(
EVP_PKEY_CTX
 *
˘x
,

1604 c⁄° *
sig
,

1605 
sigÀn
,

1606 
EVP_MD_CTX
 *
m˘x
));

1608 
EVP_PKEY_mëh_gë_í¸y±
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1609 (**
≥n¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1610 (**
≥n¸y±‚
Ë(
EVP_PKEY_CTX
 *
˘x
,

1611 *
out
,

1612 
size_t
 *
ouéí
,

1613 c⁄° *
ö
,

1614 
size_t
 
öÀn
));

1616 
EVP_PKEY_mëh_gë_de¸y±
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1617 (**
pde¸y±_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1618 (**
pde¸y±
Ë(
EVP_PKEY_CTX
 *
˘x
,

1619 *
out
,

1620 
size_t
 *
ouéí
,

1621 c⁄° *
ö
,

1622 
size_t
 
öÀn
));

1624 
EVP_PKEY_mëh_gë_dîive
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1625 (**
pdîive_öô
Ë(
EVP_PKEY_CTX
 *
˘x
),

1626 (**
pdîive
Ë(
EVP_PKEY_CTX
 *
˘x
,

1627 *
key
,

1628 
size_t
 *
keyÀn
));

1630 
EVP_PKEY_mëh_gë_˘æ
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1631 (**
p˘æ
Ë(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
,

1632 *
p2
),

1633 (**
p˘æ_°r
Ë(
EVP_PKEY_CTX
 *
˘x
,

1634 c⁄° *
ty≥
,

1635 c⁄° *
vÆue
));

1637 
EVP_PKEY_mëh_gë_dige°sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1638 (**
dige°sign
Ë(
EVP_MD_CTX
 *
˘x
,

1639 *
sig
,

1640 
size_t
 *
sigÀn
,

1641 c⁄° *
tbs
,

1642 
size_t
 
tb¶í
));

1644 
EVP_PKEY_mëh_gë_dige°vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1645 (**
dige°vîify
Ë(
EVP_MD_CTX
 *
˘x
,

1646 c⁄° *
sig
,

1647 
size_t
 
sigÀn
,

1648 c⁄° *
tbs
,

1649 
size_t
 
tb¶í
));

1651 
EVP_PKEY_mëh_gë_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1652 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1654 
EVP_PKEY_mëh_gë_public_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1655 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1657 
EVP_PKEY_mëh_gë_∑øm_check
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
,

1658 (**
pcheck
Ë(
EVP_PKEY
 *
pkey
));

1660 
EVP_PKEY_mëh_gë_dige°_cu°om
(
EVP_PKEY_METHOD
 *
pmëh
,

1661 (**
pdige°_cu°om
Ë(
EVP_PKEY_CTX
 *
˘x
,

1662 
EVP_MD_CTX
 *
m˘x
));

1663 
EVP_add_Æg_moduÀ
();

1666 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

10 #i‚de‡
HEADER_OPENSSL_TYPES_H


11 
	#HEADER_OPENSSL_TYPES_H


	)

13 
	~<limôs.h
>

15 #ifde‡ 
__˝lu•lus


19 
	~<›ís¶/e_os2.h
>

21 #ifde‡
NO_ASN1_TYPEDEFS


22 
	#ASN1_INTEGER
 
ASN1_STRING


	)

23 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

24 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

25 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

26 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

27 
	#ASN1_T61STRING
 
ASN1_STRING


	)

28 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

29 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

30 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

31 
	#ASN1_TIME
 
ASN1_STRING


	)

32 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

33 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

34 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

35 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

36 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

37 
	#ASN1_BOOLEAN
 

	)

38 
	#ASN1_NULL
 

	)

40 
a¢1_°rög_°
 
	tASN1_INTEGER
;

41 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

42 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

43 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

44 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

45 
a¢1_°rög_°
 
	tASN1_T61STRING
;

46 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

47 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

48 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

49 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

50 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

51 
a¢1_°rög_°
 
	tASN1_TIME
;

52 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

53 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

54 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

55 
a¢1_°rög_°
 
	tASN1_STRING
;

56 
	tASN1_BOOLEAN
;

57 
	tASN1_NULL
;

60 
a¢1_obje˘_°
 
	tASN1_OBJECT
;

62 
ASN1_ITEM_°
 
	tASN1_ITEM
;

63 
a¢1_p˘x_°
 
	tASN1_PCTX
;

64 
a¢1_s˘x_°
 
	tASN1_SCTX
;

66 #ifde‡
_WIN32


67 #unde‡
X509_NAME


68 #unde‡
X509_EXTENSIONS


69 #unde‡
PKCS7_ISSUER_AND_SERIAL


70 #unde‡
PKCS7_SIGNER_INFO


71 #unde‡
OCSP_REQUEST


72 #unde‡
OCSP_RESPONSE


75 #ifde‡
BIGNUM


76 #unde‡
BIGNUM


78 
d™e_°
;

79 
bio_°
 
	tBIO
;

80 
bignum_°
 
	tBIGNUM
;

81 
bignum_˘x
 
	tBN_CTX
;

82 
bn_blödög_°
 
	tBN_BLINDING
;

83 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

84 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

85 
bn_gícb_°
 
	tBN_GENCB
;

87 
buf_mem_°
 
	tBUF_MEM
;

89 
evp_cùhî_°
 
	tEVP_CIPHER
;

90 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

91 
evp_md_°
 
	tEVP_MD
;

92 
evp_md_˘x_°
 
	tEVP_MD_CTX
;

93 
evp_pkey_°
 
	tEVP_PKEY
;

95 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

97 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

98 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

100 
evp_kdf_˘x_°
 
	tEVP_KDF_CTX
;

102 
evp_Encode_Ctx_°
 
	tEVP_ENCODE_CTX
;

104 
hmac_˘x_°
 
	tHMAC_CTX
;

106 
dh_°
 
	tDH
;

107 
dh_mëhod
 
	tDH_METHOD
;

109 
dß_°
 
	tDSA
;

110 
dß_mëhod
 
	tDSA_METHOD
;

112 
rß_°
 
	tRSA
;

113 
rß_mëh_°
 
	tRSA_METHOD
;

114 
rß_pss_∑øms_°
 
	tRSA_PSS_PARAMS
;

116 
ec_key_°
 
	tEC_KEY
;

117 
ec_key_mëhod_°
 
	tEC_KEY_METHOD
;

119 
ønd_mëh_°
 
	tRAND_METHOD
;

120 
ønd_drbg_°
 
	tRAND_DRBG
;

122 
s¶_d™e_°
 
	tSSL_DANE
;

123 
x509_°
 
	tX509
;

124 
X509_Æg‹_°
 
	tX509_ALGOR
;

125 
X509_¸l_°
 
	tX509_CRL
;

126 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

127 
x509_ªvoked_°
 
	tX509_REVOKED
;

128 
X509_«me_°
 
	tX509_NAME
;

129 
X509_pubkey_°
 
	tX509_PUBKEY
;

130 
x509_°‹e_°
 
	tX509_STORE
;

131 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

133 
x509_obje˘_°
 
	tX509_OBJECT
;

134 
x509_lookup_°
 
	tX509_LOOKUP
;

135 
x509_lookup_mëhod_°
 
	tX509_LOOKUP_METHOD
;

136 
X509_VERIFY_PARAM_°
 
	tX509_VERIFY_PARAM
;

138 
x509_sig_öfo_°
 
	tX509_SIG_INFO
;

140 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

142 
v3_ext_˘x
 
	tX509V3_CTX
;

143 
c⁄f_°
 
	tCONF
;

144 
os¶_öô_£âögs_°
 
	tOPENSSL_INIT_SETTINGS
;

146 
ui_°
 
	tUI
;

147 
ui_mëhod_°
 
	tUI_METHOD
;

149 
ígöe_°
 
	tENGINE
;

150 
s¶_°
 
	tSSL
;

151 
s¶_˘x_°
 
	tSSL_CTX
;

153 
comp_˘x_°
 
	tCOMP_CTX
;

154 
comp_mëhod_°
 
	tCOMP_METHOD
;

156 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

157 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

158 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

159 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

161 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

162 
DIST_POINT_°
 
	tDIST_POINT
;

163 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

164 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

166 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

168 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

169 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

170 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

172 
s˘_°
 
	tSCT
;

173 
s˘_˘x_°
 
	tSCT_CTX
;

174 
˘log_°
 
	tCTLOG
;

175 
˘log_°‹e_°
 
	tCTLOG_STORE
;

176 
˘_pﬁicy_evÆ_˘x_°
 
	tCT_POLICY_EVAL_CTX
;

178 
os¶_°‹e_öfo_°
 
	tOSSL_STORE_INFO
;

179 
os¶_°‹e_£¨ch_°
 
	tOSSL_STORE_SEARCH
;

181 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L && \

182 
deföed
(
INTMAX_MAX
Ë&& deföed(
UINTMAX_MAX
)

183 
ötmax_t
 
	tos¶_ötmax_t
;

184 
uötmax_t
 
	tos¶_uötmax_t
;

192 
	tos¶_ötmax_t
;

193 
	tos¶_uötmax_t
;

196 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pem.h

10 #i‚de‡
HEADER_PEM_H


11 
	#HEADER_PEM_H


	)

13 
	~<›ís¶/e_os2.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/ß„°ack.h
>

16 
	~<›ís¶/evp.h
>

17 
	~<›ís¶/x509.h
>

18 
	~<›ís¶/≥mîr.h
>

20 #ifde‡ 
__˝lu•lus


24 
	#PEM_BUFSIZE
 1024

	)

26 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

27 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

28 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

29 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

30 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

31 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

32 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

33 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

34 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

35 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

36 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

37 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

38 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

39 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

40 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

41 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

42 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

43 
	#PEM_STRING_DHXPARAMS
 "X9.42 DH PARAMETERS"

	)

44 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

45 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

46 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

47 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

48 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

49 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

50 
	#PEM_STRING_CMS
 "CMS"

	)

52 
	#PEM_TYPE_ENCRYPTED
 10

	)

53 
	#PEM_TYPE_MIC_ONLY
 20

	)

54 
	#PEM_TYPE_MIC_CLEAR
 30

	)

55 
	#PEM_TYPE_CLEAR
 40

	)

63 #ifde‡
OPENSSL_NO_STDIO


65 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

66 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

67 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

68 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

69 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

72 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

73 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

75  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

76 }

	)

78 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

79 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

81  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

82 }

	)

84 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

85 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

87  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

88 }

	)

90 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

91 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

92 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

93 *
u
) \

95  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

96 }

	)

98 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

99 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

100 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

101 *
u
) \

103  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

104 }

	)

108 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

109 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

111  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

112 }

	)

114 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

115 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

117  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

118 }

	)

120 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

121 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

123  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

124 }

	)

126 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

127 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

128 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

130  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

131 }

	)

133 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

134 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

135 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

137  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

138 }

	)

140 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

141 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

142 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

144 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

145 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

146 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

148 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

149 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

150 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

152 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

153 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

154 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

156 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

157 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

158 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

160 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

161 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

162 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

164 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

165 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

166 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

168 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

169 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

170 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

174 #i‡
deföed
(
OPENSSL_NO_STDIO
)

176 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

177 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

178 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
Ë

	)

179 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

182 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

183 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

185 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

186 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

188 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

189 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

191 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

192 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

193 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

197 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

198 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

200 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

201 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

203 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

204 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

206 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

207 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

208 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

210 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

211 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

212 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

213 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

214 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

215 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

216 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

217 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

218 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

219 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

220 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

221 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

222 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

223 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

224 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

225 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

226 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

227 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

228 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

229 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

230 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

231 
	t≥m_∑ssw‹d_cb
 (*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

233 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

234 
PEM_do_hódî
(
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
, *
Àn
,

235 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

237 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

238 **
d©a
, *
Àn
);

239 
	#PEM_FLAG_SECURE
 0x1

	)

240 
	#PEM_FLAG_EAY_COMPATIBLE
 0x2

	)

241 
	#PEM_FLAG_ONLY_B64
 0x4

	)

242 
PEM_ªad_bio_ex
(
BIO
 *
bp
, **
«me
, **
hódî
,

243 **
d©a
, *
Àn
, 
Êags
);

244 
PEM_byãs_ªad_bio_£cmem
(**
pd©a
, *
∂í
, **
≤m
,

245 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

246 *
u
);

247 
PEM_wrôe_bio
(
BIO
 *
bp
, c⁄° *
«me
, c⁄° *
hdr
,

248 c⁄° *
d©a
, 
Àn
);

249 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
,

250 c⁄° *
«me
, 
BIO
 *
bp
, 
≥m_∑ssw‹d_cb
 *
cb
,

251 *
u
);

252 *
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
, **
x
,

253 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

254 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
BIO
 *
bp
, *
x
,

255 c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
, 
kÀn
,

256 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

258 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
,

259 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

260 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
, 
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

261 *
k°r
, 
kÀn
,

262 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

264 #i‚de‡
OPENSSL_NO_STDIO


265 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

266 **
d©a
, *
Àn
);

267 
PEM_wrôe
(
FILE
 *
Â
, c⁄° *
«me
, c⁄° *
hdr
,

268 c⁄° *
d©a
, 
Àn
);

269 *
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

270 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

271 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
, c⁄° *
«me
, 
FILE
 *
Â
,

272 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, *
k°r
,

273 
kÀn
, 
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

274 
STACK_OF
(
X509_INFO
Ë*
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

275 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

278 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

279 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
, *
d
, 
˙t
);

280 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

281 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

284 
PEM_def_ˇŒback
(*
buf
, 
num
, 
rwÊag
, *
u£rd©a
);

285 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

286 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

288 
	~<›ís¶/symhacks.h
>

290 
DECLARE_PEM_rw
(
X509
, X509)

291 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

292 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

293 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

294 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

295 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

296 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

297 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

298 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

299 #i‚de‡
OPENSSL_NO_RSA


300 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

301 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

302 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

304 #i‚de‡
OPENSSL_NO_DSA


305 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

306 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

307 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

309 #i‚de‡
OPENSSL_NO_EC


310 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

311 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

312 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

314 #i‚de‡
OPENSSL_NO_DH


315 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

316 
DECLARE_PEM_wrôe_c⁄°
(
DHx∑øms
, 
DH
)

318 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

319 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

321 
PEM_wrôe_bio_Priv©eKey_åadôi⁄Æ
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
,

322 c⁄° 
EVP_CIPHER
 *
íc
,

323 *
k°r
, 
kÀn
,

324 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

326 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

327 *
k°r
, 
kÀn
,

328 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

329 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

330 *, , 
≥m_∑ssw‹d_cb
 *, *);

331 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

332 *
k°r
, 
kÀn
,

333 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

334 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

335 *
k°r
, 
kÀn
,

336 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

337 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

338 *
u
);

340 #i‚de‡
OPENSSL_NO_STDIO


341 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

342 *
k°r
, 
kÀn
,

343 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

344 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

345 *
k°r
, 
kÀn
,

346 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

347 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

348 *
k°r
, 
kÀn
,

349 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

351 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
,

352 *
u
);

354 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

355 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
,

356 *
u
);

358 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

359 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

361 #i‚de‡
OPENSSL_NO_DSA


362 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

363 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

364 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

365 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

366 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

367 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

368 #i‚de‡
OPENSSL_NO_RC4


369 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

370 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

371 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

375 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

10 #i‚de‡
HEADER_RSA_H


11 
	#HEADER_RSA_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_RSA


16 
	~<›ís¶/a¢1.h
>

17 
	~<›ís¶/bio.h
>

18 
	~<›ís¶/¸y±o.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

21 
	~<›ís¶/bn.h
>

23 
	~<›ís¶/rßîr.h
>

24 #ifde‡ 
__˝lu•lus


30 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


31 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

34 
	#OPENSSL_RSA_FIPS_MIN_MODULUS_BITS
 1024

	)

36 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


37 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

39 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


42 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

45 
	#RSA_3
 0x3L

	)

46 
	#RSA_F4
 0x10001L

	)

49 
	#RSA_ASN1_VERSION_DEFAULT
 0

	)

50 
	#RSA_ASN1_VERSION_MULTI
 1

	)

52 
	#RSA_DEFAULT_PRIME_NUM
 2

	)

54 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

57 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

58 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

59 
	#RSA_FLAG_BLINDING
 0x0008

	)

60 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

67 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

75 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

76 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

80 
	#RSA_FLAG_NO_CONSTTIME
 0x0000

	)

82 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

92 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

95 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

96 
	`RSA_pkey_˘x_˘æ
(
˘x
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, 
∑d
, 
NULL
)

	)

98 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

99 
	`RSA_pkey_˘x_˘æ
(
˘x
, -1, 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

101 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

102 
	`RSA_pkey_˘x_˘æ
(
˘x
, (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

103 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, 
Àn
, 
NULL
)

	)

105 
	#RSA_PSS_SALTLEN_DIGEST
 -1

	)

107 
	#RSA_PSS_SALTLEN_AUTO
 -2

	)

109 
	#RSA_PSS_SALTLEN_MAX
 -3

	)

111 
	#RSA_PSS_SALTLEN_MAX_SIGN
 -2

	)

113 
	#EVP_PKEY_CTX_£t_rß_pss_keygí_ß…Àn
(
˘x
, 
Àn
) \

114 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA_PSS
, 
EVP_PKEY_OP_KEYGEN
, \

115 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, 
Àn
, 
NULL
)

	)

117 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

118 
	`RSA_pkey_˘x_˘æ
(
˘x
, (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

119 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, 0, 
∂í
)

	)

121 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

122 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_KEYGEN
, \

123 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

125 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

126 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_KEYGEN
, \

127 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

129 
	#EVP_PKEY_CTX_£t_rß_keygí_¥imes
(
˘x
, 
¥imes
) \

130 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_KEYGEN
, \

131 
EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES
, 
¥imes
, 
NULL
)

	)

133 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

134 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

135 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)(
md
))

	)

137 
	#EVP_PKEY_CTX_£t_rß_pss_keygí_mgf1_md
(
˘x
, 
md
) \

138 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA_PSS
, 
EVP_PKEY_OP_KEYGEN
, \

139 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)(
md
))

	)

141 
	#EVP_PKEY_CTX_£t_rß_ﬂï_md
(
˘x
, 
md
) \

142 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

143 
EVP_PKEY_CTRL_RSA_OAEP_MD
, 0, (*)(
md
))

	)

145 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

146 
	`RSA_pkey_˘x_˘æ
(
˘x
, 
EVP_PKEY_OP_TYPE_SIG
 | 
EVP_PKEY_OP_TYPE_CRYPT
, \

147 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)(
pmd
))

	)

149 
	#EVP_PKEY_CTX_gë_rß_ﬂï_md
(
˘x
, 
pmd
) \

150 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

151 
EVP_PKEY_CTRL_GET_RSA_OAEP_MD
, 0, (*)(
pmd
))

	)

153 
	#EVP_PKEY_CTX_£t0_rß_ﬂï_œbñ
(
˘x
, 
l
, 
Œí
) \

154 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

155 
EVP_PKEY_CTRL_RSA_OAEP_LABEL
, 
Œí
, (*)(
l
))

	)

157 
	#EVP_PKEY_CTX_gë0_rß_ﬂï_œbñ
(
˘x
, 
l
) \

158 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_CRYPT
, \

159 
EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
, 0, (*)(
l
))

	)

161 
	#EVP_PKEY_CTX_£t_rß_pss_keygí_md
(
˘x
, 
md
) \

162 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA_PSS
, \

163 
EVP_PKEY_OP_KEYGEN
, 
EVP_PKEY_CTRL_MD
, \

164 0, (*)(
md
))

	)

166 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

167 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

169 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

170 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

171 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

173 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

174 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

175 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

177 
	#EVP_PKEY_CTRL_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

178 
	#EVP_PKEY_CTRL_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

180 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_MD
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

181 
	#EVP_PKEY_CTRL_GET_RSA_OAEP_LABEL
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

183 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PRIMES
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

185 
	#RSA_PKCS1_PADDING
 1

	)

186 
	#RSA_SSLV23_PADDING
 2

	)

187 
	#RSA_NO_PADDING
 3

	)

188 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

189 
	#RSA_X931_PADDING
 5

	)

191 
	#RSA_PKCS1_PSS_PADDING
 6

	)

193 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

195 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

196 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

198 
RSA
 *
RSA_√w
();

199 
RSA
 *
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

200 
RSA_bôs
(c⁄° 
RSA
 *
rß
);

201 
RSA_size
(c⁄° 
RSA
 *
rß
);

202 
RSA_£curôy_bôs
(c⁄° 
RSA
 *
rß
);

204 
RSA_£t0_key
(
RSA
 *
r
, 
BIGNUM
 *
n
, BIGNUM *
e
, BIGNUM *
d
);

205 
RSA_£t0_Á˘‹s
(
RSA
 *
r
, 
BIGNUM
 *
p
, BIGNUM *
q
);

206 
RSA_£t0_¸t_∑øms
(
RSA
 *
r
,
BIGNUM
 *
dmp1
, BIGNUM *
dmq1
, BIGNUM *
iqmp
);

207 
RSA_£t0_mu…i_¥ime_∑øms
(
RSA
 *
r
, 
BIGNUM
 *
¥imes
[], BIGNUM *
exps
[],

208 
BIGNUM
 *
c€ffs
[], 
≤um
);

209 
RSA_gë0_key
(c⁄° 
RSA
 *
r
,

210 c⁄° 
BIGNUM
 **
n
, c⁄° BIGNUM **
e
, c⁄° BIGNUM **
d
);

211 
RSA_gë0_Á˘‹s
(c⁄° 
RSA
 *
r
, c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
);

212 
RSA_gë_mu…i_¥ime_exåa_cou¡
(c⁄° 
RSA
 *
r
);

213 
RSA_gë0_mu…i_¥ime_Á˘‹s
(c⁄° 
RSA
 *
r
, c⁄° 
BIGNUM
 *
¥imes
[]);

214 
RSA_gë0_¸t_∑øms
(c⁄° 
RSA
 *
r
,

215 c⁄° 
BIGNUM
 **
dmp1
, c⁄° BIGNUM **
dmq1
,

216 c⁄° 
BIGNUM
 **
iqmp
);

217 
RSA_gë0_mu…i_¥ime_¸t_∑øms
(c⁄° 
RSA
 *
r
, c⁄° 
BIGNUM
 *
exps
[],

218 c⁄° 
BIGNUM
 *
c€ffs
[]);

219 c⁄° 
BIGNUM
 *
RSA_gë0_n
(c⁄° 
RSA
 *
d
);

220 c⁄° 
BIGNUM
 *
RSA_gë0_e
(c⁄° 
RSA
 *
d
);

221 c⁄° 
BIGNUM
 *
RSA_gë0_d
(c⁄° 
RSA
 *
d
);

222 c⁄° 
BIGNUM
 *
RSA_gë0_p
(c⁄° 
RSA
 *
d
);

223 c⁄° 
BIGNUM
 *
RSA_gë0_q
(c⁄° 
RSA
 *
d
);

224 c⁄° 
BIGNUM
 *
RSA_gë0_dmp1
(c⁄° 
RSA
 *
r
);

225 c⁄° 
BIGNUM
 *
RSA_gë0_dmq1
(c⁄° 
RSA
 *
r
);

226 c⁄° 
BIGNUM
 *
RSA_gë0_iqmp
(c⁄° 
RSA
 *
r
);

227 c⁄° 
RSA_PSS_PARAMS
 *
RSA_gë0_pss_∑øms
(c⁄° 
RSA
 *
r
);

228 
RSA_˛ór_Êags
(
RSA
 *
r
, 
Êags
);

229 
RSA_ã°_Êags
(c⁄° 
RSA
 *
r
, 
Êags
);

230 
RSA_£t_Êags
(
RSA
 *
r
, 
Êags
);

231 
RSA_gë_vîsi⁄
(
RSA
 *
r
);

232 
ENGINE
 *
RSA_gë0_ígöe
(c⁄° 
RSA
 *
r
);

235 
DEPRECATEDIN_0_9_8
(
RSA
 *
RSA_gíî©e_key
(
bôs
, 
e
, 

236 (*
ˇŒback
) (, , *),

237 *
cb_¨g
))

240 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

242 
RSA_gíî©e_mu…i_¥ime_key
(
RSA
 *
rß
, 
bôs
, 
¥imes
,

243 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

245 
RSA_X931_dîive_ex
(
RSA
 *
rß
, 
BIGNUM
 *
p1
, BIGNUM *
p2
, BIGNUM *
q1
,

246 
BIGNUM
 *
q2
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

247 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xq1
, c⁄° BIGNUM *
Xq2
,

248 c⁄° 
BIGNUM
 *
Xq
, c⁄° BIGNUM *
e
, 
BN_GENCB
 *
cb
);

249 
RSA_X931_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, c⁄° 
BIGNUM
 *
e
,

250 
BN_GENCB
 *
cb
);

252 
RSA_check_key
(c⁄° 
RSA
 *);

253 
RSA_check_key_ex
(c⁄° 
RSA
 *, 
BN_GENCB
 *
cb
);

255 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

256 *
to
, 
RSA
 *
rß
, 
∑ddög
);

257 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

258 *
to
, 
RSA
 *
rß
, 
∑ddög
);

259 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

260 *
to
, 
RSA
 *
rß
, 
∑ddög
);

261 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

262 *
to
, 
RSA
 *
rß
, 
∑ddög
);

263 
RSA_‰ì
(
RSA
 *
r
);

265 
RSA_up_ªf
(
RSA
 *
r
);

267 
RSA_Êags
(c⁄° 
RSA
 *
r
);

269 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

270 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

271 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

272 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

273 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

276 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_O≥nSSL
();

278 
RSA_pkey_˘x_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
›ty≥
, 
cmd
, 
p1
, *
p2
);

280 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

281 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

283 
	srß_pss_∑øms_°
 {

284 
X509_ALGOR
 *
hashAlg‹ôhm
;

285 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

286 
ASN1_INTEGER
 *
ß…Lígth
;

287 
ASN1_INTEGER
 *
åaûîFõld
;

289 
X509_ALGOR
 *
maskHash
;

292 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

294 
	srß_ﬂï_∑øms_°
 {

295 
X509_ALGOR
 *
hashFunc
;

296 
X509_ALGOR
 *
maskGíFunc
;

297 
X509_ALGOR
 *
pSour˚Func
;

299 
X509_ALGOR
 *
maskHash
;

300 } 
	tRSA_OAEP_PARAMS
;

302 
DECLARE_ASN1_FUNCTIONS
(
RSA_OAEP_PARAMS
)

304 #i‚de‡
OPENSSL_NO_STDIO


305 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
, 
off£t
);

308 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
, 
off£t
);

314 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

315 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

316 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

317 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

323 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

324 c⁄° *
m
, 
m_Àngth
,

325 *
sigªt
, *
sigÀn
,

326 
RSA
 *
rß
);

327 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
, c⁄° *
m
,

328 
m_Àngth
, *
sigbuf
,

329 
sigÀn
, 
RSA
 *
rß
);

331 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

332 
RSA_blödög_off
(
RSA
 *
rß
);

333 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

335 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
, 
éí
,

336 c⁄° *
f
, 
Ê
);

337 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
, 
éí
,

338 c⁄° *
f
, 
Ê
,

339 
rß_Àn
);

340 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
, 
éí
,

341 c⁄° *
f
, 
Ê
);

342 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
, 
éí
,

343 c⁄° *
f
, 
Ê
,

344 
rß_Àn
);

345 
PKCS1_MGF1
(*
mask
, 
Àn
, c⁄° *
£ed
,

346 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

347 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
, 
éí
,

348 c⁄° *
f
, 
Ê
,

349 c⁄° *
p
, 
∂
);

350 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
, 
éí
,

351 c⁄° *
f
, 
Ê
, 
rß_Àn
,

352 c⁄° *
p
, 
∂
);

353 
RSA_∑ddög_add_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

354 c⁄° *
‰om
, 
Êí
,

355 c⁄° *
∑øm
, 
∂í
,

356 c⁄° 
EVP_MD
 *
md
, c⁄° EVP_MD *
mgf1md
);

357 
RSA_∑ddög_check_PKCS1_OAEP_mgf1
(*
to
, 
éí
,

358 c⁄° *
‰om
, 
Êí
,

359 
num
, c⁄° *
∑øm
,

360 
∂í
, c⁄° 
EVP_MD
 *
md
,

361 c⁄° 
EVP_MD
 *
mgf1md
);

362 
RSA_∑ddög_add_SSLv23
(*
to
, 
éí
,

363 c⁄° *
f
, 
Ê
);

364 
RSA_∑ddög_check_SSLv23
(*
to
, 
éí
,

365 c⁄° *
f
, 
Ê
, 
rß_Àn
);

366 
RSA_∑ddög_add_n⁄e
(*
to
, 
éí
, c⁄° *
f
,

367 
Ê
);

368 
RSA_∑ddög_check_n⁄e
(*
to
, 
éí
,

369 c⁄° *
f
, 
Ê
, 
rß_Àn
);

370 
RSA_∑ddög_add_X931
(*
to
, 
éí
, c⁄° *
f
,

371 
Ê
);

372 
RSA_∑ddög_check_X931
(*
to
, 
éí
,

373 c⁄° *
f
, 
Ê
, 
rß_Àn
);

374 
RSA_X931_hash_id
(
nid
);

376 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

377 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
,

378 
sLí
);

379 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

380 c⁄° *
mHash
, c⁄° 
EVP_MD
 *
Hash
,

381 
sLí
);

383 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

384 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

385 c⁄° *
EM
, 
sLí
);

387 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

388 c⁄° *
mHash
,

389 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

390 
sLí
);

392 
	#RSA_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

393 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_RSA
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

394 
RSA_£t_ex_d©a
(
RSA
 *
r
, 
idx
, *
¨g
);

395 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

397 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

398 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

407 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

415 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

420 
	#RSA_FLAG_CHECKED
 0x0800

	)

422 
RSA_METHOD
 *
RSA_mëh_√w
(c⁄° *
«me
, 
Êags
);

423 
RSA_mëh_‰ì
(
RSA_METHOD
 *
mëh
);

424 
RSA_METHOD
 *
RSA_mëh_dup
(c⁄° RSA_METHOD *
mëh
);

425 c⁄° *
RSA_mëh_gë0_«me
(c⁄° 
RSA_METHOD
 *
mëh
);

426 
RSA_mëh_£t1_«me
(
RSA_METHOD
 *
mëh
, c⁄° *
«me
);

427 
RSA_mëh_gë_Êags
(c⁄° 
RSA_METHOD
 *
mëh
);

428 
RSA_mëh_£t_Êags
(
RSA_METHOD
 *
mëh
, 
Êags
);

429 *
RSA_mëh_gë0_≠p_d©a
(c⁄° 
RSA_METHOD
 *
mëh
);

430 
RSA_mëh_£t0_≠p_d©a
(
RSA_METHOD
 *
mëh
, *
≠p_d©a
);

431 (*
RSA_mëh_gë_pub_íc
(c⁄° 
RSA_METHOD
 *
mëh
))

432 (
Êí
, c⁄° *
‰om
,

433 *
to
, 
RSA
 *
rß
, 
∑ddög
);

434 
RSA_mëh_£t_pub_íc
(
RSA_METHOD
 *
rß
,

435 (*
pub_íc
Ë(
Êí
, c⁄° *
‰om
,

436 *
to
, 
RSA
 *
rß
,

437 
∑ddög
));

438 (*
RSA_mëh_gë_pub_dec
(c⁄° 
RSA_METHOD
 *
mëh
))

439 (
Êí
, c⁄° *
‰om
,

440 *
to
, 
RSA
 *
rß
, 
∑ddög
);

441 
RSA_mëh_£t_pub_dec
(
RSA_METHOD
 *
rß
,

442 (*
pub_dec
Ë(
Êí
, c⁄° *
‰om
,

443 *
to
, 
RSA
 *
rß
,

444 
∑ddög
));

445 (*
RSA_mëh_gë_¥iv_íc
(c⁄° 
RSA_METHOD
 *
mëh
))

446 (
Êí
, c⁄° *
‰om
,

447 *
to
, 
RSA
 *
rß
, 
∑ddög
);

448 
RSA_mëh_£t_¥iv_íc
(
RSA_METHOD
 *
rß
,

449 (*
¥iv_íc
Ë(
Êí
, c⁄° *
‰om
,

450 *
to
, 
RSA
 *
rß
,

451 
∑ddög
));

452 (*
RSA_mëh_gë_¥iv_dec
(c⁄° 
RSA_METHOD
 *
mëh
))

453 (
Êí
, c⁄° *
‰om
,

454 *
to
, 
RSA
 *
rß
, 
∑ddög
);

455 
RSA_mëh_£t_¥iv_dec
(
RSA_METHOD
 *
rß
,

456 (*
¥iv_dec
Ë(
Êí
, c⁄° *
‰om
,

457 *
to
, 
RSA
 *
rß
,

458 
∑ddög
));

459 (*
RSA_mëh_gë_mod_exp
(c⁄° 
RSA_METHOD
 *
mëh
))

460 (
BIGNUM
 *
r0
, c⁄° BIGNUM *
i
, 
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

461 
RSA_mëh_£t_mod_exp
(
RSA_METHOD
 *
rß
,

462 (*
mod_exp
Ë(
BIGNUM
 *
r0
, c⁄° BIGNUM *
i
, 
RSA
 *
rß
,

463 
BN_CTX
 *
˘x
));

464 (*
RSA_mëh_gë_bn_mod_exp
(c⁄° 
RSA_METHOD
 *
mëh
))

465 (
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

466 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

467 
RSA_mëh_£t_bn_mod_exp
(
RSA_METHOD
 *
rß
,

468 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

469 c⁄° 
BIGNUM
 *
a
,

470 c⁄° 
BIGNUM
 *
p
,

471 c⁄° 
BIGNUM
 *
m
,

472 
BN_CTX
 *
˘x
,

473 
BN_MONT_CTX
 *
m_˘x
));

474 (*
RSA_mëh_gë_öô
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
);

475 
RSA_mëh_£t_öô
(
RSA_METHOD
 *
rß
, (*
öô
Ë(
RSA
 *rsa));

476 (*
RSA_mëh_gë_föish
(c⁄° 
RSA_METHOD
 *
mëh
)Ë(
RSA
 *
rß
);

477 
RSA_mëh_£t_föish
(
RSA_METHOD
 *
rß
, (*
föish
Ë(
RSA
 *rsa));

478 (*
RSA_mëh_gë_sign
(c⁄° 
RSA_METHOD
 *
mëh
))

479 (
ty≥
,

480 c⁄° *
m
, 
m_Àngth
,

481 *
sigªt
, *
sigÀn
,

482 c⁄° 
RSA
 *
rß
);

483 
RSA_mëh_£t_sign
(
RSA_METHOD
 *
rß
,

484 (*
sign
Ë(
ty≥
, c⁄° *
m
,

485 
m_Àngth
,

486 *
sigªt
, *
sigÀn
,

487 c⁄° 
RSA
 *
rß
));

488 (*
RSA_mëh_gë_vîify
(c⁄° 
RSA_METHOD
 *
mëh
))

489 (
dty≥
, c⁄° *
m
,

490 
m_Àngth
, c⁄° *
sigbuf
,

491 
sigÀn
, c⁄° 
RSA
 *
rß
);

492 
RSA_mëh_£t_vîify
(
RSA_METHOD
 *
rß
,

493 (*
vîify
Ë(
dty≥
, c⁄° *
m
,

494 
m_Àngth
,

495 c⁄° *
sigbuf
,

496 
sigÀn
, c⁄° 
RSA
 *
rß
));

497 (*
RSA_mëh_gë_keygí
(c⁄° 
RSA_METHOD
 *
mëh
))

498 (
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

499 
RSA_mëh_£t_keygí
(
RSA_METHOD
 *
rß
,

500 (*
keygí
Ë(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
,

501 
BN_GENCB
 *
cb
));

502 (*
RSA_mëh_gë_mu…i_¥ime_keygí
(c⁄° 
RSA_METHOD
 *
mëh
))

503 (
RSA
 *
rß
, 
bôs
, 
¥imes
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

504 
RSA_mëh_£t_mu…i_¥ime_keygí
(
RSA_METHOD
 *
mëh
,

505 (*
keygí
Ë(
RSA
 *
rß
, 
bôs
,

506 
¥imes
, 
BIGNUM
 *
e
,

507 
BN_GENCB
 *
cb
));

509 #ifde‡ 
__˝lu•lus


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

99 
	#PTHREAD_MUTEX_INITIALIZER
 \

100 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

101 #ifde‡
__USE_GNU


102 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

104 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

106 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

107 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


127 #i‡
__WORDSIZE
 == 64

128 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

133 
	#PTHREAD_RWLOCK_INITIALIZER
 \

134 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

135 #ifde‡
__USE_GNU


136 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

139 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

141 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


142 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

143 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

144 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

146 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

147 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

148 0 } }

	)

158 
	mPTHREAD_INHERIT_SCHED
,

159 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

160 
	mPTHREAD_EXPLICIT_SCHED


161 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

168 
	mPTHREAD_SCOPE_SYSTEM
,

169 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

170 
	mPTHREAD_SCOPE_PROCESS


171 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

178 
	mPTHREAD_PROCESS_PRIVATE
,

179 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

180 
	mPTHREAD_PROCESS_SHARED


181 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

187 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

191 
	s_±hªad_˛ónup_buf„r


193 (*
	m__routöe
) (*);

194 *
	m__¨g
;

195 
	m__ˇn˚…y≥
;

196 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

202 
	mPTHREAD_CANCEL_ENABLE
,

203 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

204 
	mPTHREAD_CANCEL_DISABLE


205 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

209 
	mPTHREAD_CANCEL_DEFERRED
,

210 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

211 
	mPTHREAD_CANCEL_ASYNCHRONOUS


212 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

214 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

218 
	#PTHREAD_ONCE_INIT
 0

	)

221 #ifde‡
__USE_XOPEN2K


225 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

229 
__BEGIN_DECLS


234 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

235 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

236 *(*
__°¨t_routöe
) (*),

237 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

243 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

251 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

253 #ifde‡
__USE_GNU


256 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

264 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

265 c⁄° 
time•ec
 *
__ab°ime
);

272 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

276 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

279 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

280 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

288 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

296 *
__dëach°©e
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

300 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

301 
__dëach°©e
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

306 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

307 
size_t
 *
__gu¨dsize
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

311 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

312 
size_t
 
__gu¨dsize
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1));

317 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

318 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 c⁄° 
sched_∑øm
 *
__ª°ri˘


324 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


337 
__©å
, *
__ª°ri˘
 
__öhîô
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

341 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

342 
__öhîô
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

348 *
__ª°ri˘
 
__sc›e
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

352 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

356 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


357 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

358 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

364 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

365 *
__°ackaddr
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

369 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


370 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

376 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

377 
size_t
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1));

380 #ifde‡
__USE_XOPEN2K


382 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

383 **
__ª°ri˘
 
__°ackaddr
,

384 
size_t
 *
__ª°ri˘
 
__°acksize
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

390 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

391 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

394 #ifde‡
__USE_GNU


397 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 c⁄° 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

405 
size_t
 
__˝u£tsize
,

406 
˝u_£t_t
 *
__˝u£t
)

407 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

410 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

415 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

416 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2));

430 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

431 c⁄° 
sched_∑øm
 *
__∑øm
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

436 *
__ª°ri˘
 
__pﬁicy
,

437 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

441 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

442 
__THROW
;

445 #ifde‡
__USE_GNU


447 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

448 
size_t
 
__buÊí
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

452 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

457 #ifde‡
__USE_UNIX98


459 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

462 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

465 #ifde‡
__USE_GNU


470 
	$±hªad_yõld
 (Ë
__THROW
;

475 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

476 c⁄° 
˝u_£t_t
 *
__˝u£t
)

477 
__THROW
 
	`__n⁄nuŒ
 ((3));

480 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

481 
˝u_£t_t
 *
__˝u£t
)

482 
__THROW
 
	`__n⁄nuŒ
 ((3));

495 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

496 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

507 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

511 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

514 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

519 
	`±hªad_ã°ˇn˚l
 ();

528 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

529 
__mask_was_ßved
;

530 } 
__ˇn˚l_jmp_buf
[1];

531 *
__∑d
[4];

532 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

535 #i‚de‡
__˛ónup_f˘_©åibuã


536 
	#__˛ónup_f˘_©åibuã


	)

541 
	s__±hªad_˛ónup_‰ame


543 (*
__ˇn˚l_routöe
) (*);

544 *
__ˇn˚l_¨g
;

545 
__do_ô
;

546 
__ˇn˚l_ty≥
;

549 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


550 #ifde‡
__˝lu•lus


552 ˛as†
	c__±hªad_˛ónup_˛ass


554 (*
__ˇn˚l_routöe
) (*);

555 *
__ˇn˚l_¨g
;

556 
__do_ô
;

557 
__ˇn˚l_ty≥
;

559 
public
:

560 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

561 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

562 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

563 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

564 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

565 &
__ˇn˚l_ty≥
); 
	}
}

566 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

576 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

578 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

582 
	#±hªad_˛ónup_p›
(
execuã
) \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

586 #ifde‡
__USE_GNU


590 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

592 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

593 
__˛‰ame
.
	`__de„r
 ()

	)

598 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

599 
__˛‰ame
.
	`__ª°‹e
 (); \

600 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

601 } 0)

	)

608 
__exã∫_ölöe
 

609 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

611 i‡(
__‰ame
->
__do_ô
)

612 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

613 
	}
}

622 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 };

	)

631 
	#±hªad_˛ónup_p›
(
execuã
) \

632 
__˛‰ame
.
__do_ô
 = (
execuã
); \

633 } 0)

	)

635 #ifde‡
__USE_GNU


639 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

641 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

642 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

643 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

644 .
__do_ô
 = 1 }; \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

646 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

651 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

652 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

653 
__˛‰ame
.
__do_ô
 = (
execuã
); \

654 } 0)

	)

665 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

667 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

668 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

669 *
__ˇn˚l_¨g
 = (
¨g
); \

670 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

671 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

672 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

679 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 dÿ{

	)

681 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

682 
__˛ónup_f˘_©åibuã
;

686 
	#±hªad_˛ónup_p›
(
execuã
) \

689 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 i‡(
execuã
) \

691 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

692 } 0)

	)

693 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

694 
__˛ónup_f˘_©åibuã
;

696 #ifde‡
__USE_GNU


700 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

702 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

703 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

704 *
__ˇn˚l_¨g
 = (
¨g
); \

705 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

706 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

707 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

709 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

710 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

714 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

715 dÿ{

	)

716 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

717 
__˛ónup_f˘_©åibuã
;

722 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

725 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

726 i‡(
execuã
) \

727 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

728 
	}
} 0)

	)

729 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

730 
__˛ónup_f˘_©åibuã
;

734 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

735 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

736 #i‚de‡
SHARED


737 
	`__©åibuã__
 ((
__wók__
))

743 
__jmp_buf_èg
;

744 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

750 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

751 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

752 
__THROW
 
	`__n⁄nuŒ
 ((1));

755 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1));

759 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

760 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

763 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

764 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

766 #ifde‡
__USE_XOPEN2K


768 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 c⁄° 
time•ec
 *
__ª°ri˘


770 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

774 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

775 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

779 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

780 
__ª°ri˘
 
__muãx
,

781 *
__ª°ri˘
 
__¥io˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

786 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

787 
__¥io˚ûög
,

788 *
__ª°ri˘
 
__ﬁd_˚ûög
)

789 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

792 #ifde‡
__USE_XOPEN2K8


794 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

796 #ifde‡
__USE_GNU


797 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

811 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

816 
__ª°ri˘
 
__©å
,

817 *
__ª°ri˘
 
__psh¨ed
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

821 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

822 
__psh¨ed
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


827 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


828 
__©å
, *
__ª°ri˘
 
__köd
)

829 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

834 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

840 
__ª°ri˘
 
__©å
,

841 *
__ª°ri˘
 
__¥Ÿocﬁ
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

846 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

847 
__¥Ÿocﬁ
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

852 
__ª°ri˘
 
__©å
,

853 *
__ª°ri˘
 
__¥io˚ûög
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

857 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

858 
__¥io˚ûög
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 #ifde‡
__USE_XOPEN2K


863 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

864 *
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

868 *
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

873 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

874 
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

878 
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


889 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


891 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

899 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

908 c⁄° 
time•ec
 *
__ª°ri˘


909 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

914 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

917 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

918 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

920 #ifde‡
__USE_XOPEN2K


922 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

923 c⁄° 
time•ec
 *
__ª°ri˘


924 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

928 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

929 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1));

943 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

944 
__ª°ri˘
 
__©å
,

945 *
__ª°ri˘
 
__psh¨ed
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

949 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

950 
__psh¨ed
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

955 
__ª°ri˘
 
__©å
,

956 *
__ª°ri˘
 
__¥ef
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

961 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

970 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROW
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

982 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

983 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

990 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

991 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

992 
	`__n⁄nuŒ
 ((1, 2));

1001 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1002 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1003 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1004 
	`__n⁄nuŒ
 ((1, 2, 3));

1009 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1));

1013 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1018 
__ª°ri˘
 
__©å
,

1019 *
__ª°ri˘
 
__psh¨ed
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1023 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1024 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1026 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__˛ockid_t
 
__˛ock_id
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 #ifde‡
__USE_XOPEN2K


1045 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1049 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1050 
__THROW
 
	`__n⁄nuŒ
 ((1));

1053 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1054 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1057 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1058 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1061 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1062 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1070 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1071 
__©å
, 
__cou¡
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1076 
__THROW
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1080 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1084 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1));

1088 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1093 
__ª°ri˘
 
__©å
,

1094 *
__ª°ri˘
 
__psh¨ed
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1098 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1099 
__psh¨ed
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1113 (*
__de°r_fun˘i⁄
) (*))

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1120 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1123 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1124 c⁄° *
__poöãr
Ë
__THROW
 ;

1127 #ifde‡
__USE_XOPEN2K


1129 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1130 
__˛ockid_t
 *
__˛ock_id
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((2));

1146 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1147 (*
__∑ª¡
) (),

1148 (*
__chûd
Ë()Ë
__THROW
;

1151 #ifde‡
__USE_EXTERN_INLINES


1153 
__exã∫_ölöe
 

1154 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1156  
__thªad1
 =
__thªad2
;

1157 
	}
}

1160 
	g__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

373 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

402 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

403 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

404 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

405 #ifde‡
__REDIRECT


409 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

410 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_fsˇnf
Ë
__wur
;

412 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

413 
__isoc99_sˇnf
Ë
__wur
;

414 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

415 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

416 
__isoc99_ssˇnf
);

418 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

419 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

420 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

422 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

423 
	#fsˇnf
 
__isoc99_fsˇnf


	)

424 
	#sˇnf
 
__isoc99_sˇnf


	)

425 
	#ssˇnf
 
__isoc99_ssˇnf


	)

429 #ifdef 
__USE_ISOC99


434 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

435 
__gnuc_va_li°
 
__¨g
)

436 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

442 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

443 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

446 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

448 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

450 #i‡!
deföed
 
__USE_GNU
 \

451 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

452 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

453 #ifde‡
__REDIRECT


457 
	`__REDIRECT
 (
vfsˇnf
,

458 (
FILE
 *
__ª°ri˘
 
__s
,

459 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

460 
__isoc99_vfsˇnf
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

462 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

463 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

464 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	`__REDIRECT_NTH
 (
vssˇnf
,

466 (c⁄° *
__ª°ri˘
 
__s
,

467 c⁄° *
__ª°ri˘
 
__f‹m©
,

468 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

469 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

471 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
,

473 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

474 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

475 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

476 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

477 c⁄° *
__ª°ri˘
 
__f‹m©
,

478 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

479 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

480 
	#vsˇnf
 
__isoc99_vsˇnf


	)

481 
	#vssˇnf
 
__isoc99_vssˇnf


	)

491 
	`fgëc
 (
FILE
 *
__°ªam
);

492 
	`gëc
 (
FILE
 *
__°ªam
);

498 
	`gëch¨
 ();

500 #ifde‡
__USE_POSIX199506


505 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

506 
	`gëch¨_u∆ocked
 ();

509 #ifde‡
__USE_MISC


516 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

527 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

534 
	`putch¨
 (
__c
);

536 #ifde‡
__USE_MISC


543 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 #ifde‡
__USE_POSIX199506


551 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

552 
	`putch¨_u∆ocked
 (
__c
);

556 #i‡
deföed
 
__USE_MISC
 \

557 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

559 
	`gëw
 (
FILE
 *
__°ªam
);

562 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

570 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

571 
__wur
;

573 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

583 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

586 #ifde‡
__USE_GNU


593 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

594 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

598 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

609 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

610 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

611 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

612 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

613 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

614 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

622 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

623 
size_t
 *
__ª°ri˘
 
__n
,

624 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

632 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

638 
	`puts
 (c⁄° *
__s
);

645 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

652 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

658 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

659 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

661 #ifde‡
__USE_GNU


668 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
);

672 #ifde‡
__USE_MISC


679 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

680 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

690 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

695 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

700 
	`ªwöd
 (
FILE
 *
__°ªam
);

707 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


708 #i‚de‡
__USE_FILE_OFFSET64


713 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

718 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

720 #ifde‡
__REDIRECT


721 
	`__REDIRECT
 (
f£eko
,

722 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

723 
f£eko64
);

724 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

726 
	#f£eko
 
f£eko64


	)

727 
	#·ñlo
 
·ñlo64


	)

732 #i‚de‡
__USE_FILE_OFFSET64


737 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

742 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

746 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

747 
	`__REDIRECT
 (
f£ços
,

748 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

750 
	#fgëpos
 
fgëpos64


	)

751 
	#f£ços
 
f£ços64


	)

755 #ifde‡
__USE_LARGEFILE64


756 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

757 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

758 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

759 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

763 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

765 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

769 #ifde‡
__USE_MISC


771 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

772 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

773 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

781 
	`≥º‹
 (c⁄° *
__s
);

787 
	~<bôs/sys_îæi°.h
>

790 #ifdef 
__USE_POSIX


792 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_MISC


797 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

801 #ifde‡
__USE_POSIX2


806 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

812 
	`p˛o£
 (
FILE
 *
__°ªam
);

816 #ifdef 
__USE_POSIX


818 *
	$˘îmid
 (*
__s
Ë
__THROW
;

822 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


824 *
	`cu£rid
 (*
__s
);

828 #ifdef 
__USE_GNU


829 
ob°ack
;

832 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

833 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

834 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

835 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

836 c⁄° *
__ª°ri˘
 
__f‹m©
,

837 
__gnuc_va_li°
 
__¨gs
)

838 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

842 #ifde‡
__USE_POSIX199506


846 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

853 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

856 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


859 
	~<bôs/gë›t_posix.h
>

864 
	`__uÊow
 (
FILE
 *);

865 
	`__ovîÊow
 (
FILE
 *, );

869 #ifde‡
__USE_EXTERN_INLINES


870 
	~<bôs/°dio.h
>

872 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


873 
	~<bôs/°dio2.h
>

875 #ifde‡
__LDBL_COMPAT


876 
	~<bôs/°dio-ldbl.h
>

879 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

963 #ifde‡
__USE_XOPEN2KXSI


965 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

968 #ifde‡
__USE_XOPEN_EXTENDED


973 
	$gø¡±
 (
__fd
Ë
__THROW
;

977 
	$u∆ock±
 (
__fd
Ë
__THROW
;

982 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

985 #ifde‡
__USE_GNU


989 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

990 
__THROW
 
	`__n⁄nuŒ
 ((2));

993 
	`gë±
 ();

996 #ifde‡
__USE_MISC


1000 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1001 
__THROW
 
	`__n⁄nuŒ
 ((1));

1004 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1007 
	$ây¶Ÿ
 (Ë
__THROW
;

1010 
	~<bôs/°dlib-Êﬂt.h
>

1013 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1014 
	~<bôs/°dlib.h
>

1016 #ifde‡
__LDBL_COMPAT


1017 
	~<bôs/°dlib-ldbl.h
>

1020 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<bôs/ty≥s/°ru˘_iovec.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

33 
	~<bôs/sockë.h
>

35 #ifde‡
__USE_MISC


36 
	~<bôs/ty≥s/°ru˘_osockaddr.h
>

43 
	mSHUT_RD
 = 0,

44 
	#SHUT_RD
 
SHUT_RD


	)

45 
	mSHUT_WR
,

46 
	#SHUT_WR
 
SHUT_WR


	)

47 
	mSHUT_RDWR


48 
	#SHUT_RDWR
 
SHUT_RDWR


	)

57 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


58 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

59 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

63 
	#__SOCKADDR_ALLTYPES
 \

64 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

65 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

66 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

67 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

68 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

69 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

70 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

71 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

78 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

79 uni⁄ { 
	m__SOCKADDR_ALLTYPES


80 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

81 #unde‡
__SOCKADDR_ONETYPE


82 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

83 uni⁄ { 
	m__SOCKADDR_ALLTYPES


84 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

85 #unde‡
__SOCKADDR_ONETYPE


88 #ifde‡
__USE_GNU


90 
	smmsghdr


92 
msghdr
 
	mmsg_hdr
;

93 
	mmsg_Àn
;

102 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

108 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

109 
__fds
[2]Ë
__THROW
;

112 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

113 
__THROW
;

116 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

117 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

126 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

130 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

131 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

138 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

145 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

152 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

153 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

154 
sockÀn_t
 
__addr_Àn
);

163 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

173 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

174 
__Êags
);

176 #ifde‡
__USE_GNU


182 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

183 
__vÀn
, 
__Êags
);

191 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

193 #ifde‡
__USE_GNU


199 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

200 
__vÀn
, 
__Êags
,

201 
time•ec
 *
__tmo
);

208 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

209 *
__ª°ri˘
 
__›tvÆ
,

210 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

215 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

216 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

222 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

232 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

233 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

235 #ifde‡
__USE_GNU


240 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

241 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

250 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

253 #ifde‡
__USE_XOPEN2K


255 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

259 #ifde‡
__USE_MISC


263 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

268 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


269 
	~<bôs/sockë2.h
>

272 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #ifde‡
__USE_XOPEN2K8


30 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 
	~<bôs/ty≥s/time_t.h
>

39 #i‚de‡
__dev_t_deföed


40 
__dev_t
 
	tdev_t
;

41 
	#__dev_t_deföed


	)

44 #i‚de‡
__gid_t_deföed


45 
__gid_t
 
	tgid_t
;

46 
	#__gid_t_deföed


	)

49 #i‚de‡
__öo_t_deföed


50 #i‚de‡
__USE_FILE_OFFSET64


51 
__öo_t
 
	töo_t
;

53 
__öo64_t
 
	töo_t
;

55 
	#__öo_t_deföed


	)

58 #i‚de‡
__mode_t_deföed


59 
__mode_t
 
	tmode_t
;

60 
	#__mode_t_deföed


	)

63 #i‚de‡
__∆ök_t_deföed


64 
__∆ök_t
 
	t∆ök_t
;

65 
	#__∆ök_t_deföed


	)

68 #i‚de‡
__off_t_deföed


69 #i‚de‡
__USE_FILE_OFFSET64


70 
__off_t
 
	toff_t
;

72 
__off64_t
 
	toff_t
;

74 
	#__off_t_deföed


	)

77 #i‚de‡
__uid_t_deföed


78 
__uid_t
 
	tuid_t
;

79 
	#__uid_t_deföed


	)

83 #ifde‡
__USE_UNIX98


84 #i‚de‡
__blk˙t_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__blk˙t_t
 
	tblk˙t_t
;

88 
__blk˙t64_t
 
	tblk˙t_t
;

90 
	#__blk˙t_t_deföed


	)

93 #i‚de‡
__blksize_t_deföed


94 
__blksize_t
 
	tblksize_t
;

95 
	#__blksize_t_deföed


	)

99 
	g__BEGIN_DECLS


101 
	~<bôs/°©.h
>

103 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


104 
	#S_IFMT
 
__S_IFMT


	)

105 
	#S_IFDIR
 
__S_IFDIR


	)

106 
	#S_IFCHR
 
__S_IFCHR


	)

107 
	#S_IFBLK
 
__S_IFBLK


	)

108 
	#S_IFREG
 
__S_IFREG


	)

109 #ifde‡
__S_IFIFO


110 
	#S_IFIFO
 
__S_IFIFO


	)

112 #ifde‡
__S_IFLNK


113 
	#S_IFLNK
 
__S_IFLNK


	)

115 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
) \

116 && 
deföed
 
	g__S_IFSOCK


117 
	#S_IFSOCK
 
__S_IFSOCK


	)

123 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

125 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

126 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

127 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

128 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

129 #ifde‡
__S_IFIFO


130 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

132 #ifde‡
__S_IFLNK


133 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

136 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë0

	)

140 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K
) \

141 && 
deföed
 
	g__S_IFSOCK


142 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

143 #ñi‡
deföed
 
__USE_XOPEN2K


144 
	#S_ISSOCK
(
mode
Ë0

	)

151 #ifdef 
__USE_POSIX199309


152 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

153 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

154 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

160 
	#S_ISUID
 
__S_ISUID


	)

161 
	#S_ISGID
 
__S_ISGID


	)

163 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


165 
	#S_ISVTX
 
__S_ISVTX


	)

168 
	#S_IRUSR
 
__S_IREAD


	)

169 
	#S_IWUSR
 
__S_IWRITE


	)

170 
	#S_IXUSR
 
__S_IEXEC


	)

172 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

174 #ifde‡
__USE_MISC


175 
	#S_IREAD
 
S_IRUSR


	)

176 
	#S_IWRITE
 
S_IWUSR


	)

177 
	#S_IEXEC
 
S_IXUSR


	)

180 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

181 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

182 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

184 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

186 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

187 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

188 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

190 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

193 #ifdef 
__USE_MISC


195 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

196 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

197 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

199 
	#S_BLKSIZE
 512

	)

203 #i‚de‡
__USE_FILE_OFFSET64


205 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

206 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

210 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

212 #ifde‡
__REDIRECT_NTH


213 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

214 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

215 
	`__n⁄nuŒ
 ((1, 2));

216 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

217 
	`__n⁄nuŒ
 ((2));

219 
	#°©
 
°©64


	)

220 
	#f°©
 
f°©64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

225 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

226 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

229 #ifde‡
__USE_ATFILE


233 #i‚de‡
__USE_FILE_OFFSET64


234 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

235 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

236 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

238 #ifde‡
__REDIRECT_NTH


239 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
,

241 
__Êag
),

242 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

244 
	#f°©©
 
f°©©64


	)

248 #ifde‡
__USE_LARGEFILE64


249 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

250 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

251 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

255 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


256 #i‚de‡
__USE_FILE_OFFSET64


259 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

260 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT_NTH


263 
	`__REDIRECT_NTH
 (
l°©
,

264 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

266 
	`__n⁄nuŒ
 ((1, 2));

268 
	#l°©
 
l°©64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

273 
°©64
 *
__ª°ri˘
 
__buf
)

274 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

280 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 #ifde‡
__USE_MISC


287 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


293 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

296 #ifde‡
__USE_ATFILE


299 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

300 
__Êag
)

301 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

308 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

310 #ifdef 
__USE_GNU


313 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

317 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

320 #ifde‡
__USE_ATFILE


324 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

325 
__THROW
 
	`__n⁄nuŒ
 ((2));

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


332 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 #ifde‡
__USE_ATFILE


339 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

340 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 #ifde‡
__USE_ATFILE


353 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

354 
__THROW
 
	`__n⁄nuŒ
 ((2));

357 #ifde‡
__USE_ATFILE


360 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

361 c⁄° 
time•ec
 
__times
[2],

362 
__Êags
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 #ifde‡
__USE_XOPEN2K8


368 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

386 #i‚de‡
_STAT_VER


387 
	#_STAT_VER
 0

	)

389 #i‚de‡
_MKNOD_VER


390 
	#_MKNOD_VER
 0

	)

394 #i‚de‡
__USE_FILE_OFFSET64


395 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

396 
__THROW
 
	`__n⁄nuŒ
 ((3));

397 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

398 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

399 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

400 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

401 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
, 
__Êag
)

403 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

405 #ifde‡
__REDIRECT_NTH


406 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

407 
°©
 *
__°©_buf
), 
__fx°©64
)

408 
	`__n⁄nuŒ
 ((3));

409 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

410 
°©
 *
__°©_buf
), 
__x°©64
)

411 
	`__n⁄nuŒ
 ((2, 3));

412 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__lx°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

416 c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
, 
__Êag
),

418 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

421 
	#__fx°©
 
__fx°©64


	)

422 
	#__x°©
 
__x°©64


	)

423 
	#__lx°©
 
__lx°©64


	)

427 #ifde‡
__USE_LARGEFILE64


428 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

429 
__THROW
 
	`__n⁄nuŒ
 ((3));

430 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

431 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

432 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

433 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
, 
__Êag
)

436 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

438 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

439 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

441 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

442 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

443 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

445 #ifde‡
__USE_GNU


446 
	~<bôs/°©x.h
>

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #ifde‡
__USE_MISC


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/time_t.h
>

25 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

27 #i‚de‡
__su£c⁄ds_t_deföed


28 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

29 
	#__su£c⁄ds_t_deföed


	)

32 
	~<sys/£À˘.h
>

34 
	g__BEGIN_DECLS


36 #ifde‡
__USE_GNU


38 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

39 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

40 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

41 }

	)

42 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

43 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

44 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

45 }

	)

49 #ifde‡
__USE_MISC


52 
	stimez⁄e


54 
	mtz_möuãswe°
;

55 
	mtz_d°time
;

58 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

60 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

68 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

69 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

71 #ifde‡
__USE_MISC


74 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

75 c⁄° 
timez⁄e
 *
__tz
)

76 
__THROW
;

82 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

83 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

88 
	e__ôimî_which


91 
ITIMER_REAL
 = 0,

92 
	#ITIMER_REAL
 
ITIMER_REAL


	)

94 
ITIMER_VIRTUAL
 = 1,

95 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

98 
ITIMER_PROF
 = 2

99 
	#ITIMER_PROF
 
ITIMER_PROF


	)

104 
	sôimîvÆ


107 
timevÆ
 
ô_öãrvÆ
;

109 
timevÆ
 
ô_vÆue
;

112 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


115 
__ôimî_which
 
	t__ôimî_which_t
;

117 
	t__ôimî_which_t
;

122 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

123 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

128 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

129 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

130 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

135 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_MISC


140 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

144 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

147 #ifde‡
__USE_GNU


151 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

152 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

156 #ifde‡
__USE_MISC


159 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

160 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

161 
	#timîcmp
(
a
, 
b
, 
CMP
) \

162 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

163 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

164 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

165 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

167 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

168 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

169 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

171 ++(
ªsu…
)->
tv_£c
; \

172 (
ªsu…
)->
tv_u£c
 -= 1000000; \

174 
	}
} 0)

	)

175 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

177 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

178 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

179 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

180 --(
ªsu…
)->
tv_£c
; \

181 (
ªsu…
)->
tv_u£c
 += 1000000; \

183 } 0)

	)

186 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

42 
__loff_t
 
	tloff_t
;

45 #i‚de‡
__öo_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__öo_t
 
	töo_t
;

49 
__öo64_t
 
	töo_t
;

51 
	#__öo_t_deföed


	)

53 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


54 
__öo64_t
 
	töo64_t
;

55 
	#__öo64_t_deföed


	)

58 #i‚de‡
__dev_t_deföed


59 
__dev_t
 
	tdev_t
;

60 
	#__dev_t_deföed


	)

63 #i‚de‡
__gid_t_deföed


64 
__gid_t
 
	tgid_t
;

65 
	#__gid_t_deföed


	)

68 #i‚de‡
__mode_t_deföed


69 
__mode_t
 
	tmode_t
;

70 
	#__mode_t_deföed


	)

73 #i‚de‡
__∆ök_t_deföed


74 
__∆ök_t
 
	t∆ök_t
;

75 
	#__∆ök_t_deföed


	)

78 #i‚de‡
__uid_t_deföed


79 
__uid_t
 
	tuid_t
;

80 
	#__uid_t_deföed


	)

83 #i‚de‡
__off_t_deföed


84 #i‚de‡
__USE_FILE_OFFSET64


85 
__off_t
 
	toff_t
;

87 
__off64_t
 
	toff_t
;

89 
	#__off_t_deföed


	)

91 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


92 
__off64_t
 
	toff64_t
;

93 
	#__off64_t_deföed


	)

96 #i‚de‡
__pid_t_deföed


97 
__pid_t
 
	tpid_t
;

98 
	#__pid_t_deföed


	)

101 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

102 && !
deföed
 
__id_t_deföed


103 
__id_t
 
	tid_t
;

104 
	#__id_t_deföed


	)

107 #i‚de‡
__ssize_t_deföed


108 
__ssize_t
 
	tssize_t
;

109 
	#__ssize_t_deföed


	)

112 #ifdef 
__USE_MISC


113 #i‚de‡
__daddr_t_deföed


114 
__daddr_t
 
	tdaddr_t
;

115 
__ˇddr_t
 
	tˇddr_t
;

116 
	#__daddr_t_deföed


	)

120 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


121 
__key_t
 
	tkey_t
;

122 
	#__key_t_deföed


	)

125 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


126 
	~<bôs/ty≥s/˛ock_t.h
>

128 
	~<bôs/ty≥s/˛ockid_t.h
>

129 
	~<bôs/ty≥s/time_t.h
>

130 
	~<bôs/ty≥s/timî_t.h
>

132 #ifde‡
__USE_XOPEN


133 #i‚de‡
__u£c⁄ds_t_deföed


134 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

135 
	#__u£c⁄ds_t_deföed


	)

137 #i‚de‡
__su£c⁄ds_t_deföed


138 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

139 
	#__su£c⁄ds_t_deföed


	)

143 
	#__√ed_size_t


	)

144 
	~<°ddef.h
>

146 #ifde‡
__USE_MISC


148 
	tul⁄g
;

149 
	tush‹t
;

150 
	tuöt
;

155 
	~<bôs/°döt-öä.h
>

158 
__uöt8_t
 
	tu_öt8_t
;

159 
__uöt16_t
 
	tu_öt16_t
;

160 
__uöt32_t
 
	tu_öt32_t
;

161 
__uöt64_t
 
	tu_öt64_t
;

163 #i‡
__GNUC_PREREQ
 (2, 7)

164 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

166 
	tªgi°î_t
;

171 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 
	~<ídün.h
>

179 
	~<sys/£À˘.h
>

183 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

184 && !
deföed
 
__blksize_t_deföed


185 
__blksize_t
 
	tblksize_t
;

186 
	#__blksize_t_deföed


	)

190 #i‚de‡
__USE_FILE_OFFSET64


191 #i‚de‡
__blk˙t_t_deföed


192 
__blk˙t_t
 
	tblk˙t_t
;

193 
	#__blk˙t_t_deföed


	)

195 #i‚de‡
__fsblk˙t_t_deföed


196 
__fsblk˙t_t
 
	tfsblk˙t_t
;

197 
	#__fsblk˙t_t_deföed


	)

199 #i‚de‡
__fsfû˙t_t_deföed


200 
__fsfû˙t_t
 
	tfsfû˙t_t
;

201 
	#__fsfû˙t_t_deföed


	)

204 #i‚de‡
__blk˙t_t_deföed


205 
__blk˙t64_t
 
	tblk˙t_t
;

206 
	#__blk˙t_t_deföed


	)

208 #i‚de‡
__fsblk˙t_t_deföed


209 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

210 
	#__fsblk˙t_t_deföed


	)

212 #i‚de‡
__fsfû˙t_t_deföed


213 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

214 
	#__fsfû˙t_t_deföed


	)

218 #ifde‡
__USE_LARGEFILE64


219 
__blk˙t64_t
 
	tblk˙t64_t
;

220 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

221 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

226 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


227 
	~<bôs/±hªadty≥s.h
>

230 
	g__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #ifde‡
__USE_POSIX


128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #ifde‡
__USE_POSIX


149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

178 #ifde‡
__USE_MISC


181 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

187 
	#__i¶óp
(
yór
) \

188 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

191 #ifde‡
__USE_MISC


196 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

199 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

202 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

206 #ifde‡
__USE_POSIX199309


211 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

212 
time•ec
 *
__ªmaöög
);

216 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

219 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

222 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

223 
__THROW
;

225 #ifde‡
__USE_XOPEN2K


230 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

231 c⁄° 
time•ec
 *
__ªq
,

232 
time•ec
 *
__ªm
);

235 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

240 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

241 
sigevít
 *
__ª°ri˘
 
__evp
,

242 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

245 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

248 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

249 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

250 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

253 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

254 
__THROW
;

257 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

261 #ifde‡
__USE_ISOC11


263 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #ifde‡
__USE_XOPEN_EXTENDED


280 
gëd©e_îr
;

289 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

292 #ifde‡
__USE_GNU


303 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

304 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

307 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1169 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((
__uöt16_t
Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

33 
__ölöe
 
__uöt16_t


34 
	$__bsw≠_16
 (
__uöt16_t
 
__bsx
)

36 #i‡
	`__GNUC_PREREQ
 (4, 8)

37  
	`__buûtö_bsw≠16
 (
__bsx
);

39  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

41 
	}
}

44 
	#__bsw≠_c⁄°™t_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
Ë& 0x0000ff00uË<< 8Ë| (((xË& 0x000000ffuË<< 24))

	)

48 
__ölöe
 
__uöt32_t


49 
	$__bsw≠_32
 (
__uöt32_t
 
__bsx
)

51 #i‡
	`__GNUC_PREREQ
 (4, 3)

52  
	`__buûtö_bsw≠32
 (
__bsx
);

54  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

56 
	}
}

59 
	#__bsw≠_c⁄°™t_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

69 
__exãnsi⁄__
 
__ölöe
 
__uöt64_t


70 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

72 #i‡
	`__GNUC_PREREQ
 (4, 3)

73  
	`__buûtö_bsw≠64
 (
__bsx
);

75  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #i‚de‡
_BITS_ERRNO_H


20 
	#_BITS_ERRNO_H
 1

	)

22 #i‡!
deföed
 
_ERRNO_H


26 
	~<löux/î∫o.h
>

29 #i‚de‡
ENOTSUP


30 
	#ENOTSUP
 
EOPNOTSUPP


	)

33 #i‚de‡
ECANCELED


34 
	#ECANCELED
 125

	)

37 #i‚de‡
EOWNERDEAD


38 
	#EOWNERDEAD
 130

	)

41 #i‚de‡
ENOTRECOVERABLE


42 
	#ENOTRECOVERABLE
 131

	)

45 #i‚de‡
ERFKILL


46 
	#ERFKILL
 132

	)

49 #i‚de‡
EHWPOISON


50 
	#EHWPOISON
 133

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	$__GNUC_PREREQ
 (4, 4)))

32 
	#__HAVE_FLOAT128
 1

	)

34 
	#__HAVE_FLOAT128
 0

	)

39 #i‡
__HAVE_FLOAT128


40 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

48 
	#__HAVE_FLOAT64X
 1

	)

54 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

56 #i‚de‡
__ASSEMBLER__


60 #i‡
__HAVE_FLOAT128


61 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


63 
	#__f128
(
x
Ëx##
q


	)

65 
	#__f128
(
x
Ëx##
f128


	)

70 #i‡
__HAVE_FLOAT128


71 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


74 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

75 
	#__CFLOAT128
 
__cÊﬂt128


	)

77 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

82 #i‡
__HAVE_FLOAT128


85 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


86 
__Êﬂt128
 
	t_Flﬂt128
;

90 #i‡!
	`__GNUC_PREREQ
 (7, 0)

91 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

99 #i‡!
	`__GNUC_PREREQ
 (7, 0)

100 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

101 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

102 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

103 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

104 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

111 #i‡!
	`__GNUC_PREREQ
 (6, 0)

112 
	#__buûtö_signbôf128
 
__signbôf128


	)

119 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


32 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 \

33 || 
deföed
 
	g_UAPI_IPV6_H
 \

34 || 
deföed
 
	g_LINUX_IN6_H
 \

35 || 
deföed
 
	g_IPV6_H


39 
	#__USE_KERNEL_IPV6_DEFS
 1

	)

41 
	#__USE_KERNEL_IPV6_DEFS
 0

	)

47 
	#IP_OPTIONS
 4

	)

48 
	#IP_HDRINCL
 3

	)

49 
	#IP_TOS
 1

	)

50 
	#IP_TTL
 2

	)

51 
	#IP_RECVOPTS
 6

	)

53 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

54 
	#IP_RETOPTS
 7

	)

55 
	#IP_MULTICAST_IF
 32

	)

56 
	#IP_MULTICAST_TTL
 33

	)

57 
	#IP_MULTICAST_LOOP
 34

	)

58 
	#IP_ADD_MEMBERSHIP
 35

	)

59 
	#IP_DROP_MEMBERSHIP
 36

	)

60 
	#IP_UNBLOCK_SOURCE
 37

	)

61 
	#IP_BLOCK_SOURCE
 38

	)

62 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

63 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

64 
	#IP_MSFILTER
 41

	)

65 #ifde‡
__USE_MISC


66 
	#MCAST_JOIN_GROUP
 42

	)

67 
	#MCAST_BLOCK_SOURCE
 43

	)

68 
	#MCAST_UNBLOCK_SOURCE
 44

	)

69 
	#MCAST_LEAVE_GROUP
 45

	)

70 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

71 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

72 
	#MCAST_MSFILTER
 48

	)

73 
	#IP_MULTICAST_ALL
 49

	)

74 
	#IP_UNICAST_IF
 50

	)

76 
	#MCAST_EXCLUDE
 0

	)

77 
	#MCAST_INCLUDE
 1

	)

80 
	#IP_ROUTER_ALERT
 5

	)

81 
	#IP_PKTINFO
 8

	)

82 
	#IP_PKTOPTIONS
 9

	)

83 
	#IP_PMTUDISC
 10

	)

84 
	#IP_MTU_DISCOVER
 10

	)

85 
	#IP_RECVERR
 11

	)

86 
	#IP_RECVTTL
 12

	)

87 
	#IP_RECVTOS
 13

	)

88 
	#IP_MTU
 14

	)

89 
	#IP_FREEBIND
 15

	)

90 
	#IP_IPSEC_POLICY
 16

	)

91 
	#IP_XFRM_POLICY
 17

	)

92 
	#IP_PASSSEC
 18

	)

93 
	#IP_TRANSPARENT
 19

	)

94 
	#IP_MULTICAST_ALL
 49

	)

97 
	#IP_ORIGDSTADDR
 20

	)

98 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

100 
	#IP_MINTTL
 21

	)

101 
	#IP_NODEFRAG
 22

	)

102 
	#IP_CHECKSUM
 23

	)

103 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

104 
	#IP_RECVFRAGSIZE
 25

	)

107 
	#IP_PMTUDISC_DONT
 0

	)

108 
	#IP_PMTUDISC_WANT
 1

	)

109 
	#IP_PMTUDISC_DO
 2

	)

110 
	#IP_PMTUDISC_PROBE
 3

	)

114 
	#IP_PMTUDISC_INTERFACE
 4

	)

116 
	#IP_PMTUDISC_OMIT
 5

	)

118 
	#IP_MULTICAST_IF
 32

	)

119 
	#IP_MULTICAST_TTL
 33

	)

120 
	#IP_MULTICAST_LOOP
 34

	)

121 
	#IP_ADD_MEMBERSHIP
 35

	)

122 
	#IP_DROP_MEMBERSHIP
 36

	)

123 
	#IP_UNBLOCK_SOURCE
 37

	)

124 
	#IP_BLOCK_SOURCE
 38

	)

125 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

126 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

127 
	#IP_MSFILTER
 41

	)

128 
	#IP_MULTICAST_ALL
 49

	)

129 
	#IP_UNICAST_IF
 50

	)

132 
	#SOL_IP
 0

	)

134 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

135 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

136 
	#IP_MAX_MEMBERSHIPS
 20

	)

138 #ifde‡
__USE_MISC


142 
	sù_›ts


144 
ö_addr
 
	mù_d°
;

145 
	mù_›ts
[40];

149 
	sù_mªqn


151 
ö_addr
 
	mimr_mu…üddr
;

152 
ö_addr
 
	mimr_addªss
;

153 
	mimr_ifödex
;

157 
	sö_pktöfo


159 
	mùi_ifödex
;

160 
ö_addr
 
	mùi_•ec_d°
;

161 
ö_addr
 
	mùi_addr
;

168 
	#IPV6_ADDRFORM
 1

	)

169 
	#IPV6_2292PKTINFO
 2

	)

170 
	#IPV6_2292HOPOPTS
 3

	)

171 
	#IPV6_2292DSTOPTS
 4

	)

172 
	#IPV6_2292RTHDR
 5

	)

173 
	#IPV6_2292PKTOPTIONS
 6

	)

174 
	#IPV6_CHECKSUM
 7

	)

175 
	#IPV6_2292HOPLIMIT
 8

	)

177 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

179 
	#IPV6_NEXTHOP
 9

	)

180 
	#IPV6_AUTHHDR
 10

	)

181 
	#IPV6_UNICAST_HOPS
 16

	)

182 
	#IPV6_MULTICAST_IF
 17

	)

183 
	#IPV6_MULTICAST_HOPS
 18

	)

184 
	#IPV6_MULTICAST_LOOP
 19

	)

185 
	#IPV6_JOIN_GROUP
 20

	)

186 
	#IPV6_LEAVE_GROUP
 21

	)

187 
	#IPV6_ROUTER_ALERT
 22

	)

188 
	#IPV6_MTU_DISCOVER
 23

	)

189 
	#IPV6_MTU
 24

	)

190 
	#IPV6_RECVERR
 25

	)

191 
	#IPV6_V6ONLY
 26

	)

192 
	#IPV6_JOIN_ANYCAST
 27

	)

193 
	#IPV6_LEAVE_ANYCAST
 28

	)

194 
	#IPV6_IPSEC_POLICY
 34

	)

195 
	#IPV6_XFRM_POLICY
 35

	)

196 
	#IPV6_HDRINCL
 36

	)

199 
	#IPV6_RECVPKTINFO
 49

	)

200 
	#IPV6_PKTINFO
 50

	)

201 
	#IPV6_RECVHOPLIMIT
 51

	)

202 
	#IPV6_HOPLIMIT
 52

	)

203 
	#IPV6_RECVHOPOPTS
 53

	)

204 
	#IPV6_HOPOPTS
 54

	)

205 
	#IPV6_RTHDRDSTOPTS
 55

	)

206 
	#IPV6_RECVRTHDR
 56

	)

207 
	#IPV6_RTHDR
 57

	)

208 
	#IPV6_RECVDSTOPTS
 58

	)

209 
	#IPV6_DSTOPTS
 59

	)

210 
	#IPV6_RECVPATHMTU
 60

	)

211 
	#IPV6_PATHMTU
 61

	)

212 
	#IPV6_DONTFRAG
 62

	)

215 
	#IPV6_RECVTCLASS
 66

	)

216 
	#IPV6_TCLASS
 67

	)

218 
	#IPV6_AUTOFLOWLABEL
 70

	)

221 
	#IPV6_ADDR_PREFERENCES
 72

	)

224 
	#IPV6_MINHOPCOUNT
 73

	)

226 
	#IPV6_ORIGDSTADDR
 74

	)

227 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

228 
	#IPV6_TRANSPARENT
 75

	)

229 
	#IPV6_UNICAST_IF
 76

	)

230 
	#IPV6_RECVFRAGSIZE
 77

	)

231 
	#IPV6_FREEBIND
 78

	)

234 #i‡!
__USE_KERNEL_IPV6_DEFS


235 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

236 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

238 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

239 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

242 
	#IPV6_PMTUDISC_DONT
 0

	)

243 
	#IPV6_PMTUDISC_WANT
 1

	)

244 
	#IPV6_PMTUDISC_DO
 2

	)

245 
	#IPV6_PMTUDISC_PROBE
 3

	)

246 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

247 
	#IPV6_PMTUDISC_OMIT
 5

	)

250 
	#SOL_IPV6
 41

	)

251 
	#SOL_ICMPV6
 58

	)

254 
	#IPV6_RTHDR_LOOSE
 0

	)

255 
	#IPV6_RTHDR_STRICT
 1

	)

257 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

47 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


48 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


49 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

51 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

56 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


57 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


58 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

60 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

65 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


67 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

69 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

42 
	#MAP_SYNC
 0x80000

	)

44 
	#MAP_FIXED_NOREPLACE
 0x100000

	)

49 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_BITS_SIGACTION_H


20 
	#_BITS_SIGACTION_H
 1

	)

22 #i‚de‡
_SIGNAL_H


27 
	ssiga˘i⁄


30 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


34 
__sigh™dÀr_t
 
	mß_h™dÀr
;

36 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

38 
	m__siga˘i⁄_h™dÀr
;

39 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

40 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

42 
__sigh™dÀr_t
 
	mß_h™dÀr
;

46 
__sig£t_t
 
	mß_mask
;

49 
	mß_Êags
;

52 (*
	mß_ª°‹î
) ();

56 
	#SA_NOCLDSTOP
 1

	)

57 
	#SA_NOCLDWAIT
 2

	)

58 
	#SA_SIGINFO
 4

	)

60 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


61 
	#SA_ONSTACK
 0x08000000

	)

63 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


64 
	#SA_RESTART
 0x10000000

	)

65 
	#SA_NODEFER
 0x40000000

	)

67 
	#SA_RESETHAND
 0x80000000

	)

69 #ifde‡
__USE_MISC


70 
	#SA_INTERRUPT
 0x20000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

75 
	#SA_STACK
 
SA_ONSTACK


	)

79 
	#SIG_BLOCK
 0

	)

80 
	#SIG_UNBLOCK
 1

	)

81 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	~<bôs/ty≥s.h
>

27 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

28 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

29 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

31 
	s_Âx_sw_byãs


33 
__uöt32_t
 
	mmagic1
;

34 
__uöt32_t
 
	mexãnded_size
;

35 
__uöt64_t
 
	mx°©e_bv
;

36 
__uöt32_t
 
	mx°©e_size
;

37 
__uöt32_t
 
	m__glibc_ª£rved1
[7];

40 
	s_Âªg


42 
	msignifiˇnd
[4];

43 
	mexp⁄ít
;

46 
	s_Âxªg


48 
	msignifiˇnd
[4];

49 
	mexp⁄ít
;

50 
	m__glibc_ª£rved1
[3];

53 
	s_xmmªg


55 
__uöt32_t
 
	mñemít
[4];

60 #i‚de‡
__x86_64__


62 
	s_Â°©e


65 
__uöt32_t
 
	mcw
;

66 
__uöt32_t
 
	msw
;

67 
__uöt32_t
 
	mèg
;

68 
__uöt32_t
 
	mùoff
;

69 
__uöt32_t
 
	mcs£l
;

70 
__uöt32_t
 
	md©aoff
;

71 
__uöt32_t
 
	md©a£l
;

72 
_Âªg
 
	m_°
[8];

73 
	m°©us
;

74 
	mmagic
;

77 
__uöt32_t
 
	m_fx§_ív
[6];

78 
__uöt32_t
 
	mmxc§
;

79 
__uöt32_t
 
	m__glibc_ª£rved1
;

80 
_Âxªg
 
	m_fx§_°
[8];

81 
_xmmªg
 
	m_xmm
[8];

82 
__uöt32_t
 
	m__glibc_ª£rved2
[56];

85 #i‚de‡
sigc⁄ãxt_°ru˘


90 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

93 
	#X86_FXSR_MAGIC
 0x0000

	)

95 
	ssigc⁄ãxt


97 
	mgs
, 
	m__gsh
;

98 
	mfs
, 
	m__fsh
;

99 
	mes
, 
	m__esh
;

100 
	mds
, 
	m__dsh
;

101 
	medi
;

102 
	mesi
;

103 
	mebp
;

104 
	me•
;

105 
	mebx
;

106 
	medx
;

107 
	mecx
;

108 
	móx
;

109 
	må≠no
;

110 
	mîr
;

111 
	meù
;

112 
	mcs
, 
	m__csh
;

113 
	meÊags
;

114 
	me•_©_sig«l
;

115 
	mss
, 
	m__ssh
;

116 
_Â°©e
 * 
	mÂ°©e
;

117 
	mﬁdmask
;

118 
	m¸2
;

123 
	s_Â°©e


126 
__uöt16_t
 
	mcwd
;

127 
__uöt16_t
 
	mswd
;

128 
__uöt16_t
 
	m·w
;

129 
__uöt16_t
 
	mf›
;

130 
__uöt64_t
 
	mrù
;

131 
__uöt64_t
 
	mrdp
;

132 
__uöt32_t
 
	mmxc§
;

133 
__uöt32_t
 
	mmx¸_mask
;

134 
_Âxªg
 
	m_°
[8];

135 
_xmmªg
 
	m_xmm
[16];

136 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

139 
	ssigc⁄ãxt


141 
__uöt64_t
 
	mr8
;

142 
__uöt64_t
 
	mr9
;

143 
__uöt64_t
 
	mr10
;

144 
__uöt64_t
 
	mr11
;

145 
__uöt64_t
 
	mr12
;

146 
__uöt64_t
 
	mr13
;

147 
__uöt64_t
 
	mr14
;

148 
__uöt64_t
 
	mr15
;

149 
__uöt64_t
 
	mrdi
;

150 
__uöt64_t
 
	mrsi
;

151 
__uöt64_t
 
	mrbp
;

152 
__uöt64_t
 
	mrbx
;

153 
__uöt64_t
 
	mrdx
;

154 
__uöt64_t
 
	møx
;

155 
__uöt64_t
 
	mrcx
;

156 
__uöt64_t
 
	mr•
;

157 
__uöt64_t
 
	mrù
;

158 
__uöt64_t
 
	meÊags
;

159 
	mcs
;

160 
	mgs
;

161 
	mfs
;

162 
	m__∑d0
;

163 
__uöt64_t
 
	mîr
;

164 
__uöt64_t
 
	må≠no
;

165 
__uöt64_t
 
	mﬁdmask
;

166 
__uöt64_t
 
	m¸2
;

167 
__exãnsi⁄__
 union

169 
_Â°©e
 * 
	mÂ°©e
;

170 
__uöt64_t
 
	m__Â°©e_w‹d
;

172 
__uöt64_t
 
	m__ª£rved1
 [8];

177 
	s_xßve_hdr


179 
__uöt64_t
 
	mx°©e_bv
;

180 
__uöt64_t
 
	m__glibc_ª£rved1
[2];

181 
__uöt64_t
 
	m__glibc_ª£rved2
[5];

184 
	s_ymmh_°©e


186 
__uöt32_t
 
	mymmh_•a˚
[64];

189 
	s_x°©e


191 
_Â°©e
 
	mÂ°©e
;

192 
_xßve_hdr
 
	mx°©e_hdr
;

193 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/sigevent-consts.h

19 #i‚de‡
_BITS_SIGEVENT_CONSTS_H


20 
	#_BITS_SIGEVENT_CONSTS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_AIO_H


29 
	mSIGEV_SIGNAL
 = 0,

30 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

31 
	mSIGEV_NONE
,

32 
	#SIGEV_NONE
 
SIGEV_NONE


	)

33 
	mSIGEV_THREAD
,

34 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

36 
	mSIGEV_THREAD_ID
 = 4

38 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/siginfo-consts.h

19 #i‚de‡
_BITS_SIGINFO_CONSTS_H


20 
	#_BITS_SIGINFO_CONSTS_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	~<bôs/sigöfo-¨ch.h
>

29 #i‚de‡
__SI_ASYNCIO_AFTER_SIGIO


30 
	#__SI_ASYNCIO_AFTER_SIGIO
 1

	)

37 
	mSI_ASYNCNL
 = -60,

38 
	mSI_TKILL
 = -6,

39 
	mSI_SIGIO
,

40 #i‡
__SI_ASYNCIO_AFTER_SIGIO


41 
	mSI_ASYNCIO
,

42 
	mSI_MESGQ
,

43 
	mSI_TIMER
,

45 
	mSI_MESGQ
,

46 
	mSI_TIMER
,

47 
	mSI_ASYNCIO
,

49 
	mSI_QUEUE
,

50 
	mSI_USER
,

51 
	mSI_KERNEL
 = 0x80

53 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

54 
	#SI_TKILL
 
SI_TKILL


	)

55 
	#SI_SIGIO
 
SI_SIGIO


	)

56 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

57 
	#SI_MESGQ
 
SI_MESGQ


	)

58 
	#SI_TIMER
 
SI_TIMER


	)

59 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

60 
	#SI_QUEUE
 
SI_QUEUE


	)

61 
	#SI_USER
 
SI_USER


	)

62 
	#SI_KERNEL
 
SI_KERNEL


	)

66 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


70 
	mILL_ILLOPC
 = 1,

71 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

72 
	mILL_ILLOPN
,

73 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

74 
	mILL_ILLADR
,

75 
	#ILL_ILLADR
 
ILL_ILLADR


	)

76 
	mILL_ILLTRP
,

77 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

78 
	mILL_PRVOPC
,

79 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

80 
	mILL_PRVREG
,

81 
	#ILL_PRVREG
 
ILL_PRVREG


	)

82 
	mILL_COPROC
,

83 
	#ILL_COPROC
 
ILL_COPROC


	)

84 
	mILL_BADSTK


85 
	#ILL_BADSTK
 
ILL_BADSTK


	)

91 
	mFPE_INTDIV
 = 1,

92 
	#FPE_INTDIV
 
FPE_INTDIV


	)

93 
	mFPE_INTOVF
,

94 
	#FPE_INTOVF
 
FPE_INTOVF


	)

95 
	mFPE_FLTDIV
,

96 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

97 
	mFPE_FLTOVF
,

98 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

99 
	mFPE_FLTUND
,

100 
	#FPE_FLTUND
 
FPE_FLTUND


	)

101 
	mFPE_FLTRES
,

102 
	#FPE_FLTRES
 
FPE_FLTRES


	)

103 
	mFPE_FLTINV
,

104 
	#FPE_FLTINV
 
FPE_FLTINV


	)

105 
	mFPE_FLTSUB


106 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

112 
	mSEGV_MAPERR
 = 1,

113 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

114 
	mSEGV_ACCERR
,

115 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

116 
	mSEGV_BNDERR
,

117 
	#SEGV_BNDERR
 
SEGV_BNDERR


	)

118 
	mSEGV_PKUERR


119 
	#SEGV_PKUERR
 
SEGV_PKUERR


	)

125 
	mBUS_ADRALN
 = 1,

126 
	#BUS_ADRALN
 
BUS_ADRALN


	)

127 
	mBUS_ADRERR
,

128 
	#BUS_ADRERR
 
BUS_ADRERR


	)

129 
	mBUS_OBJERR
,

130 
	#BUS_OBJERR
 
BUS_OBJERR


	)

131 
	mBUS_MCEERR_AR
,

132 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

133 
	mBUS_MCEERR_AO


134 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

138 #ifde‡
__USE_XOPEN_EXTENDED


142 
	mTRAP_BRKPT
 = 1,

143 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

144 
	mTRAP_TRACE


145 
	#TRAP_TRACE
 
TRAP_TRACE


	)

149 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


153 
	mCLD_EXITED
 = 1,

154 
	#CLD_EXITED
 
CLD_EXITED


	)

155 
	mCLD_KILLED
,

156 
	#CLD_KILLED
 
CLD_KILLED


	)

157 
	mCLD_DUMPED
,

158 
	#CLD_DUMPED
 
CLD_DUMPED


	)

159 
	mCLD_TRAPPED
,

160 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

161 
	mCLD_STOPPED
,

162 
	#CLD_STOPPED
 
CLD_STOPPED


	)

163 
	mCLD_CONTINUED


164 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

170 
	mPOLL_IN
 = 1,

171 
	#POLL_IN
 
POLL_IN


	)

172 
	mPOLL_OUT
,

173 
	#POLL_OUT
 
POLL_OUT


	)

174 
	mPOLL_MSG
,

175 
	#POLL_MSG
 
POLL_MSG


	)

176 
	mPOLL_ERR
,

177 
	#POLL_ERR
 
POLL_ERR


	)

178 
	mPOLL_PRI
,

179 
	#POLL_PRI
 
POLL_PRI


	)

180 
	mPOLL_HUP


181 
	#POLL_HUP
 
POLL_HUP


	)

187 #ifde‡
__USE_GNU


188 
	~<bôs/sigöfo-c⁄°s-¨ch.h
>

	@/usr/include/bits/signum.h

19 #i‚de‡
_BITS_SIGNUM_H


20 
	#_BITS_SIGNUM_H
 1

	)

22 #i‚de‡
_SIGNAL_H


26 
	~<bôs/signum-gíîic.h
>

31 
	#SIGSTKFLT
 16

	)

32 
	#SIGPWR
 30

	)

34 #unde‡
SIGBUS


35 
	#SIGBUS
 7

	)

36 #unde‡
SIGUSR1


37 
	#SIGUSR1
 10

	)

38 #unde‡
SIGUSR2


39 
	#SIGUSR2
 12

	)

40 #unde‡
SIGCHLD


41 
	#SIGCHLD
 17

	)

42 #unde‡
SIGCONT


43 
	#SIGCONT
 18

	)

44 #unde‡
SIGSTOP


45 
	#SIGSTOP
 19

	)

46 #unde‡
SIGTSTP


47 
	#SIGTSTP
 20

	)

48 #unde‡
SIGURG


49 
	#SIGURG
 23

	)

50 #unde‡
SIGPOLL


51 
	#SIGPOLL
 29

	)

52 #unde‡
SIGSYS


53 
	#SIGSYS
 31

	)

55 #unde‡
__SIGRTMAX


56 
	#__SIGRTMAX
 64

	)

	@/usr/include/bits/sigstack.h

19 #i‚de‡
_BITS_SIGSTACK_H


20 
	#_BITS_SIGSTACK_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


27 
	#MINSIGSTKSZ
 2048

	)

30 
	#SIGSTKSZ
 8192

	)

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	$±hªad_sigmask
 (
__how
,

32 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_KCM
 41

	)

86 
	#PF_QIPCRTR
 42

	)

87 
	#PF_SMC
 43

	)

88 
	#PF_XDP
 44

	)

89 
	#PF_MAX
 45

	)

92 
	#AF_UNSPEC
 
PF_UNSPEC


	)

93 
	#AF_LOCAL
 
PF_LOCAL


	)

94 
	#AF_UNIX
 
PF_UNIX


	)

95 
	#AF_FILE
 
PF_FILE


	)

96 
	#AF_INET
 
PF_INET


	)

97 
	#AF_AX25
 
PF_AX25


	)

98 
	#AF_IPX
 
PF_IPX


	)

99 
	#AF_APPLETALK
 
PF_APPLETALK


	)

100 
	#AF_NETROM
 
PF_NETROM


	)

101 
	#AF_BRIDGE
 
PF_BRIDGE


	)

102 
	#AF_ATMPVC
 
PF_ATMPVC


	)

103 
	#AF_X25
 
PF_X25


	)

104 
	#AF_INET6
 
PF_INET6


	)

105 
	#AF_ROSE
 
PF_ROSE


	)

106 
	#AF_DEC√t
 
PF_DEC√t


	)

107 
	#AF_NETBEUI
 
PF_NETBEUI


	)

108 
	#AF_SECURITY
 
PF_SECURITY


	)

109 
	#AF_KEY
 
PF_KEY


	)

110 
	#AF_NETLINK
 
PF_NETLINK


	)

111 
	#AF_ROUTE
 
PF_ROUTE


	)

112 
	#AF_PACKET
 
PF_PACKET


	)

113 
	#AF_ASH
 
PF_ASH


	)

114 
	#AF_ECONET
 
PF_ECONET


	)

115 
	#AF_ATMSVC
 
PF_ATMSVC


	)

116 
	#AF_RDS
 
PF_RDS


	)

117 
	#AF_SNA
 
PF_SNA


	)

118 
	#AF_IRDA
 
PF_IRDA


	)

119 
	#AF_PPPOX
 
PF_PPPOX


	)

120 
	#AF_WANPIPE
 
PF_WANPIPE


	)

121 
	#AF_LLC
 
PF_LLC


	)

122 
	#AF_IB
 
PF_IB


	)

123 
	#AF_MPLS
 
PF_MPLS


	)

124 
	#AF_CAN
 
PF_CAN


	)

125 
	#AF_TIPC
 
PF_TIPC


	)

126 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

127 
	#AF_IUCV
 
PF_IUCV


	)

128 
	#AF_RXRPC
 
PF_RXRPC


	)

129 
	#AF_ISDN
 
PF_ISDN


	)

130 
	#AF_PHONET
 
PF_PHONET


	)

131 
	#AF_IEEE802154
 
PF_IEEE802154


	)

132 
	#AF_CAIF
 
PF_CAIF


	)

133 
	#AF_ALG
 
PF_ALG


	)

134 
	#AF_NFC
 
PF_NFC


	)

135 
	#AF_VSOCK
 
PF_VSOCK


	)

136 
	#AF_KCM
 
PF_KCM


	)

137 
	#AF_QIPCRTR
 
PF_QIPCRTR


	)

138 
	#AF_SMC
 
PF_SMC


	)

139 
	#AF_XDP
 
PF_XDP


	)

140 
	#AF_MAX
 
PF_MAX


	)

146 
	#SOL_RAW
 255

	)

147 
	#SOL_DECNET
 261

	)

148 
	#SOL_X25
 262

	)

149 
	#SOL_PACKET
 263

	)

150 
	#SOL_ATM
 264

	)

151 
	#SOL_AAL
 265

	)

152 
	#SOL_IRDA
 266

	)

153 
	#SOL_NETBEUI
 267

	)

154 
	#SOL_LLC
 268

	)

155 
	#SOL_DCCP
 269

	)

156 
	#SOL_NETLINK
 270

	)

157 
	#SOL_TIPC
 271

	)

158 
	#SOL_RXRPC
 272

	)

159 
	#SOL_PPPOL2TP
 273

	)

160 
	#SOL_BLUETOOTH
 274

	)

161 
	#SOL_PNPIPE
 275

	)

162 
	#SOL_RDS
 276

	)

163 
	#SOL_IUCV
 277

	)

164 
	#SOL_CAIF
 278

	)

165 
	#SOL_ALG
 279

	)

166 
	#SOL_NFC
 280

	)

167 
	#SOL_KCM
 281

	)

168 
	#SOL_TLS
 282

	)

169 
	#SOL_XDP
 283

	)

172 
	#SOMAXCONN
 128

	)

175 
	~<bôs/sockaddr.h
>

178 
	ssockaddr


180 
__SOCKADDR_COMMON
 (
ß_
);

181 
	mß_d©a
[14];

187 
	#__ss_Æig¡y≥
 

	)

188 
	#_SS_PADSIZE
 \

189 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

191 
	ssockaddr_°‹age


193 
__SOCKADDR_COMMON
 (
ss_
);

194 
	m__ss_∑ddög
[
_SS_PADSIZE
];

195 
__ss_Æig¡y≥
 
	m__ss_Æign
;

202 
	mMSG_OOB
 = 0x01,

203 
	#MSG_OOB
 
MSG_OOB


	)

204 
	mMSG_PEEK
 = 0x02,

205 
	#MSG_PEEK
 
MSG_PEEK


	)

206 
	mMSG_DONTROUTE
 = 0x04,

207 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

208 #ifde‡
__USE_GNU


210 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

211 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

213 
	mMSG_CTRUNC
 = 0x08,

214 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

215 
	mMSG_PROXY
 = 0x10,

216 
	#MSG_PROXY
 
MSG_PROXY


	)

217 
	mMSG_TRUNC
 = 0x20,

218 
	#MSG_TRUNC
 
MSG_TRUNC


	)

219 
	mMSG_DONTWAIT
 = 0x40,

220 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

221 
	mMSG_EOR
 = 0x80,

222 
	#MSG_EOR
 
MSG_EOR


	)

223 
	mMSG_WAITALL
 = 0x100,

224 
	#MSG_WAITALL
 
MSG_WAITALL


	)

225 
	mMSG_FIN
 = 0x200,

226 
	#MSG_FIN
 
MSG_FIN


	)

227 
	mMSG_SYN
 = 0x400,

228 
	#MSG_SYN
 
MSG_SYN


	)

229 
	mMSG_CONFIRM
 = 0x800,

230 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

231 
	mMSG_RST
 = 0x1000,

232 
	#MSG_RST
 
MSG_RST


	)

233 
	mMSG_ERRQUEUE
 = 0x2000,

234 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

235 
	mMSG_NOSIGNAL
 = 0x4000,

236 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

237 
	mMSG_MORE
 = 0x8000,

238 
	#MSG_MORE
 
MSG_MORE


	)

239 
	mMSG_WAITFORONE
 = 0x10000,

240 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

241 
	mMSG_BATCH
 = 0x40000,

242 
	#MSG_BATCH
 
MSG_BATCH


	)

243 
	mMSG_ZEROCOPY
 = 0x4000000,

244 
	#MSG_ZEROCOPY
 
MSG_ZEROCOPY


	)

245 
	mMSG_FASTOPEN
 = 0x20000000,

246 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

248 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

251 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

257 
	smsghdr


259 *
	mmsg_«me
;

260 
sockÀn_t
 
	mmsg_«mñí
;

262 
iovec
 *
	mmsg_iov
;

263 
size_t
 
	mmsg_iovÀn
;

265 *
	mmsg_c⁄åﬁ
;

266 
size_t
 
	mmsg_c⁄åﬁÀn
;

271 
	mmsg_Êags
;

275 
	scmsghdr


277 
size_t
 
	mcmsg_Àn
;

282 
	mcmsg_Àvñ
;

283 
	mcmsg_ty≥
;

284 #i‡
__glibc_c99_Êex¨r_avaûabÀ


285 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

290 #i‡
__glibc_c99_Êex¨r_avaûabÀ


291 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

293 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

295 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

296 
	#CMSG_FIRSTHDR
(
mhdr
) \

297 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

298 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

299 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

300 & (
size_t
Ë~( (size_tË- 1))

	)

301 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

302 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

303 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

305 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

306 
cmsghdr
 *
__cmsg
Ë
__THROW
;

307 #ifde‡
__USE_EXTERN_INLINES


308 #i‚de‡
_EXTERN_INLINE


309 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

311 
_EXTERN_INLINE
 
cmsghdr
 *

312 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

314 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

316  (
cmsghdr
 *) 0;

318 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

319 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

320 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


321 + 
__mhdr
->
msg_c⁄åﬁÀn
)

322 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

323 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

325  (
cmsghdr
 *) 0;

326  
__cmsg
;

327 
	}
}

334 
	mSCM_RIGHTS
 = 0x01

335 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

336 #ifde‡
__USE_GNU


337 , 
	mSCM_CREDENTIALS
 = 0x02

338 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

342 #ifde‡
__USE_GNU


344 
	su¸ed


346 
pid_t
 
	mpid
;

347 
uid_t
 
	muid
;

348 
gid_t
 
	mgid
;

353 #i‚de‡
__USE_MISC


354 #i‚de‡
FIOGETOWN


355 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

357 #i‚de‡
FIOSETOWN


358 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

360 #i‚de‡
SIOCATMARK


361 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

363 #i‚de‡
SIOCGPGRP


364 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

366 #i‚de‡
SIOCGSTAMP


367 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

369 #i‚de‡
SIOCGSTAMPNS


370 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

372 #i‚de‡
SIOCSPGRP


373 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

376 #i‚de‡
IOCSIZE_MASK


377 
	#__SYS_SOCKET_H_undef_IOCSIZE_MASK


	)

379 #i‚de‡
IOCSIZE_SHIFT


380 
	#__SYS_SOCKET_H_undef_IOCSIZE_SHIFT


	)

382 #i‚de‡
IOC_IN


383 
	#__SYS_SOCKET_H_undef_IOC_IN


	)

385 #i‚de‡
IOC_INOUT


386 
	#__SYS_SOCKET_H_undef_IOC_INOUT


	)

388 #i‚de‡
IOC_OUT


389 
	#__SYS_SOCKET_H_undef_IOC_OUT


	)

393 
	~<asm/sockë.h
>

395 #i‚de‡
__USE_MISC


396 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


397 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


398 #unde‡
FIOGETOWN


400 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


401 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


402 #unde‡
FIOSETOWN


404 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


405 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


406 #unde‡
SIOCATMARK


408 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


409 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


410 #unde‡
SIOCGPGRP


412 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


413 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


414 #unde‡
SIOCGSTAMP


416 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


417 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


418 #unde‡
SIOCGSTAMPNS


420 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


421 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


422 #unde‡
SIOCSPGRP


425 #ifde‡
__SYS_SOCKET_H_undef_IOCSIZE_MASK


426 #unde‡
__SYS_SOCKET_H_undef_IOCSIZE_MASK


427 #unde‡
IOCSIZE_MASK


429 #ifde‡
__SYS_SOCKET_H_undef_IOCSIZE_SHIFT


430 #unde‡
__SYS_SOCKET_H_undef_IOCSIZE_SHIFT


431 #unde‡
IOCSIZE_SHIFT


433 #ifde‡
__SYS_SOCKET_H_undef_IOC_IN


434 #unde‡
__SYS_SOCKET_H_undef_IOC_IN


435 #unde‡
IOC_IN


437 #ifde‡
__SYS_SOCKET_H_undef_IOC_INOUT


438 #unde‡
__SYS_SOCKET_H_undef_IOC_INOUT


439 #unde‡
IOC_INOUT


441 #ifde‡
__SYS_SOCKET_H_undef_IOC_OUT


442 #unde‡
__SYS_SOCKET_H_undef_IOC_OUT


443 #unde‡
IOC_OUT


447 
	slögî


449 
	ml_⁄off
;

450 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__buf
);

37 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

38  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

39 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

40  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
);

41  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
);

42 
	}
}

44 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

45 
size_t
 
__buÊí
, 
__Êags
,

46 
__SOCKADDR_ARG
 
__addr
,

47 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

48 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

49 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

50 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
size_t
 
__buÊí
, 
__Êags
,

55 
__SOCKADDR_ARG
 
__addr
,

56 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

57 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

60 
__f‹tify_fun˘i⁄
 
ssize_t


61 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

62 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

64 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__buf
);

65 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

66  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

67 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

68  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
, 
__addr
,

69 
__addr_Àn
);

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
sz
, 
__Êags
, 
__addr
, 
__addr_Àn
);

71 
	}
}

	@/usr/include/bits/ss_flags.h

19 #i‚de‡
_BITS_SS_FLAGS_H


20 
	#_BITS_SS_FLAGS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


29 
	mSS_ONSTACK
 = 1,

30 
	#SS_ONSTACK
 
SS_ONSTACK


	)

31 
	mSS_DISABLE


32 
	#SS_DISABLE
 
SS_DISABLE


	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/statx.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©x
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

29 #ifde‡
__has_ö˛ude


30 #i‡
__has_ö˛ude
 ("linux/stat.h")

31 
	~"löux/°©.h
"

32 #ifde‡
STATX_TYPE


33 
	#__°©x_time°amp_deföed
 1

	)

34 
	#__°©x_deföed
 1

	)

39 
	~<bôs/°©x-gíîic.h
>

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

30 && !
deföed
 
__REDIRECT
 \

31 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

32 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

36 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


42 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

43 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

46 #ifdef 
__USE_ISOC99


47 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

48 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

49 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

50 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

53 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

54 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

55 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

59 #ifde‡
__USE_XOPEN2K8


60 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

61 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

64 #ifde‡
__USE_GNU


65 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

66 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

67 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

68 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

72 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


73 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

74 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

75 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


76 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

77 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

79 #i‡
__USE_FORTIFY_LEVEL
 > 1

80 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

82 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

84 #ifde‡
__USE_XOPEN2K8


85 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

28 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

29 c⁄° *
__ª°ri˘
 
__f‹m©
,

30 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

32 #ifde‡
__va_¨g_∑ck


33 
__f‹tify_fun˘i⁄
 

34 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

36  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

37 
	`__glibc_objsize
 (
__s
), 
__fmt
,

38 
	`__va_¨g_∑ck
 ());

39 
	}
}

40 #ñi‡!
deföed
 
__˝lu•lus


41 
	#•rötf
(
°r
, ...) \

42 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, \

43 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

46 
__f‹tify_fun˘i⁄
 

47 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

48 
__gnuc_va_li°
 
__≠
))

50  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

51 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

52 
	}
}

54 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


56 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

58 ...Ë
__THROW
;

59 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

60 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

61 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

63 #ifde‡
__va_¨g_∑ck


64 
__f‹tify_fun˘i⁄
 

65 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

66 c⁄° *
__ª°ri˘
 
__fmt
, ...))

68  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

69 
	`__glibc_objsize
 (
__s
), 
__fmt
,

70 
	`__va_¨g_∑ck
 ());

71 
	}
}

72 #ñi‡!
deföed
 
__˝lu•lus


73 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

74 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, \

75 
	`__glibc_objsize
 (
°r
), 
__VA_ARGS__
)

	)

78 
__f‹tify_fun˘i⁄
 

79 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

80 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

82  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

83 
	`__glibc_objsize
 (
__s
), 
__fmt
, 
__≠
);

84 
	}
}

88 #i‡
__USE_FORTIFY_LEVEL
 > 1

90 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

91 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

92 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

93 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

94 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__≠
);

95 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

96 
__gnuc_va_li°
 
__≠
);

98 #ifde‡
__va_¨g_∑ck


99 
__f‹tify_fun˘i⁄
 

100 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

102  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

103 
	`__va_¨g_∑ck
 ());

104 
	}
}

106 
__f‹tify_fun˘i⁄
 

107 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

109  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

110 
	}
}

111 #ñi‡!
deföed
 
__˝lu•lus


112 
	#¥ötf
(...) \

113 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
	#Ârötf
(
°ªam
, ...) \

115 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

118 
__f‹tify_fun˘i⁄
 

119 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

121 #ifde‡
__USE_EXTERN_INLINES


122  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

124  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

126 
	}
}

128 
__f‹tify_fun˘i⁄
 

129 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

130 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

132  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

133 
	}
}

135 #ifde‡
__USE_XOPEN2K8


136 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

137 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

138 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

139 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

140 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

142 #ifde‡
__va_¨g_∑ck


143 
__f‹tify_fun˘i⁄
 

144 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

146  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

147 
	`__va_¨g_∑ck
 ());

148 
	}
}

149 #ñi‡!
deföed
 
__˝lu•lus


150 
	#d¥ötf
(
fd
, ...) \

151 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

154 
__f‹tify_fun˘i⁄
 

155 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

157  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

158 
	}
}

161 #ifde‡
__USE_GNU


163 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

164 c⁄° *
__ª°ri˘
 
__fmt
, ...)

165 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

166 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

167 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

168 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

169 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

170 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

173 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

174 
__Êag
,

175 c⁄° *
__ª°ri˘
 
__f‹m©
,

176 
__gnuc_va_li°
 
__¨gs
)

177 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

179 #ifde‡
__va_¨g_∑ck


180 
__f‹tify_fun˘i⁄
 

181 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

183  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

184 
	`__va_¨g_∑ck
 ());

185 
	}
}

187 
__f‹tify_fun˘i⁄
 

188 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

191  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

192 
	`__va_¨g_∑ck
 ());

193 
	}
}

195 
__f‹tify_fun˘i⁄
 

196 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

197 c⁄° *
__ª°ri˘
 
__fmt
, ...))

199  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

200 
	`__va_¨g_∑ck
 ());

201 
	}
}

202 #ñi‡!
deföed
 
__˝lu•lus


203 
	#a•rötf
(
±r
, ...) \

204 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

205 
	#__a•rötf
(
±r
, ...) \

206 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

207 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

208 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

211 
__f‹tify_fun˘i⁄
 

212 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

213 
__gnuc_va_li°
 
__≠
))

215  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

216 
	}
}

218 
__f‹tify_fun˘i⁄
 

219 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

220 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

222  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

223 
__≠
);

224 
	}
}

230 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

231 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

232 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

233 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

236 
__f‹tify_fun˘i⁄
 
__wur
 *

237 
	$gës
 (*
__°r
)

239 i‡(
	`__glibc_objsize
 (
__°r
Ë!(
size_t
) -1)

240  
	`__gës_chk
 (
__°r
, 
	`__glibc_objsize
 (__str));

241  
	`__gës_w¨n
 (
__°r
);

242 
	}
}

245 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

246 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

247 *
	`__REDIRECT
 (
__fgës_Æüs
,

248 (*
__ª°ri˘
 
__s
, 
__n
,

249 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

250 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

251 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

252 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

253 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

256 
__f‹tify_fun˘i⁄
 
__wur
 *

257 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

259 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

260 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

261  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

262 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

263  
	`__fgës_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

264  
	`__fgës_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

265 
	}
}

267 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

268 
size_t
 
__size
, size_à
__n
,

269 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

270 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

271 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

272 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

273 
‰ód
Ë
__wur
;

274 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

275 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

276 
size_t
 
__size
, size_à
__n
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
),

278 
__‰ód_chk
)

279 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

282 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


283 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

284 
FILE
 *
__ª°ri˘
 
__°ªam
)

286 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

287 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

288  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

289 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

290  
	`__‰ód_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

291  
	`__‰ód_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

292 
	}
}

294 #ifde‡
__USE_GNU


295 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

296 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

297 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

298 (*
__ª°ri˘
 
__s
, 
__n
,

299 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

300 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

301 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

303 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

306 
__f‹tify_fun˘i⁄
 
__wur
 *

307 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

309 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__s
);

310 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
,  (), 
sz
))

311  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

312 i‡(
	`__glibc_unß„_Àn
 (
__n
,  (), 
sz
))

313  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

314  
	`__fgës_u∆ocked_chk
 (
__s
, 
sz
, 
__n
, 
__°ªam
);

315 
	}
}

318 #ifde‡
__USE_MISC


319 #unde‡
‰ód_u∆ocked


320 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

321 
size_t
 
__size
, size_à
__n
,

322 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

323 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

324 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

325 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

326 
‰ód_u∆ocked
Ë
__wur
;

327 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

328 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

329 
size_t
 
__size
, size_à
__n
,

330 
FILE
 *
__ª°ri˘
 
__°ªam
),

331 
__‰ód_u∆ocked_chk
)

332 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

335 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


336 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
)

339 
size_t
 
sz
 = 
	`__glibc_objsize0
 (
__±r
);

340 i‡(
	`__glibc_ß„_‹_unknown_Àn
 (
__n
, 
__size
, 
sz
))

342 #ifde‡
__USE_EXTERN_INLINES


343 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

344 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

345 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

346 && 
__size
 * 
__n
 <= 8)

348 
size_t
 
__˙t
 = 
__size
 * 
__n
;

349 *
__˝å
 = (*Ë
__±r
;

350 i‡(
__˙t
 == 0)

353 ; 
__˙t
 > 0; --__cnt)

355 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

356 i‡(
__c
 =
EOF
)

358 *
__˝å
++ = 
__c
;

360  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

363  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

365 i‡(
	`__glibc_unß„_Àn
 (
__n
, 
__size
, 
sz
))

366  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

367  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
sz
, 
__size
, 
__n
, 
__°ªam
);

369 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 #ifde‡
__USE_GNU


28 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

31 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

32 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 
size_t
 
sz
 = 
	`__glibc_objsize
 (
__ªsﬁved
);

41 i‡(
sz
 =(
size_t
) -1)

42  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

44 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


45 i‡(
	`__glibc_unß„_Àn
 (
PATH_MAX
,  (), 
sz
))

46  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
sz
);

48  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
sz
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66  
	`__glibc_f‹tify
 (
±¢ame_r
, 
__buÊí
,  (),

67 
	`__glibc_objsize
 (
__buf
),

68 
__fd
, 
__buf
, 
__buÊí
);

69 
	}
}

72 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

73 
__THROW
 
__wur
;

74 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

75 
w˘omb
Ë
__wur
;

77 
__f‹tify_fun˘i⁄
 
__wur
 

78 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

83 
	#__STDLIB_MB_LEN_MAX
 16

	)

84 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


87 i‡(
	`__glibc_objsize
 (
__s
Ë!(
size_t
) -1

88 && 
__STDLIB_MB_LEN_MAX
 > 
	`__glibc_objsize
 (
__s
))

89  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__glibc_objsize
 (__s));

90  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

91 
	}
}

94 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

95 c⁄° *
__ª°ri˘
 
__§c
,

96 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

97 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

98 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
), 
mb°owcs
);

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

105 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

108 
__f‹tify_fun˘i⁄
 
size_t


109 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

110 
size_t
 
__Àn
))

112  
	`__glibc_f‹tify_n
 (
mb°owcs
, 
__Àn
,  (
wch¨_t
),

113 
	`__glibc_objsize
 (
__d°
),

114 
__d°
, 
__§c
, 
__Àn
);

115 
	}
}

118 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

119 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

120 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

121 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

122 (*
__ª°ri˘
 
__d°
,

123 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

124 
size_t
 
__Àn
), 
wc°ombs
);

125 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

126 (*
__ª°ri˘
 
__d°
,

127 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

128 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

129 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

131 
__f‹tify_fun˘i⁄
 
size_t


132 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

133 
size_t
 
__Àn
))

135  
	`__glibc_f‹tify
 (
wc°ombs
, 
__Àn
,  (),

136 
	`__glibc_objsize
 (
__d°
),

137 
__d°
, 
__§c
, 
__Àn
);

138 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 #i‡!
__GNUC_PREREQ
 (5,0)

26 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

30 
__f‹tify_fun˘i⁄
 *

31 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

32 
size_t
 
__Àn
))

34  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

35 
	`__glibc_objsize0
 (
__de°
));

36 
	}
}

38 
__f‹tify_fun˘i⁄
 *

39 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

41  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

42 
	`__glibc_objsize0
 (
__de°
));

43 
	}
}

45 #ifde‡
__USE_GNU


46 
__f‹tify_fun˘i⁄
 *

47 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

48 
size_t
 
__Àn
))

50  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

51 
	`__glibc_objsize0
 (
__de°
));

52 
	}
}

61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

66 #i‡!
	`__GNUC_PREREQ
 (5,0)

67 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

68 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

70 
	`__w¨n_mem£t_zîo_Àn
 ();

71  
__de°
;

74  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
,

75 
	`__glibc_objsize0
 (
__de°
));

76 
	}
}

78 #ifde‡
__USE_MISC


79 
	~<bôs/°rögs_f‹tifõd.h
>

81 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

82 
__THROW
 
	`__n⁄nuŒ
 ((1));

84 
__f‹tify_fun˘i⁄
 

85 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

87 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__glibc_objsize0
 (__dest));

88 
	}
}

91 
__f‹tify_fun˘i⁄
 *

92 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

94  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

95 
	}
}

97 #ifde‡
__USE_XOPEN2K8


98 
__f‹tify_fun˘i⁄
 *

99 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

101  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

102 
	}
}

106 
__f‹tify_fun˘i⁄
 *

107 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

108 
size_t
 
__Àn
))

110  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
,

111 
	`__glibc_objsize
 (
__de°
));

112 
	}
}

114 #ifde‡
__USE_XOPEN2K8


115 #i‡
__GNUC_PREREQ
 (4, 7Ë|| 
__glibc_˛™g_¥îeq
 (2, 6)

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

119  
	`__buûtö___°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
,

120 
	`__glibc_objsize
 (
__de°
));

121 
	}
}

123 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

124 
size_t
 
__de°Àn
Ë
__THROW
;

125 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

126 
size_t
 
__n
), 
°≤˝y
);

128 
__f‹tify_fun˘i⁄
 *

129 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

131 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

132 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

133  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

134  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

135 
	}
}

140 
__f‹tify_fun˘i⁄
 *

141 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

143  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__glibc_objsize
 (__dest));

144 
	}
}

147 
__f‹tify_fun˘i⁄
 *

148 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

149 
size_t
 
__Àn
))

151  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
,

152 
	`__glibc_objsize
 (
__de°
));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‚de‡
_BITS_TIME_H


24 
	#_BITS_TIME_H
 1

	)

26 
	~<bôs/ty≥s.h
>

34 
	#CLOCKS_PER_SEC
 ((
__˛ock_t
Ë1000000)

	)

36 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

37 && !
deföed
 
__USE_XOPEN2K


40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

60 
	#CLOCK_BOOTTIME
 7

	)

62 
	#CLOCK_REALTIME_ALARM
 8

	)

64 
	#CLOCK_BOOTTIME_ALARM
 9

	)

66 
	#CLOCK_TAI
 11

	)

69 
	#TIMER_ABSTIME
 1

	)

72 #ifde‡
__USE_GNU


73 
	~<bôs/timex.h
>

75 
__BEGIN_DECLS


78 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

80 
__END_DECLS


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 
__öt8_t
 
	t__öt_Àa°8_t
;

52 
__uöt8_t
 
	t__uöt_Àa°8_t
;

53 
__öt16_t
 
	t__öt_Àa°16_t
;

54 
__uöt16_t
 
	t__uöt_Àa°16_t
;

55 
__öt32_t
 
	t__öt_Àa°32_t
;

56 
__uöt32_t
 
	t__uöt_Àa°32_t
;

57 
__öt64_t
 
	t__öt_Àa°64_t
;

58 
__uöt64_t
 
	t__uöt_Àa°64_t
;

61 #i‡
__WORDSIZE
 == 64

62 
	t__quad_t
;

63 
	t__u_quad_t
;

65 
__exãnsi⁄__
 
	t__quad_t
;

66 
__exãnsi⁄__
 
	t__u_quad_t
;

70 #i‡
__WORDSIZE
 == 64

71 
	t__ötmax_t
;

72 
	t__uötmax_t
;

74 
__exãnsi⁄__
 
	t__ötmax_t
;

75 
__exãnsi⁄__
 
	t__uötmax_t
;

108 
	#__S16_TYPE
 

	)

109 
	#__U16_TYPE
 

	)

110 
	#__S32_TYPE
 

	)

111 
	#__U32_TYPE
 

	)

112 
	#__SLONGWORD_TYPE
 

	)

113 
	#__ULONGWORD_TYPE
 

	)

114 #i‡
__WORDSIZE
 == 32

115 
	#__SQUAD_TYPE
 
__öt64_t


	)

116 
	#__UQUAD_TYPE
 
__uöt64_t


	)

117 
	#__SWORD_TYPE
 

	)

118 
	#__UWORD_TYPE
 

	)

119 
	#__SLONG32_TYPE
 

	)

120 
	#__ULONG32_TYPE
 

	)

121 
	#__S64_TYPE
 
__öt64_t


	)

122 
	#__U64_TYPE
 
__uöt64_t


	)

125 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

126 #ñi‡
__WORDSIZE
 == 64

127 
	t__SQUAD_TYPE
 

	)

128 
	t__UQUAD_TYPE
 

	)

129 
	t__SWORD_TYPE
 

	)

130 
	t__UWORD_TYPE
 

	)

131 
	t__SLONG32_TYPE
 

	)

132 
	t__ULONG32_TYPE
 

	)

133 
	t__S64_TYPE
 

	)

134 
	t__U64_TYPE
 

	)

136 
	t__STD_TYPE
 

	)

140 
	~<bôs/ty≥sizes.h
>

143 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

144 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

145 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

146 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

147 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

148 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

149 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

150 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

151 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

152 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

153 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

154 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

155 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

156 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

157 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

158 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

159 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

160 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

162 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

163 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

166 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

169 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

172 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

177 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

178 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

181 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

182 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

185 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

186 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

189 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

191 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

194 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

196 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

200 
__off64_t
 
	t__loff_t
;

201 *
	t__ˇddr_t
;

204 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

207 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

212 
	t__sig_©omic_t
;

214 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/bits/types/error_t.h

19 #i‚de‡
__îr‹_t_deföed


20 
	#__îr‹_t_deföed
 1

	)

22 
	tîr‹_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/sig_atomic_t.h

1 #i‚de‡
__sig_©omic_t_deföed


2 
	#__sig_©omic_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
__sig_©omic_t
 
	tsig_©omic_t
;

	@/usr/include/bits/types/sigevent_t.h

1 #i‚de‡
__sigevít_t_deföed


2 
	#__sigevít_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SIGEV_MAX_SIZE
 64

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

16 #i‚de‡
__have_±hªad_©å_t


17 
±hªad_©å_t
 
	t±hªad_©å_t
;

18 
	#__have_±hªad_©å_t
 1

	)

22 
	ssigevít


24 
__sigvÆ_t
 
	msigev_vÆue
;

25 
	msigev_signo
;

26 
	msigev_nŸify
;

30 
	m_∑d
[
__SIGEV_PAD_SIZE
];

34 
__pid_t
 
	m_tid
;

38 (*
	m_fun˘i⁄
Ë(
	m__sigvÆ_t
);

39 
±hªad_©å_t
 *
	m_©åibuã
;

40 } 
	m_sigev_thªad
;

41 } 
	m_sigev_un
;

42 } 
	tsigevít_t
;

45 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

46 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/bits/types/siginfo_t.h

1 #i‚de‡
__sigöfo_t_deföed


2 
	#__sigöfo_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SI_MAX_SIZE
 128

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

16 
	~<bôs/sigöfo-¨ch.h
>

17 #i‚de‡
__SI_ALIGNMENT


18 
	#__SI_ALIGNMENT


	)

20 #i‚de‡
__SI_BAND_TYPE


21 
	#__SI_BAND_TYPE
 

	)

23 #i‚de‡
__SI_CLOCK_T


24 
	#__SI_CLOCK_T
 
__˛ock_t


	)

26 #i‚de‡
__SI_ERRNO_THEN_CODE


27 
	#__SI_ERRNO_THEN_CODE
 1

	)

29 #i‚de‡
__SI_HAVE_SIGSYS


30 
	#__SI_HAVE_SIGSYS
 1

	)

32 #i‚de‡
__SI_SIGFAULT_ADDL


33 
	#__SI_SIGFAULT_ADDL


	)

38 
	msi_signo
;

39 #i‡
__SI_ERRNO_THEN_CODE


40 
	msi_î∫o
;

42 
	msi_code
;

44 
	msi_code
;

45 
	msi_î∫o
;

47 #i‡
__WORDSIZE
 == 64

48 
	m__∑d0
;

53 
	m_∑d
[
__SI_PAD_SIZE
];

58 
__pid_t
 
	msi_pid
;

59 
__uid_t
 
	msi_uid
;

60 } 
	m_kûl
;

65 
	msi_tid
;

66 
	msi_ovîrun
;

67 
__sigvÆ_t
 
	msi_sigvÆ
;

68 } 
	m_timî
;

73 
__pid_t
 
	msi_pid
;

74 
__uid_t
 
	msi_uid
;

75 
__sigvÆ_t
 
	msi_sigvÆ
;

76 } 
	m_π
;

81 
__pid_t
 
	msi_pid
;

82 
__uid_t
 
	msi_uid
;

83 
	msi_°©us
;

84 
__SI_CLOCK_T
 
	msi_utime
;

85 
__SI_CLOCK_T
 
	msi_°ime
;

86 } 
	m_sigchld
;

91 *
	msi_addr
;

92 
__SI_SIGFAULT_ADDL


93 
	msi_addr_lsb
;

99 *
	m_lowî
;

100 *
	m_uµî
;

101 } 
	m_addr_bnd
;

103 
__uöt32_t
 
	m_pkey
;

104 } 
	m_bounds
;

105 } 
	m_sigÁu…
;

110 
	msi_b™d
;

111 
	msi_fd
;

112 } 
	m_sigpﬁl
;

115 #i‡
__SI_HAVE_SIGSYS


118 *
	m_ˇŒ_addr
;

119 
	m_sysˇŒ
;

120 
	m_¨ch
;

121 } 
	m_sigsys
;

123 } 
	m_sifõlds
;

124 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

128 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

129 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

130 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

131 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

132 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

133 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

134 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

135 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

136 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

137 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

138 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

139 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

140 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_lowî


	)

141 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_uµî


	)

142 
	#si_pkey
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_pkey


	)

143 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

144 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

145 #i‡
__SI_HAVE_SIGSYS


146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/sigval_t.h

1 #i‚de‡
__sigvÆ_t_deföed


2 
	#__sigvÆ_t_deföed


	)

4 
	~<bôs/ty≥s/__sigvÆ_t.h
>

12 #i‚de‡
__USE_POSIX199309


16 
__sigvÆ_t
 
	tsigvÆ_t
;

	@/usr/include/bits/types/stack_t.h

19 #i‚de‡
__°ack_t_deföed


20 
	#__°ack_t_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

28 *
	mss_•
;

29 
	mss_Êags
;

30 
size_t
 
	mss_size
;

31 } 
	t°ack_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/types/struct_iovec.h

19 #i‚de‡
__iovec_deföed


20 
	#__iovec_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
	siovec


28 *
	miov_ba£
;

29 
size_t
 
	miov_Àn
;

	@/usr/include/bits/types/struct_itimerspec.h

1 #i‚de‡
__ôimî•ec_deföed


2 
	#__ôimî•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

8 
	sôimî•ec


10 
time•ec
 
	mô_öãrvÆ
;

11 
time•ec
 
	mô_vÆue
;

	@/usr/include/bits/types/struct_osockaddr.h

1 #i‚de‡
__osockaddr_deföed


2 
	#__osockaddr_deföed
 1

	)

6 
	sosockaddr


8 
	mß_Ámûy
;

9 
	mß_d©a
[14];

	@/usr/include/bits/types/struct_sigstack.h

19 #i‚de‡
__sig°ack_deföed


20 
	#__sig°ack_deföed
 1

	)

23 
	ssig°ack


25 *
	mss_•
;

26 
	mss_⁄°ack
;

	@/usr/include/bits/types/struct_timespec.h

2 #i‚de‡
_STRUCT_TIMESPEC


3 
	#_STRUCT_TIMESPEC
 1

	)

5 
	~<bôs/ty≥s.h
>

9 
	stime•ec


11 
__time_t
 
	mtv_£c
;

12 
__sysˇŒ_¶⁄g_t
 
	mtv_n£c
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 
__time_t
 
	mtv_£c
;

11 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types/struct_tm.h

1 #i‚de‡
__°ru˘_tm_deföed


2 
	#__°ru˘_tm_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
	stm


9 
	mtm_£c
;

10 
	mtm_mö
;

11 
	mtm_hour
;

12 
	mtm_mday
;

13 
	mtm_m⁄
;

14 
	mtm_yór
;

15 
	mtm_wday
;

16 
	mtm_yday
;

17 
	mtm_isd°
;

19 #ifdef 
__USE_MISC


20 
	mtm_gmtoff
;

21 c⁄° *
	mtm_z⁄e
;

23 
	m__tm_gmtoff
;

24 c⁄° *
	m__tm_z⁄e
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36  
	`__glibc_f‹tify
 (
ªad
, 
__nbyãs
,  (),

37 
	`__glibc_objsize0
 (
__buf
),

38 
__fd
, 
__buf
, 
__nbyãs
);

39 
	}
}

41 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


42 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

43 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

44 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

45 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

46 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

47 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

48 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

49 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

50 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

55 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

57 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

59 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

60 
__¥ód64_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

64 #i‚de‡
__USE_FILE_OFFSET64


65 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


66 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

68  
	`__glibc_f‹tify
 (
¥ód
, 
__nbyãs
,  (),

69 
	`__glibc_objsize0
 (
__buf
),

70 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

71 
	}
}

73 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


74 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

76  
	`__glibc_f‹tify
 (
¥ód64
, 
__nbyãs
,  (),

77 
	`__glibc_objsize0
 (
__buf
),

78 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

79 
	}
}

82 #ifde‡
__USE_LARGEFILE64


83 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


84 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

86  
	`__glibc_f‹tify
 (
¥ód64
, 
__nbyãs
,  (),

87 
	`__glibc_objsize0
 (
__buf
),

88 
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

89 
	}
}

93 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


94 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

95 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

96 
size_t
 
__buÊí
)

97 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

98 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

99 (c⁄° *
__ª°ri˘
 
__∑th
,

100 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

101 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

102 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

103 (c⁄° *
__ª°ri˘
 
__∑th
,

104 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

105 
size_t
 
__buÊí
), 
__ªadlök_chk
)

106 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

109 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


110 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

111 
size_t
 
__Àn
))

113  
	`__glibc_f‹tify
 (
ªadlök
, 
__Àn
,  (),

114 
	`__glibc_objsize
 (
__buf
),

115 
__∑th
, 
__buf
, 
__Àn
);

116 
	}
}

119 #ifde‡
__USE_ATFILE


120 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

121 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

122 
size_t
 
__buÊí
)

123 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

124 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

125 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

126 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

127 
ªadlök©
)

128 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

129 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

130 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

131 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

132 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

133 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

137 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


138 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

139 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

141  
	`__glibc_f‹tify
 (
ªadlök©
, 
__Àn
,  (),

142 
	`__glibc_objsize
 (
__buf
),

143 
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

144 
	}
}

147 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

148 
__THROW
 
__wur
;

149 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

150 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

151 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

152 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

153 
__gëcwd_chk
)

154 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

157 
__f‹tify_fun˘i⁄
 
__wur
 *

158 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

160  
	`__glibc_f‹tify
 (
gëcwd
, 
__size
,  (),

161 
	`__glibc_objsize
 (
__buf
),

162 
__buf
, 
__size
);

163 
	}
}

165 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


166 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

169 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

173 
	`__NTH
 (
	$gëwd
 (*
__buf
))

175 i‡(
	`__glibc_objsize
 (
__buf
Ë!(
size_t
) -1)

176  
	`__gëwd_chk
 (
__buf
, 
	`__glibc_objsize
 (__buf));

177  
	`__gëwd_w¨n
 (
__buf
);

178 
	}
}

181 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

182 
size_t
 
__buÊí
Ë
__THROW
;

183 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

184 
size_t
 
__Àn
), 
c⁄f°r
);

185 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

186 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

187 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

188 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

191 
__f‹tify_fun˘i⁄
 
size_t


192 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

194  
	`__glibc_f‹tify
 (
c⁄f°r
, 
__Àn
,  (),

195 
	`__glibc_objsize
 (
__buf
),

196 
__«me
, 
__buf
, 
__Àn
);

197 
	}
}

200 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

201 
__THROW
 
__wur
;

202 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

203 
gëgroups
Ë
__wur
;

204 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

205 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

206 
__gëgroups_chk
)

207 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

210 
__f‹tify_fun˘i⁄
 

211 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

213  
	`__glibc_f‹tify
 (
gëgroups
, 
__size
,  (
__gid_t
),

214 
	`__glibc_objsize
 (
__li°
),

215 
__size
, 
__li°
);

216 
	}
}

219 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

220 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

221 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

222 
size_t
 
__buÊí
), 
ây«me_r
)

223 
	`__n⁄nuŒ
 ((2));

224 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

225 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

226 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

227 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

230 
__f‹tify_fun˘i⁄
 

231 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

233  
	`__glibc_f‹tify
 (
ây«me_r
, 
__buÊí
,  (),

234 
	`__glibc_objsize
 (
__buf
),

235 
__fd
, 
__buf
, 
__buÊí
);

236 
	}
}

239 #ifde‡
__USE_POSIX199506


240 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

241 
	`__n⁄nuŒ
 ((1));

242 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

243 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

244 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

245 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

246 
__gëlogö_r_chk
)

247 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

250 
__f‹tify_fun˘i⁄
 

251 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

253  
	`__glibc_f‹tify
 (
gëlogö_r
, 
__buÊí
,  (),

254 
	`__glibc_objsize
 (
__buf
),

255 
__buf
, 
__buÊí
);

256 
	}
}

260 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


261 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1));

263 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

264 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

265 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

266 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

267 
__gëho°«me_chk
)

268 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

271 
__f‹tify_fun˘i⁄
 

272 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

274  
	`__glibc_f‹tify
 (
gëho°«me
, 
__buÊí
,  (),

275 
	`__glibc_objsize
 (
__buf
),

276 
__buf
, 
__buÊí
);

277 
	}
}

281 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

282 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

283 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

284 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

285 
size_t
 
__buÊí
),

286 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

287 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

288 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

289 
__gëdomaö«me_chk
)

290 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

294 
__f‹tify_fun˘i⁄
 

295 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

297  
	`__glibc_f‹tify
 (
gëdomaö«me
, 
__buÊí
,  (),

298 
	`__glibc_objsize
 (
__buf
),

299 
__buf
, 
__buÊí
);

300 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

380 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

381 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

382 #ñi‡!
__GNUC_PREREQ
 (4, 1)

383 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


384 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

385 || 
	$__GNUC_PREREQ
 (12, 0))

387 #i‡
_FORTIFY_SOURCE
 > 3

388 #w¨nög 
_FORTIFY_SOURCE
 > 3 
is
 
åóãd
 
like
 3 
⁄
 
this
 
∂©f‹m


390 
	#__USE_FORTIFY_LEVEL
 3

	)

391 #ñi‡
_FORTIFY_SOURCE
 > 1

392 #i‡
_FORTIFY_SOURCE
 > 2

393 #w¨nög 
_FORTIFY_SOURCE
 > 2 
is
 
åóãd
 
like
 2 
⁄
 
this
 
∂©f‹m


395 
	#__USE_FORTIFY_LEVEL
 2

	)

397 
	#__USE_FORTIFY_LEVEL
 1

	)

400 #i‚de‡
__USE_FORTIFY_LEVEL


401 
	#__USE_FORTIFY_LEVEL
 0

	)

408 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


409 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

411 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

416 
	~<°dc-¥edef.h
>

424 #unde‡
__GNU_LIBRARY__


425 
	#__GNU_LIBRARY__
 6

	)

429 
	#__GLIBC__
 2

	)

430 
	#__GLIBC_MINOR__
 28

	)

432 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

433 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

436 #i‚de‡
__ASSEMBLER__


437 #i‚de‡
_SYS_CDEFS_H


438 
	~<sys/cdefs.h
>

443 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


444 
	#__USE_LARGEFILE
 1

	)

445 
	#__USE_LARGEFILE64
 1

	)

451 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

452 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

453 && 
deföed
 
__exã∫_ölöe


454 
	#__USE_EXTERN_INLINES
 1

	)

462 
	~<gnu/°ubs.h
>

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/openssl/asn1.h

10 #i‚de‡
HEADER_ASN1_H


11 
	#HEADER_ASN1_H


	)

13 
	~<time.h
>

14 
	~<›ís¶/e_os2.h
>

15 
	~<›ís¶/›ís¶c⁄f.h
>

16 
	~<›ís¶/bio.h
>

17 
	~<›ís¶/ß„°ack.h
>

18 
	~<›ís¶/a¢1îr.h
>

19 
	~<›ís¶/symhacks.h
>

21 
	~<›ís¶/os¶_typ.h
>

22 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

23 
	~<›ís¶/bn.h
>

26 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


27 #unde‡
OPENSSL_EXTERN


28 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

31 #ifde‡ 
__˝lu•lus


35 
	#V_ASN1_UNIVERSAL
 0x00

	)

36 
	#V_ASN1_APPLICATION
 0x40

	)

37 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

38 
	#V_ASN1_PRIVATE
 0xc0

	)

40 
	#V_ASN1_CONSTRUCTED
 0x20

	)

41 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

42 
	#V_ASN1_PRIMATIVE_TAG
 
V_ASN1_PRIMITIVE_TAG


	)

44 
	#V_ASN1_APP_CHOOSE
 -2

	)

45 
	#V_ASN1_OTHER
 -3

	)

46 
	#V_ASN1_ANY
 -4

	)

48 
	#V_ASN1_UNDEF
 -1

	)

50 
	#V_ASN1_EOC
 0

	)

51 
	#V_ASN1_BOOLEAN
 1

	)

52 
	#V_ASN1_INTEGER
 2

	)

53 
	#V_ASN1_BIT_STRING
 3

	)

54 
	#V_ASN1_OCTET_STRING
 4

	)

55 
	#V_ASN1_NULL
 5

	)

56 
	#V_ASN1_OBJECT
 6

	)

57 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

58 
	#V_ASN1_EXTERNAL
 8

	)

59 
	#V_ASN1_REAL
 9

	)

60 
	#V_ASN1_ENUMERATED
 10

	)

61 
	#V_ASN1_UTF8STRING
 12

	)

62 
	#V_ASN1_SEQUENCE
 16

	)

63 
	#V_ASN1_SET
 17

	)

64 
	#V_ASN1_NUMERICSTRING
 18

	)

65 
	#V_ASN1_PRINTABLESTRING
 19

	)

66 
	#V_ASN1_T61STRING
 20

	)

67 
	#V_ASN1_TELETEXSTRING
 20

	)

68 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

69 
	#V_ASN1_IA5STRING
 22

	)

70 
	#V_ASN1_UTCTIME
 23

	)

71 
	#V_ASN1_GENERALIZEDTIME
 24

	)

72 
	#V_ASN1_GRAPHICSTRING
 25

	)

73 
	#V_ASN1_ISO64STRING
 26

	)

74 
	#V_ASN1_VISIBLESTRING
 26

	)

75 
	#V_ASN1_GENERALSTRING
 27

	)

76 
	#V_ASN1_UNIVERSALSTRING
 28

	)

77 
	#V_ASN1_BMPSTRING
 30

	)

85 
	#V_ASN1_NEG
 0x100

	)

86 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

87 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

90 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

91 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

92 
	#B_ASN1_T61STRING
 0x0004

	)

93 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

94 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

95 
	#B_ASN1_IA5STRING
 0x0010

	)

96 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

97 
	#B_ASN1_ISO64STRING
 0x0040

	)

98 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

99 
	#B_ASN1_GENERALSTRING
 0x0080

	)

100 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

101 
	#B_ASN1_OCTET_STRING
 0x0200

	)

102 
	#B_ASN1_BIT_STRING
 0x0400

	)

103 
	#B_ASN1_BMPSTRING
 0x0800

	)

104 
	#B_ASN1_UNKNOWN
 0x1000

	)

105 
	#B_ASN1_UTF8STRING
 0x2000

	)

106 
	#B_ASN1_UTCTIME
 0x4000

	)

107 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

108 
	#B_ASN1_SEQUENCE
 0x10000

	)

110 
	#MBSTRING_FLAG
 0x1000

	)

111 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

112 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

113 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

114 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

115 
	#SMIME_OLDMIME
 0x400

	)

116 
	#SMIME_CRLFEOL
 0x800

	)

117 
	#SMIME_STREAM
 0x1000

	)

118 
X509_Æg‹_°
;

119 
DEFINE_STACK_OF
(
X509_ALGOR
)

121 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

127 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

135 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

140 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

142 
	#ASN1_STRING_FLAG_EMBED
 0x080

	)

144 
	#ASN1_STRING_FLAG_X509_TIME
 0x100

	)

146 
	sa¢1_°rög_°
 {

147 
Àngth
;

148 
ty≥
;

149 *
d©a
;

155 
Êags
;

164 
	sASN1_ENCODING_°
 {

165 *
íc
;

166 
Àn
;

167 
modifõd
;

168 } 
	tASN1_ENCODING
;

171 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

173 
	#STABLE_FLAGS_MALLOC
 0x01

	)

180 
	#STABLE_FLAGS_CLEAR
 
STABLE_FLAGS_MALLOC


	)

181 
	#STABLE_NO_MASK
 0x02

	)

182 
	#DIRSTRING_TYPE
 \

183 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

184 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

186 
	sa¢1_°rög_èbÀ_°
 {

187 
nid
;

188 
mösize
;

189 
maxsize
;

190 
mask
;

191 
Êags
;

192 } 
	tASN1_STRING_TABLE
;

194 
DEFINE_STACK_OF
(
ASN1_STRING_TABLE
)

198 
	#ub_«me
 32768

	)

199 
	#ub_comm⁄_«me
 64

	)

200 
	#ub_loˇlôy_«me
 128

	)

201 
	#ub_°©e_«me
 128

	)

202 
	#ub_‹g™iz©i⁄_«me
 64

	)

203 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

204 
	#ub_tôÀ
 64

	)

205 
	#ub_emaû_addªss
 128

	)

210 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

211 
ASN1_TLC_°
 
	tASN1_TLC
;

213 
ASN1_VALUE_°
 
	tASN1_VALUE
;

217 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

219 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

220 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

222 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

223 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

224 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

226 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

227 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

228 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

230 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

231 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

232 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

233 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

235 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

236 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

237 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

238 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

240 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

241 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

243 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

244 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

245 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

247 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

248 
ty≥
 *
«me
##
	`_√w
(); \

249 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

251 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

252 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

254 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

255 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

256 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

258 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

259 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

260 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

262 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

263 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

264 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

265 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

266 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

267 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

268 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

269 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

270 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

271 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

273 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

274 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

275 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

277 
TYPEDEF_D2I2D_OF
();

315 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


318 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

321 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

324 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

326 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

328 
	#DECLARE_ASN1_ITEM
(
«me
) \

329 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

339 c⁄° 
	tASN1_ITEM
 *
	tASN1_ITEM_EXP
 ();

342 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

345 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

347 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

349 
	#DECLARE_ASN1_ITEM
(
«me
) \

350 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

361 
	#ASN1_STRFLGS_ESC_2253
 1

	)

362 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

363 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

370 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

375 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

377 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

379 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

390 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

398 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

401 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

411 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

412 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

419 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

424 
	#ASN1_STRFLGS_ESC_2254
 0x400

	)

431 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

432 
ASN1_STRFLGS_ESC_CTRL
 | \

433 
ASN1_STRFLGS_ESC_MSB
 | \

434 
ASN1_STRFLGS_UTF8_CONVERT
 | \

435 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

436 
ASN1_STRFLGS_DUMP_DER
)

	)

438 
DEFINE_STACK_OF
(
ASN1_INTEGER
)

440 
DEFINE_STACK_OF
(
ASN1_GENERALSTRING
)

442 
DEFINE_STACK_OF
(
ASN1_UTF8STRING
)

444 
	sa¢1_ty≥_°
 {

445 
ty≥
;

447 *
±r
;

448 
ASN1_BOOLEAN
 
boﬁón
;

449 
ASN1_STRING
 *
a¢1_°rög
;

450 
ASN1_OBJECT
 *
obje˘
;

451 
ASN1_INTEGER
 *
öãgî
;

452 
ASN1_ENUMERATED
 *
íumî©ed
;

453 
ASN1_BIT_STRING
 *
bô_°rög
;

454 
ASN1_OCTET_STRING
 *
o˘ë_°rög
;

455 
ASN1_PRINTABLESTRING
 *
¥öèbÀ°rög
;

456 
ASN1_T61STRING
 *
t61°rög
;

457 
ASN1_IA5STRING
 *
ü5°rög
;

458 
ASN1_GENERALSTRING
 *
gíîÆ°rög
;

459 
ASN1_BMPSTRING
 *
bmp°rög
;

460 
ASN1_UNIVERSALSTRING
 *
univîßl°rög
;

461 
ASN1_UTCTIME
 *
ut˘ime
;

462 
ASN1_GENERALIZEDTIME
 *
gíîÆizedtime
;

463 
ASN1_VISIBLESTRING
 *
visibÀ°rög
;

464 
ASN1_UTF8STRING
 *
utf8°rög
;

469 
ASN1_STRING
 *
£t
;

470 
ASN1_STRING
 *
£quí˚
;

471 
ASN1_VALUE
 *
a¢1_vÆue
;

472 } 
vÆue
;

473 } 
	tASN1_TYPE
;

475 
DEFINE_STACK_OF
(
ASN1_TYPE
)

477 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

479 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

480 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

483 
	sBIT_STRING_BITNAME_°
 {

484 
bônum
;

485 c⁄° *
 ame
;

486 c⁄° *
¢ame
;

487 } 
	tBIT_STRING_BITNAME
;

489 
	#B_ASN1_TIME
 \

490 
B_ASN1_UTCTIME
 | \

491 
B_ASN1_GENERALIZEDTIME


	)

493 
	#B_ASN1_PRINTABLE
 \

494 
B_ASN1_NUMERICSTRING
| \

495 
B_ASN1_PRINTABLESTRING
| \

496 
B_ASN1_T61STRING
| \

497 
B_ASN1_IA5STRING
| \

498 
B_ASN1_BIT_STRING
| \

499 
B_ASN1_UNIVERSALSTRING
|\

500 
B_ASN1_BMPSTRING
|\

501 
B_ASN1_UTF8STRING
|\

502 
B_ASN1_SEQUENCE
|\

503 
B_ASN1_UNKNOWN


	)

505 
	#B_ASN1_DIRECTORYSTRING
 \

506 
B_ASN1_PRINTABLESTRING
| \

507 
B_ASN1_TELETEXSTRING
|\

508 
B_ASN1_BMPSTRING
|\

509 
B_ASN1_UNIVERSALSTRING
|\

510 
B_ASN1_UTF8STRING


	)

512 
	#B_ASN1_DISPLAYTEXT
 \

513 
B_ASN1_IA5STRING
| \

514 
B_ASN1_VISIBLESTRING
| \

515 
B_ASN1_BMPSTRING
|\

516 
B_ASN1_UTF8STRING


	)

518 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

520 
ASN1_TYPE_gë
(c⁄° 
ASN1_TYPE
 *
a
);

521 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

522 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

523 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

525 
ASN1_TYPE
 *
ASN1_TYPE_∑ck_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, *
s
, ASN1_TYPE **
t
);

526 *
ASN1_TYPE_u≈ack_£quí˚
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_TYPE
 *
t
);

528 
ASN1_OBJECT
 *
ASN1_OBJECT_√w
();

529 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

530 
i2d_ASN1_OBJECT
(c⁄° 
ASN1_OBJECT
 *
a
, **
µ
);

531 
ASN1_OBJECT
 *
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
, c⁄° **
µ
,

532 
Àngth
);

534 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

536 
DEFINE_STACK_OF
(
ASN1_OBJECT
)

538 
ASN1_STRING
 *
ASN1_STRING_√w
();

539 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

540 
ASN1_STRING_˛ór_‰ì
(
ASN1_STRING
 *
a
);

541 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

542 
ASN1_STRING
 *
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

543 
ASN1_STRING
 *
ASN1_STRING_ty≥_√w
(
ty≥
);

544 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

549 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

550 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

551 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

552 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

553 
ASN1_STRING_ty≥
(c⁄° 
ASN1_STRING
 *
x
);

554 
DEPRECATEDIN_1_1_0
(*
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
))

555 c⁄° *
ASN1_STRING_gë0_d©a
(c⁄° 
ASN1_STRING
 *
x
);

557 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

558 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
, 
Àngth
);

559 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

560 
ASN1_BIT_STRING_gë_bô
(c⁄° 
ASN1_BIT_STRING
 *
a
, 
n
);

561 
ASN1_BIT_STRING_check
(c⁄° 
ASN1_BIT_STRING
 *
a
,

562 c⁄° *
Êags
, 
Êags_Àn
);

564 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

565 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

566 
ASN1_BIT_STRING_num_asc
(c⁄° *
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

567 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, c⁄° *
«me
, 
vÆue
,

568 
BIT_STRING_BITNAME
 *
tbl
);

570 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

571 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
, c⁄° **
µ
,

572 
Àngth
);

573 
ASN1_INTEGER
 *
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

574 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

576 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

578 
ASN1_UTCTIME_check
(c⁄° 
ASN1_UTCTIME
 *
a
);

579 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
, 
time_t
 
t
);

580 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

581 
off£t_day
, 
off£t_£c
);

582 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

583 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

585 
ASN1_GENERALIZEDTIME_check
(c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

586 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,

587 
time_t
 
t
);

588 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

589 
time_t
 
t
, 
off£t_day
,

590 
off£t_£c
);

591 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

593 
ASN1_TIME_diff
(*
pday
, *
p£c
,

594 c⁄° 
ASN1_TIME
 *
‰om
, c⁄° ASN1_TIME *
to
);

596 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

597 
ASN1_OCTET_STRING
 *
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

598 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
,

599 c⁄° 
ASN1_OCTET_STRING
 *
b
);

600 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
,

601 
Àn
);

603 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

604 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

605 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

606 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

607 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

609 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

610 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

612 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

614 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

615 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

616 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

617 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

618 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

619 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

620 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

621 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

622 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

624 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

626 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
, 
time_t
 
t
);

627 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
, 
time_t
 
t
,

628 
off£t_day
, 
off£t_£c
);

629 
ASN1_TIME_check
(c⁄° 
ASN1_TIME
 *
t
);

630 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(c⁄° 
ASN1_TIME
 *
t
,

631 
ASN1_GENERALIZEDTIME
 **
out
);

632 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

633 
ASN1_TIME_£t_°rög_X509
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

634 
ASN1_TIME_to_tm
(c⁄° 
ASN1_TIME
 *
s
, 
tm
 *tm);

635 
ASN1_TIME_n‹mÆize
(
ASN1_TIME
 *
s
);

636 
ASN1_TIME_cmp_time_t
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 
t
);

637 
ASN1_TIME_com∑ª
(c⁄° 
ASN1_TIME
 *
a
, c⁄° ASN1_TIME *
b
);

639 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, c⁄° 
ASN1_INTEGER
 *
a
);

640 
a2i_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
bs
, *
buf
, 
size
);

641 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, c⁄° 
ASN1_ENUMERATED
 *
a
);

642 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
bs
, *
buf
, 
size
);

643 
i2a_ASN1_OBJECT
(
BIO
 *
bp
, c⁄° 
ASN1_OBJECT
 *
a
);

644 
a2i_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
bs
, *
buf
, 
size
);

645 
i2a_ASN1_STRING
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
a
, 
ty≥
);

646 
i2t_ASN1_OBJECT
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
);

648 
a2d_ASN1_OBJECT
(*
out
, 
ﬁí
, c⁄° *
buf
, 
num
);

649 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
, 
Àn
,

650 c⁄° *
¢
, c⁄° *
 
);

652 
ASN1_INTEGER_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

653 
ASN1_INTEGER_£t_öt64
(
ASN1_INTEGER
 *
a
, 
öt64_t
 
r
);

654 
ASN1_INTEGER_gë_uöt64
(
uöt64_t
 *
¥
, c⁄° 
ASN1_INTEGER
 *
a
);

655 
ASN1_INTEGER_£t_uöt64
(
ASN1_INTEGER
 *
a
, 
uöt64_t
 
r
);

657 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

658 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

659 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

660 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
, BIGNUM *
bn
);

662 
ASN1_ENUMERATED_gë_öt64
(
öt64_t
 *
¥
, c⁄° 
ASN1_ENUMERATED
 *
a
);

663 
ASN1_ENUMERATED_£t_öt64
(
ASN1_ENUMERATED
 *
a
, 
öt64_t
 
r
);

666 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

667 
ASN1_ENUMERATED_gë
(c⁄° 
ASN1_ENUMERATED
 *
a
);

668 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(c⁄° 
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

669 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(c⁄° 
ASN1_ENUMERATED
 *
ai
, BIGNUM *
bn
);

673 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

675 
ASN1_èg2bô
(
èg
);

678 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

679 *
p˛ass
, 
omax
);

680 
ASN1_check_öföôe_íd
(**
p
, 
Àn
);

681 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
, 
Àn
);

682 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

683 
èg
, 
x˛ass
);

684 
ASN1_put_eoc
(**
µ
);

685 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

688 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

690 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

691 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

692 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

693 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

695 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

696 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

697 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

698 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

700 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

704 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

705 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

706 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

708 #i‚de‡
OPENSSL_NO_STDIO


709 *
ASN1_d2i_Â
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

711 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

712 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

713 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

714 
ö
, \

715 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

717 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

718 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
, 
FILE
 *
out
, *
x
);

720 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

721 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

722 
out
, \

723 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

725 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

726 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

727 
out
, \

728 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

730 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

731 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, c⁄° 
ASN1_STRING
 *
°r
, 
Êags
);

734 
ASN1_STRING_to_UTF8
(**
out
, c⁄° 
ASN1_STRING
 *
ö
);

736 *
ASN1_d2i_bio
(*(*
x√w
Ë(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

738 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

739 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

740 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

741 
ö
, \

742 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

744 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

745 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
, 
BIO
 *
out
, *
x
);

747 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

748 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

749 
out
, \

750 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

752 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

753 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

754 
out
, \

755 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

757 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

758 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

759 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

760 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

761 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

762 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, c⁄° 
ASN1_STRING
 *
°r
, 
Êags
);

763 
ASN1_buf_¥öt
(
BIO
 *
bp
, c⁄° *
buf
, 
size_t
 
buÊí
, 
off
);

764 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

765 *
buf
, 
off
);

766 
ASN1_∑r£
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
);

767 
ASN1_∑r£_dump
(
BIO
 *
bp
, c⁄° *
µ
, 
Àn
, 
ödít
,

768 
dump
);

769 c⁄° *
ASN1_èg2°r
(
èg
);

773 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

775 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
, *
d©a
, 
Àn
);

776 
ASN1_TYPE_gë_o˘ë°rög
(c⁄° 
ASN1_TYPE
 *
a
, *
d©a
, 
max_Àn
);

777 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

778 *
d©a
, 
Àn
);

779 
ASN1_TYPE_gë_öt_o˘ë°rög
(c⁄° 
ASN1_TYPE
 *
a
, *
num
,

780 *
d©a
, 
max_Àn
);

782 *
ASN1_ôem_u≈ack
(c⁄° 
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

784 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
,

785 
ASN1_OCTET_STRING
 **
o˘
);

787 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

788 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

789 
ASN1_STRING_gë_deÁu…_mask
();

790 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

791 
öf‹m
, 
mask
);

792 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

793 
öf‹m
, 
mask
,

794 
mösize
, 
maxsize
);

796 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

797 c⁄° *
ö
, 
öÀn
,

798 
öf‹m
, 
nid
);

799 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

800 
ASN1_STRING_TABLE_add
(, , , , );

801 
ASN1_STRING_TABLE_˛ónup
();

806 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

807 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

808 
ASN1_VALUE
 *
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
,

809 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

810 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

811 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
,

812 c⁄° 
ASN1_ITEM
 *
ô
);

814 
ASN1_add_oid_moduÀ
();

815 
ASN1_add_°abÀ_moduÀ
();

817 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(c⁄° *
°r
, 
CONF
 *
nc⁄f
);

818 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(c⁄° *
°r
, 
X509V3_CTX
 *
˙f
);

819 
ASN1_°r2mask
(c⁄° *
°r
, *
pmask
);

824 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

826 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

828 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

830 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

832 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

834 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

836 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

838 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

840 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

842 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

843 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

844 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

845 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

846 
ASN1_PCTX_gë_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

847 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

848 
ASN1_PCTX_gë_nm_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

849 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

850 
ASN1_PCTX_gë_˚π_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

851 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

852 
ASN1_PCTX_gë_oid_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

853 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

854 
ASN1_PCTX_gë_°r_Êags
(c⁄° 
ASN1_PCTX
 *
p
);

855 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

857 
ASN1_SCTX
 *
ASN1_SCTX_√w
((*
sˇn_cb
Ë(ASN1_SCTX *
˘x
));

858 
ASN1_SCTX_‰ì
(
ASN1_SCTX
 *
p
);

859 c⁄° 
ASN1_ITEM
 *
ASN1_SCTX_gë_ôem
(
ASN1_SCTX
 *
p
);

860 c⁄° 
ASN1_TEMPLATE
 *
ASN1_SCTX_gë_ãm∂©e
(
ASN1_SCTX
 *
p
);

861 
ASN1_SCTX_gë_Êags
(
ASN1_SCTX
 *
p
);

862 
ASN1_SCTX_£t_≠p_d©a
(
ASN1_SCTX
 *
p
, *
d©a
);

863 *
ASN1_SCTX_gë_≠p_d©a
(
ASN1_SCTX
 *
p
);

865 c⁄° 
BIO_METHOD
 *
BIO_f_a¢1
();

867 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

869 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

870 c⁄° 
ASN1_ITEM
 *
ô
);

871 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

872 c⁄° *
hdr
, c⁄° 
ASN1_ITEM
 *
ô
);

873 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

874 
˘y≥_nid
, 
ec⁄t_nid
,

875 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
, c⁄° 
ASN1_ITEM
 *
ô
);

876 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

877 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

878 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

880 c⁄° 
ASN1_ITEM
 *
ASN1_ITEM_lookup
(c⁄° *
«me
);

881 c⁄° 
ASN1_ITEM
 *
ASN1_ITEM_gë
(
size_t
 
i
);

883 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bio.h

10 #i‚de‡
HEADER_BIO_H


11 
	#HEADER_BIO_H


	)

13 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

18 
	~<°d¨g.h
>

20 
	~<›ís¶/¸y±o.h
>

21 
	~<›ís¶/bi€º.h
>

23 #ifde‡ 
__˝lu•lus


28 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

29 
	#BIO_TYPE_FILTER
 0x0200

	)

30 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

33 
	#BIO_TYPE_NONE
 0

	)

34 
	#BIO_TYPE_MEM
 ( 1|
BIO_TYPE_SOURCE_SINK
)

	)

35 
	#BIO_TYPE_FILE
 ( 2|
BIO_TYPE_SOURCE_SINK
)

	)

37 
	#BIO_TYPE_FD
 ( 4|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

38 
	#BIO_TYPE_SOCKET
 ( 5|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

39 
	#BIO_TYPE_NULL
 ( 6|
BIO_TYPE_SOURCE_SINK
)

	)

40 
	#BIO_TYPE_SSL
 ( 7|
BIO_TYPE_FILTER
)

	)

41 
	#BIO_TYPE_MD
 ( 8|
BIO_TYPE_FILTER
)

	)

42 
	#BIO_TYPE_BUFFER
 ( 9|
BIO_TYPE_FILTER
)

	)

43 
	#BIO_TYPE_CIPHER
 (10|
BIO_TYPE_FILTER
)

	)

44 
	#BIO_TYPE_BASE64
 (11|
BIO_TYPE_FILTER
)

	)

45 
	#BIO_TYPE_CONNECT
 (12|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

46 
	#BIO_TYPE_ACCEPT
 (13|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

48 
	#BIO_TYPE_NBIO_TEST
 (16|
BIO_TYPE_FILTER
)

	)

49 
	#BIO_TYPE_NULL_FILTER
 (17|
BIO_TYPE_FILTER
)

	)

50 
	#BIO_TYPE_BIO
 (19|
BIO_TYPE_SOURCE_SINK
)

	)

51 
	#BIO_TYPE_LINEBUFFER
 (20|
BIO_TYPE_FILTER
)

	)

52 
	#BIO_TYPE_DGRAM
 (21|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

53 
	#BIO_TYPE_ASN1
 (22|
BIO_TYPE_FILTER
)

	)

54 
	#BIO_TYPE_COMP
 (23|
BIO_TYPE_FILTER
)

	)

55 #i‚de‡
OPENSSL_NO_SCTP


56 
	#BIO_TYPE_DGRAM_SCTP
 (24|
BIO_TYPE_SOURCE_SINK
|
BIO_TYPE_DESCRIPTOR
)

	)

59 
	#BIO_TYPE_START
 128

	)

65 
	#BIO_NOCLOSE
 0x00

	)

66 
	#BIO_CLOSE
 0x01

	)

71 
	#BIO_CTRL_RESET
 1

	)

72 
	#BIO_CTRL_EOF
 2

	)

73 
	#BIO_CTRL_INFO
 3

	)

74 
	#BIO_CTRL_SET
 4

	)

75 
	#BIO_CTRL_GET
 5

	)

76 
	#BIO_CTRL_PUSH
 6

	)

77 
	#BIO_CTRL_POP
 7

	)

78 
	#BIO_CTRL_GET_CLOSE
 8

	)

79 
	#BIO_CTRL_SET_CLOSE
 9

	)

80 
	#BIO_CTRL_PENDING
 10

	)

81 
	#BIO_CTRL_FLUSH
 11

	)

82 
	#BIO_CTRL_DUP
 12

	)

83 
	#BIO_CTRL_WPENDING
 13

	)

84 
	#BIO_CTRL_SET_CALLBACK
 14

	)

85 
	#BIO_CTRL_GET_CALLBACK
 15

	)

87 
	#BIO_CTRL_PEEK
 29

	)

88 
	#BIO_CTRL_SET_FILENAME
 30

	)

91 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

92 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

94 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

95 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

96 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

97 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

99 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

100 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

103 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

106 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

107 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

108 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

109 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

113 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

117 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

118 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

120 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

122 
	#BIO_CTRL_DGRAM_SET_DONT_FRAG
 48

	)

124 
	#BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
 49

	)

127 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

128 #i‚de‡
OPENSSL_NO_SCTP


130 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

131 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

132 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

133 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

134 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

135 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

136 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

137 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

138 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

139 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

142 
	#BIO_CTRL_DGRAM_SET_PEEK_MODE
 71

	)

145 
	#BIO_FP_READ
 0x02

	)

146 
	#BIO_FP_WRITE
 0x04

	)

147 
	#BIO_FP_APPEND
 0x08

	)

148 
	#BIO_FP_TEXT
 0x10

	)

150 
	#BIO_FLAGS_READ
 0x01

	)

151 
	#BIO_FLAGS_WRITE
 0x02

	)

152 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

153 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

154 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

155 #i‚de‡
BIO_FLAGS_UPLINK


160 
	#BIO_FLAGS_UPLINK
 0

	)

163 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

170 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

171 
	#BIO_FLAGS_NONCLEAR_RST
 0x400

	)

172 
	#BIO_FLAGS_IN_EOF
 0x800

	)

174 
bio_addr_°
 
	tBIO_ADDR
;

175 
bio_addröfo_°
 
	tBIO_ADDRINFO
;

177 
BIO_gë_√w_ödex
();

178 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

179 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

180 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

182 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

183 
	#BIO_£t_ªåy_•ecül
(
b
) \

184 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

185 
	#BIO_£t_ªåy_ªad
(
b
) \

186 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

187 
	#BIO_£t_ªåy_wrôe
(
b
) \

188 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

191 
	#BIO_˛ór_ªåy_Êags
(
b
) \

192 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

193 
	#BIO_gë_ªåy_Êags
(
b
) \

194 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

197 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

198 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

199 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

200 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

201 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

213 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

215 
	#BIO_RR_CONNECT
 0x02

	)

217 
	#BIO_RR_ACCEPT
 0x03

	)

220 
	#BIO_CB_FREE
 0x01

	)

221 
	#BIO_CB_READ
 0x02

	)

222 
	#BIO_CB_WRITE
 0x03

	)

223 
	#BIO_CB_PUTS
 0x04

	)

224 
	#BIO_CB_GETS
 0x05

	)

225 
	#BIO_CB_CTRL
 0x06

	)

231 
	#BIO_CB_RETURN
 0x80

	)

232 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
)

	)

233 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

234 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

236 (*
BIO_ˇŒback_‚
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
, 
	t¨gi
,

237 
	t¨gl
, 
	tªt
);

238 (*
BIO_ˇŒback_‚_ex
)(
	tBIO
 *
	tb
, 
	t›î
, c⁄° *
	t¨gp
,

239 
	tsize_t
 
	tÀn
, 
	t¨gi
,

240 
	t¨gl
, 
	tªt
, 
	tsize_t
 *
	t¥o˚s£d
);

241 
BIO_ˇŒback_‚
 
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
);

242 
BIO_£t_ˇŒback
(
BIO
 *
b
, 
BIO_ˇŒback_‚
 
ˇŒback
);

244 
BIO_ˇŒback_‚_ex
 
BIO_gë_ˇŒback_ex
(c⁄° 
BIO
 *
b
);

245 
BIO_£t_ˇŒback_ex
(
BIO
 *
b
, 
BIO_ˇŒback_‚_ex
 
ˇŒback
);

247 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

248 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

250 
bio_mëhod_°
 
	tBIO_METHOD
;

252 c⁄° *
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

253 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

255 
	tBIO_öfo_cb
(
	tBIO
 *, , );

256 
BIO_öfo_cb
 
	tbio_öfo_cb
;

258 
DEFINE_STACK_OF
(
BIO
)

261 
	ta¢1_ps_func
 (
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
,

262 *
	t∑rg
);

264 #i‚de‡
OPENSSL_NO_SCTP


266 
	sbio_dgøm_s˘p_¢döfo
 {

267 
uöt16_t
 
¢d_sid
;

268 
uöt16_t
 
¢d_Êags
;

269 
uöt32_t
 
¢d_µid
;

270 
uöt32_t
 
¢d_c⁄ãxt
;

273 
	sbio_dgøm_s˘p_rcvöfo
 {

274 
uöt16_t
 
rcv_sid
;

275 
uöt16_t
 
rcv_s¢
;

276 
uöt16_t
 
rcv_Êags
;

277 
uöt32_t
 
rcv_µid
;

278 
uöt32_t
 
rcv_t¢
;

279 
uöt32_t
 
rcv_cumt¢
;

280 
uöt32_t
 
rcv_c⁄ãxt
;

283 
	sbio_dgøm_s˘p_¥öfo
 {

284 
uöt16_t
 
¥_pﬁicy
;

285 
uöt32_t
 
¥_vÆue
;

293 
	#BIO_C_SET_CONNECT
 100

	)

294 
	#BIO_C_DO_STATE_MACHINE
 101

	)

295 
	#BIO_C_SET_NBIO
 102

	)

297 
	#BIO_C_SET_FD
 104

	)

298 
	#BIO_C_GET_FD
 105

	)

299 
	#BIO_C_SET_FILE_PTR
 106

	)

300 
	#BIO_C_GET_FILE_PTR
 107

	)

301 
	#BIO_C_SET_FILENAME
 108

	)

302 
	#BIO_C_SET_SSL
 109

	)

303 
	#BIO_C_GET_SSL
 110

	)

304 
	#BIO_C_SET_MD
 111

	)

305 
	#BIO_C_GET_MD
 112

	)

306 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

307 
	#BIO_C_SET_BUF_MEM
 114

	)

308 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

309 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

310 
	#BIO_C_SET_BUFF_SIZE
 117

	)

311 
	#BIO_C_SET_ACCEPT
 118

	)

312 
	#BIO_C_SSL_MODE
 119

	)

313 
	#BIO_C_GET_MD_CTX
 120

	)

315 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

316 
	#BIO_C_GET_CONNECT
 123

	)

317 
	#BIO_C_GET_ACCEPT
 124

	)

318 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

319 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

320 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

321 
	#BIO_C_FILE_SEEK
 128

	)

322 
	#BIO_C_GET_CIPHER_CTX
 129

	)

323 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

325 
	#BIO_C_SET_BIND_MODE
 131

	)

326 
	#BIO_C_GET_BIND_MODE
 132

	)

327 
	#BIO_C_FILE_TELL
 133

	)

328 
	#BIO_C_GET_SOCKS
 134

	)

329 
	#BIO_C_SET_SOCKS
 135

	)

331 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

332 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

333 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

334 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

335 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

336 
	#BIO_C_GET_READ_REQUEST
 141

	)

337 
	#BIO_C_SHUTDOWN_WR
 142

	)

338 
	#BIO_C_NREAD0
 143

	)

339 
	#BIO_C_NREAD
 144

	)

340 
	#BIO_C_NWRITE0
 145

	)

341 
	#BIO_C_NWRITE
 146

	)

342 
	#BIO_C_RESET_READ_REQUEST
 147

	)

343 
	#BIO_C_SET_MD_CTX
 148

	)

345 
	#BIO_C_SET_PREFIX
 149

	)

346 
	#BIO_C_GET_PREFIX
 150

	)

347 
	#BIO_C_SET_SUFFIX
 151

	)

348 
	#BIO_C_GET_SUFFIX
 152

	)

350 
	#BIO_C_SET_EX_ARG
 153

	)

351 
	#BIO_C_GET_EX_ARG
 154

	)

353 
	#BIO_C_SET_CONNECT_MODE
 155

	)

355 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

356 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

358 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

360 #i‚de‡
OPENSSL_NO_SOCK


363 
	#BIO_FAMILY_IPV4
 4

	)

364 
	#BIO_FAMILY_IPV6
 6

	)

365 
	#BIO_FAMILY_IPANY
 256

	)

368 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0, \

369 (*)(
«me
))

	)

370 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1, \

371 (*)(
p‹t
))

	)

372 
	#BIO_£t_c⁄n_addªss
(
b
,
addr
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2, \

373 (*)(
addr
))

	)

374 
	#BIO_£t_c⁄n_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_CONNECT
,3,f)

	)

375 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0))

	)

376 
	#BIO_gë_c⁄n_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1))

	)

377 
	#BIO_gë_c⁄n_addªss
(
b
Ë((c⁄° 
BIO_ADDR
 *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2))

	)

378 
	#BIO_gë_c⁄n_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CONNECT
,3,
NULL
)

	)

379 
	#BIO_£t_c⁄n_mode
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT_MODE
,“),
NULL
)

	)

382 
	#BIO_£t_ac˚±_«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0, \

383 (*)(
«me
))

	)

384 
	#BIO_£t_ac˚±_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1, \

385 (*)(
p‹t
))

	)

386 
	#BIO_gë_ac˚±_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0))

	)

387 
	#BIO_gë_ac˚±_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,1))

	)

388 
	#BIO_gë_≥î_«me
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,2))

	)

389 
	#BIO_gë_≥î_p‹t
(
b
Ë((c⁄° *)
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,3))

	)

391 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,“)?(*)"a":
NULL
)

	)

392 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,3, \

393 (*)(
bio
))

	)

394 
	#BIO_£t_ac˚±_ù_Ámûy
(
b
,
f
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_ACCEPT
,4,f)

	)

395 
	#BIO_gë_ac˚±_ù_Ámûy
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_ACCEPT
,4,
NULL
)

	)

398 
	#BIO_BIND_NORMAL
 0

	)

399 
	#BIO_BIND_REUSEADDR
 
BIO_SOCK_REUSEADDR


	)

400 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 
BIO_SOCK_REUSEADDR


	)

401 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

402 
	#BIO_gë_böd_mode
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

405 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

406 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

409 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

412 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

413 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)(c))

	)

416 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)(Â))

	)

417 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)(Âp))

	)

420 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

421 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

427 #ifde‡
CONST_STRICT


432 
BIO_ªad_fûíame
(
BIO
 *
b
, c⁄° *
«me
);

434 
	#BIO_ªad_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

435 
BIO_CLOSE
|
BIO_FP_READ
,(*)(
«me
))

	)

437 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

438 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

439 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

440 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

441 
	#BIO_rw_fûíame
(
b
,
«me
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

442 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

450 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)(s¶))

	)

451 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)(s¶p))

	)

452 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

453 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

454 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
)

	)

455 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

456 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
)

	)

457 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

458 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
)

	)

463 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*)’p))

	)

464 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)(bm))

	)

465 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0, \

466 (*)(
µ
))

	)

467 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

468 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

471 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

472 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

473 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

474 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

475 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

478 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

480 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

481 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

482 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

483 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

484 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

485 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

487 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

488 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

489 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

490 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

491 
cbp
)

	)

492 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

495 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

496 
	#BIO_buf„r_≥ek
(
b
,
s
,
l
Ë
	`BIO_˘æ
(b,
BIO_CTRL_PEEK
,÷),(s))

	)

499 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

500 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

501 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

502 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

503 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

505 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

506 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

507 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

508 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

509 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

512 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

513 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)(
≥î
))

	)

514 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
,
≥î
) \

515 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 0, (*)(
≥î
))

	)

516 
	#BIO_dgøm_ªcv_timedout
(
b
) \

517 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

518 
	#BIO_dgøm_£nd_timedout
(
b
) \

519 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

520 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

521 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)(
≥î
))

	)

522 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

523 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)(
≥î
))

	)

524 
	#BIO_dgøm_gë_mtu_ovîhód
(
b
) \

525 ()
	`BIO_˘æ
((
b
), 
BIO_CTRL_DGRAM_GET_MTU_OVERHEAD
, 0, 
NULL
)

	)

527 
	#BIO_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

528 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_BIO
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

529 
BIO_£t_ex_d©a
(
BIO
 *
bio
, 
idx
, *
d©a
);

530 *
BIO_gë_ex_d©a
(
BIO
 *
bio
, 
idx
);

531 
uöt64_t
 
BIO_numbî_ªad
(
BIO
 *
bio
);

532 
uöt64_t
 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

535 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

536 
a¢1_ps_func
 *
¥efix_‰ì
);

537 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

538 
a¢1_ps_func
 **
µªfix_‰ì
);

539 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

540 
a¢1_ps_func
 *
suffix_‰ì
);

541 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

542 
a¢1_ps_func
 **
psuffix_‰ì
);

544 c⁄° 
BIO_METHOD
 *
BIO_s_fûe
();

545 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

546 #i‚de‡
OPENSSL_NO_STDIO


547 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

549 
BIO
 *
BIO_√w
(c⁄° 
BIO_METHOD
 *
ty≥
);

550 
BIO_‰ì
(
BIO
 *
a
);

551 
BIO_£t_d©a
(
BIO
 *
a
, *
±r
);

552 *
BIO_gë_d©a
(
BIO
 *
a
);

553 
BIO_£t_öô
(
BIO
 *
a
, 
öô
);

554 
BIO_gë_öô
(
BIO
 *
a
);

555 
BIO_£t_shutdown
(
BIO
 *
a
, 
shut
);

556 
BIO_gë_shutdown
(
BIO
 *
a
);

557 
BIO_v‰ì
(
BIO
 *
a
);

558 
BIO_up_ªf
(
BIO
 *
a
);

559 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
dÀn
);

560 
BIO_ªad_ex
(
BIO
 *
b
, *
d©a
, 
size_t
 
dÀn
, size_à*
ªadbyãs
);

561 
BIO_gës
(
BIO
 *
bp
, *
buf
, 
size
);

562 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
dÀn
);

563 
BIO_wrôe_ex
(
BIO
 *
b
, c⁄° *
d©a
, 
size_t
 
dÀn
, size_à*
wrôãn
);

564 
BIO_puts
(
BIO
 *
bp
, c⁄° *
buf
);

565 
BIO_ödít
(
BIO
 *
b
, 
ödít
, 
max
);

566 
BIO_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, *
∑rg
);

567 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, 
BIO_öfo_cb
 *
Â
);

568 *
BIO_±r_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
);

569 
BIO_öt_˘æ
(
BIO
 *
bp
, 
cmd
, 
œrg
, 
ürg
);

570 
BIO
 *
BIO_push
(BIO *
b
, BIO *
≠≥nd
);

571 
BIO
 *
BIO_p›
(BIO *
b
);

572 
BIO_‰ì_Æl
(
BIO
 *
a
);

573 
BIO
 *
BIO_föd_ty≥
(BIO *
b
, 
bio_ty≥
);

574 
BIO
 *
BIO_√xt
(BIO *
b
);

575 
BIO_£t_√xt
(
BIO
 *
b
, BIO *
√xt
);

576 
BIO
 *
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

577 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

578 
BIO_£t_ªåy_ªas⁄
(
BIO
 *
bio
, 
ªas⁄
);

579 
BIO
 *
BIO_dup_chaö
(BIO *
ö
);

581 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

582 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

583 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

584 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

586 
BIO_debug_ˇŒback
(
BIO
 *
bio
, 
cmd
, c⁄° *
¨gp
, 
¨gi
,

587 
¨gl
, 
ªt
);

589 c⁄° 
BIO_METHOD
 *
BIO_s_mem
();

590 c⁄° 
BIO_METHOD
 *
BIO_s_£cmem
();

591 
BIO
 *
BIO_√w_mem_buf
(c⁄° *
buf
, 
Àn
);

592 #i‚de‡
OPENSSL_NO_SOCK


593 c⁄° 
BIO_METHOD
 *
BIO_s_sockë
();

594 c⁄° 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

595 c⁄° 
BIO_METHOD
 *
BIO_s_ac˚±
();

597 c⁄° 
BIO_METHOD
 *
BIO_s_fd
();

598 c⁄° 
BIO_METHOD
 *
BIO_s_log
();

599 c⁄° 
BIO_METHOD
 *
BIO_s_bio
();

600 c⁄° 
BIO_METHOD
 *
BIO_s_nuŒ
();

601 c⁄° 
BIO_METHOD
 *
BIO_f_nuŒ
();

602 c⁄° 
BIO_METHOD
 *
BIO_f_buf„r
();

603 c⁄° 
BIO_METHOD
 *
BIO_f_löebuf„r
();

604 c⁄° 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

605 #i‚de‡
OPENSSL_NO_DGRAM


606 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm
();

607 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

608 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

609 #i‚de‡
OPENSSL_NO_SCTP


610 c⁄° 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

611 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

612 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

613 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

614 (*
h™dÀ_nŸifiˇti⁄s
Ë(
BIO
 *
bio
,

615 *
c⁄ãxt
,

616 *
buf
),

617 *
c⁄ãxt
);

618 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

619 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

623 #i‚de‡
OPENSSL_NO_SOCK


624 
BIO_sock_should_ªåy
(
i
);

625 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

628 
BIO_fd_should_ªåy
(
i
);

629 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

630 
BIO_dump_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

631 *
u
, c⁄° *
s
, 
Àn
);

632 
BIO_dump_ödít_cb
((*
cb
Ë(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

633 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

634 
BIO_dump
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
);

635 
BIO_dump_ödít
(
BIO
 *
b
, c⁄° *
byãs
, 
Àn
, 
ödít
);

636 #i‚de‡
OPENSSL_NO_STDIO


637 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

638 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

640 
BIO_hex_°rög
(
BIO
 *
out
, 
ödít
, 
width
, *
d©a
,

641 
d©Æí
);

643 #i‚de‡
OPENSSL_NO_SOCK


644 
BIO_ADDR
 *
BIO_ADDR_√w
();

645 
BIO_ADDR_øwmake
(
BIO_ADDR
 *
≠
, 
Ámûy
,

646 c⁄° *
whîe
, 
size_t
 
whîñí
, 
p‹t
);

647 
BIO_ADDR_‰ì
(
BIO_ADDR
 *);

648 
BIO_ADDR_˛ór
(
BIO_ADDR
 *
≠
);

649 
BIO_ADDR_Ámûy
(c⁄° 
BIO_ADDR
 *
≠
);

650 
BIO_ADDR_øwaddªss
(c⁄° 
BIO_ADDR
 *
≠
, *
p
, 
size_t
 *
l
);

651 
BIO_ADDR_øwp‹t
(c⁄° 
BIO_ADDR
 *
≠
);

652 *
BIO_ADDR_ho°«me_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

653 *
BIO_ADDR_£rvi˚_°rög
(c⁄° 
BIO_ADDR
 *
≠
, 
numîic
);

654 *
BIO_ADDR_∑th_°rög
(c⁄° 
BIO_ADDR
 *
≠
);

656 c⁄° 
BIO_ADDRINFO
 *
BIO_ADDRINFO_√xt
(c⁄° BIO_ADDRINFO *
bai
);

657 
BIO_ADDRINFO_Ámûy
(c⁄° 
BIO_ADDRINFO
 *
bai
);

658 
BIO_ADDRINFO_sockty≥
(c⁄° 
BIO_ADDRINFO
 *
bai
);

659 
BIO_ADDRINFO_¥Ÿocﬁ
(c⁄° 
BIO_ADDRINFO
 *
bai
);

660 c⁄° 
BIO_ADDR
 *
BIO_ADDRINFO_addªss
(c⁄° 
BIO_ADDRINFO
 *
bai
);

661 
BIO_ADDRINFO_‰ì
(
BIO_ADDRINFO
 *
bai
);

663 
	eBIO_ho°£rv_¥i‹ôõs
 {

664 
BIO_PARSE_PRIO_HOST
, 
BIO_PARSE_PRIO_SERV


666 
BIO_∑r£_ho°£rv
(c⁄° *
ho°£rv
, **
ho°
, **
£rvi˚
,

667 
BIO_ho°£rv_¥i‹ôõs
 
ho°£rv_¥io
);

668 
	eBIO_lookup_ty≥
 {

669 
BIO_LOOKUP_CLIENT
, 
BIO_LOOKUP_SERVER


671 
BIO_lookup
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

672 
BIO_lookup_ty≥
 
lookup_ty≥
,

673 
Ámûy
, 
sockty≥
, 
BIO_ADDRINFO
 **
ªs
);

674 
BIO_lookup_ex
(c⁄° *
ho°
, c⁄° *
£rvi˚
,

675 
lookup_ty≥
, 
Ámûy
, 
sockty≥
, 
¥Ÿocﬁ
,

676 
BIO_ADDRINFO
 **
ªs
);

677 
BIO_sock_îr‹
(
sock
);

678 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

679 
BIO_sockë_nbio
(
fd
, 
mode
);

680 
BIO_sock_öô
();

681 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

682 
	#BIO_sock_˛ónup
(Ë0Ë

	)

684 
BIO_£t_t˝_ndñay
(
sock
, 
tu∫_⁄
);

686 
DEPRECATEDIN_1_1_0
(
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
))

687 
DEPRECATEDIN_1_1_0
(
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
))

688 
DEPRECATEDIN_1_1_0
(
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
))

689 
DEPRECATEDIN_1_1_0
(
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
, 
mode
))

690 
DEPRECATEDIN_1_1_0
(
BIO_ac˚±
(
sock
, **
ù_p‹t
))

692 
	uBIO_sock_öfo_u
 {

693 
BIO_ADDR
 *
addr
;

695 
	eBIO_sock_öfo_ty≥
 {

696 
BIO_SOCK_INFO_ADDRESS


698 
BIO_sock_öfo
(
sock
,

699 
BIO_sock_öfo_ty≥
 
ty≥
, 
BIO_sock_öfo_u
 *
öfo
);

701 
	#BIO_SOCK_REUSEADDR
 0x01

	)

702 
	#BIO_SOCK_V6_ONLY
 0x02

	)

703 
	#BIO_SOCK_KEEPALIVE
 0x04

	)

704 
	#BIO_SOCK_NONBLOCK
 0x08

	)

705 
	#BIO_SOCK_NODELAY
 0x10

	)

707 
BIO_sockë
(
domaö
, 
sockty≥
, 
¥Ÿocﬁ
, 
›ti⁄s
);

708 
BIO_c⁄√˘
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

709 
BIO_böd
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

710 
BIO_li°í
(
sock
, c⁄° 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

711 
BIO_ac˚±_ex
(
ac˚±_sock
, 
BIO_ADDR
 *
addr
, 
›ti⁄s
);

712 
BIO_˛o£sockë
(
sock
);

714 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

715 
BIO
 *
BIO_√w_c⁄√˘
(c⁄° *
ho°_p‹t
);

716 
BIO
 *
BIO_√w_ac˚±
(c⁄° *
ho°_p‹t
);

719 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

721 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

722 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

729 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

735 
	#os¶_bio__©å__
(
x
)

	)

736 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__STDC_VERSION__
) \

737 && !
deföed
(
__APPLE__
)

742 #i‡
__STDC_VERSION__
 >= 199901L

743 #unde‡
os¶_bio__©å__


744 
	#os¶_bio__©å__
 
__©åibuã__


	)

745 #i‡
__GNUC__
*10 + 
__GNUC_MINOR__
 >= 44

746 
	#os¶_bio__¥ötf__
 
__gnu_¥ötf__


	)

748 
	#os¶_bio__¥ötf__
 
__¥ötf__


	)

752 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

753 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 2, 3)));

754 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

755 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 2, 0)));

756 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

757 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 3, 4)));

758 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

759 
os¶_bio__©å__
((
__f‹m©__
(
os¶_bio__¥ötf__
, 3, 0)));

760 #unde‡
os¶_bio__©å__


761 #unde‡
os¶_bio__¥ötf__


764 
BIO_METHOD
 *
BIO_mëh_√w
(
ty≥
, c⁄° *
«me
);

765 
BIO_mëh_‰ì
(
BIO_METHOD
 *
biom
);

766 (*
BIO_mëh_gë_wrôe
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *, );

767 (*
BIO_mëh_gë_wrôe_ex
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, c⁄° *, 
size_t
,

768 
size_t
 *);

769 
BIO_mëh_£t_wrôe
(
BIO_METHOD
 *
biom
,

770 (*
wrôe
Ë(
BIO
 *, const *, ));

771 
BIO_mëh_£t_wrôe_ex
(
BIO_METHOD
 *
biom
,

772 (*
bwrôe
Ë(
BIO
 *, c⁄° *, 
size_t
, size_t *));

773 (*
BIO_mëh_gë_ªad
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

774 (*
BIO_mëh_gë_ªad_ex
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, 
size_t
, size_t *);

775 
BIO_mëh_£t_ªad
(
BIO_METHOD
 *
biom
,

776 (*
ªad
Ë(
BIO
 *, *, ));

777 
BIO_mëh_£t_ªad_ex
(
BIO_METHOD
 *
biom
,

778 (*
bªad
Ë(
BIO
 *, *, 
size_t
, size_t *));

779 (*
BIO_mëh_gë_puts
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, const *);

780 
BIO_mëh_£t_puts
(
BIO_METHOD
 *
biom
,

781 (*
puts
Ë(
BIO
 *, const *));

782 (*
BIO_mëh_gë_gës
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, *, );

783 
BIO_mëh_£t_gës
(
BIO_METHOD
 *
biom
,

784 (*
gës
Ë(
BIO
 *, *, ));

785 (*
BIO_mëh_gë_˘æ
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *, , , *);

786 
BIO_mëh_£t_˘æ
(
BIO_METHOD
 *
biom
,

787 (*
˘æ
Ë(
BIO
 *, , , *));

788 (*
BIO_mëh_gë_¸óã
(c⁄° 
BIO_METHOD
 *
bi⁄
)Ë(
BIO
 *);

789 
BIO_mëh_£t_¸óã
(
BIO_METHOD
 *
biom
, (*
¸óã
Ë(
BIO
 *));

790 (*
BIO_mëh_gë_de°roy
(c⁄° 
BIO_METHOD
 *
biom
)Ë(
BIO
 *);

791 
BIO_mëh_£t_de°roy
(
BIO_METHOD
 *
biom
, (*
de°roy
Ë(
BIO
 *));

792 (*
BIO_mëh_gë_ˇŒback_˘æ
(c⁄° 
BIO_METHOD
 *
biom
))

793 (
BIO
 *, , 
BIO_öfo_cb
 *);

794 
BIO_mëh_£t_ˇŒback_˘æ
(
BIO_METHOD
 *
biom
,

795 (*
ˇŒback_˘æ
Ë(
BIO
 *, ,

796 
BIO_öfo_cb
 *));

798 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bn.h

11 #i‚de‡
HEADER_BN_H


12 
	#HEADER_BN_H


	)

14 
	~<›ís¶/e_os2.h
>

15 #i‚de‡
OPENSSL_NO_STDIO


16 
	~<°dio.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 
	~<›ís¶/¸y±o.h
>

21 
	~<›ís¶/b√º.h
>

23 #ifde‡ 
__˝lu•lus


30 #ifde‡
SIXTY_FOUR_BIT_LONG


31 
	#BN_ULONG
 

	)

32 
	#BN_BYTES
 8

	)

38 #ifde‡
SIXTY_FOUR_BIT


39 
	#BN_ULONG
 

	)

40 
	#BN_BYTES
 8

	)

43 #ifde‡
THIRTY_TWO_BIT


44 
	#BN_ULONG
 

	)

45 
	#BN_BYTES
 4

	)

48 
	#BN_BITS2
 (
BN_BYTES
 * 8)

	)

49 
	#BN_BITS
 (
BN_BITS2
 * 2)

	)

50 
	#BN_TBIT
 ((
BN_ULONG
)1 << (
BN_BITS2
 - 1))

	)

52 
	#BN_FLG_MALLOCED
 0x01

	)

53 
	#BN_FLG_STATIC_DATA
 0x02

	)

61 
	#BN_FLG_CONSTTIME
 0x04

	)

62 
	#BN_FLG_SECURE
 0x08

	)

64 #i‡
OPENSSL_API_COMPAT
 < 0x00908000L

66 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

67 
	#BN_FLG_FREE
 0x8000

	)

70 
BN_£t_Êags
(
BIGNUM
 *
b
, 
n
);

71 
BN_gë_Êags
(c⁄° 
BIGNUM
 *
b
, 
n
);

74 
	#BN_RAND_TOP_ANY
 -1

	)

75 
	#BN_RAND_TOP_ONE
 0

	)

76 
	#BN_RAND_TOP_TWO
 1

	)

79 
	#BN_RAND_BOTTOM_ANY
 0

	)

80 
	#BN_RAND_BOTTOM_ODD
 1

	)

88 
BN_wôh_Êags
(
BIGNUM
 *
de°
, c⁄° BIGNUM *
b
, 
Êags
);

91 
BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

93 
BN_GENCB
 *
BN_GENCB_√w
();

94 
BN_GENCB_‰ì
(
BN_GENCB
 *
cb
);

97 
BN_GENCB_£t_ﬁd
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , *),

98 *
cb_¨g
);

101 
BN_GENCB_£t
(
BN_GENCB
 *
gícb
, (*
ˇŒback
) (, , BN_GENCB *),

102 *
cb_¨g
);

104 *
BN_GENCB_gë_¨g
(
BN_GENCB
 *
cb
);

106 
	#BN_¥ime_checks
 0

	)

172 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 3747 ? 3 : \

173 (
b
) >= 1345 ? 4 : \

174 (
b
) >= 476 ? 5 : \

175 (
b
) >= 400 ? 6 : \

176 (
b
) >= 347 ? 7 : \

177 (
b
) >= 308 ? 8 : \

178 (
b
) >= 55 ? 27 : \

179  34)

	)

181 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

183 
BN_abs_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

184 
BN_is_zîo
(c⁄° 
BIGNUM
 *
a
);

185 
BN_is_⁄e
(c⁄° 
BIGNUM
 *
a
);

186 
BN_is_w‹d
(c⁄° 
BIGNUM
 *
a
, c⁄° 
BN_ULONG
 
w
);

187 
BN_is_odd
(c⁄° 
BIGNUM
 *
a
);

189 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

191 
BN_zîo_ex
(
BIGNUM
 *
a
);

193 #i‡
OPENSSL_API_COMPAT
 >= 0x00908000L

194 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

196 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

199 c⁄° 
BIGNUM
 *
BN_vÆue_⁄e
();

200 *
BN_›ti⁄s
();

201 
BN_CTX
 *
BN_CTX_√w
();

202 
BN_CTX
 *
BN_CTX_£cuª_√w
();

203 
BN_CTX_‰ì
(
BN_CTX
 *
c
);

204 
BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

205 
BIGNUM
 *
BN_CTX_gë
(
BN_CTX
 *
˘x
);

206 
BN_CTX_íd
(
BN_CTX
 *
˘x
);

207 
BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

208 
BN_¥iv_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

209 
BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

210 
BN_¥iv_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

211 
BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

212 
BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

213 
BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

214 
BN_num_bôs_w‹d
(
BN_ULONG
 
l
);

215 
BN_£curôy_bôs
(
L
, 
N
);

216 
BIGNUM
 *
BN_√w
();

217 
BIGNUM
 *
BN_£cuª_√w
();

218 
BN_˛ór_‰ì
(
BIGNUM
 *
a
);

219 
BIGNUM
 *
BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

220 
BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

221 
BIGNUM
 *
BN_bö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

222 
BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

223 
BN_bn2bö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

224 
BIGNUM
 *
BN_Àbö2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

225 
BN_bn2Àbö∑d
(c⁄° 
BIGNUM
 *
a
, *
to
, 
tﬁí
);

226 
BIGNUM
 *
BN_mpi2bn
(c⁄° *
s
, 
Àn
, BIGNUM *
ªt
);

227 
BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

228 
BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

229 
BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

230 
BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

231 
BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

232 
BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

233 
BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_CTX
 *
˘x
);

238 
BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

243 
BN_is_√g©ive
(c⁄° 
BIGNUM
 *
b
);

245 
BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

246 
BN_CTX
 *
˘x
);

247 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

248 
BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

249 
BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

250 
BN_CTX
 *
˘x
);

251 
BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

252 c⁄° 
BIGNUM
 *
m
);

253 
BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

254 
BN_CTX
 *
˘x
);

255 
BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

256 c⁄° 
BIGNUM
 *
m
);

257 
BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
,

258 
BN_CTX
 *
˘x
);

259 
BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

260 
BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

261 
BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

262 
BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
,

263 
BN_CTX
 *
˘x
);

264 
BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

266 
BN_ULONG
 
BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

267 
BN_ULONG
 
BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

268 
BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

269 
BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

270 
BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

271 
BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

272 
BN_ULONG
 
BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

274 
BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

275 
BN_‰ì
(
BIGNUM
 *
a
);

276 
BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

277 
BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

278 
BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

279 
BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

281 
BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

282 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

283 
BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

284 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

285 
BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

286 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

287 
BN_MONT_CTX
 *
ö_m⁄t
);

288 
BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

289 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

290 
BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

291 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
, c⁄° BIGNUM *
m
,

292 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

293 
BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

294 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

296 
BN_mask_bôs
(
BIGNUM
 *
a
, 
n
);

297 #i‚de‡
OPENSSL_NO_STDIO


298 
BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

300 
BN_¥öt
(
BIO
 *
bio
, c⁄° 
BIGNUM
 *
a
);

301 
BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

302 
BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

303 
BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

304 
BN_˛ór
(
BIGNUM
 *
a
);

305 
BIGNUM
 *
BN_dup
(c⁄° BIGNUM *
a
);

306 
BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

307 
BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

308 
BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

309 *
BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

310 *
BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

311 
BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

312 
BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

313 
BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

314 
BN_gcd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

315 
BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

318 
BIGNUM
 *
BN_mod_övî£
(BIGNUM *
ªt
,

319 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

320 
BIGNUM
 *
BN_mod_sqπ
(BIGNUM *
ªt
,

321 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
, 
BN_CTX
 *
˘x
);

323 
BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

326 
DEPRECATEDIN_0_9_8
(
BIGNUM
 *
BN_gíî©e_¥ime
(BIGNUM *
ªt
, 
bôs
, 
ß„
,

327 c⁄° 
BIGNUM
 *
add
,

328 c⁄° 
BIGNUM
 *
ªm
,

329 (*
ˇŒback
) (, ,

331 *
cb_¨g
))

332 
DEPRECATEDIN_0_9_8
(

333 
BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

334 (*
ˇŒback
) (, , *),

335 
BN_CTX
 *
˘x
, *
cb_¨g
))

336 
DEPRECATEDIN_0_9_8
(

337 
BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
, 
nchecks
,

338 (*
ˇŒback
) (, , *),

339 
BN_CTX
 *
˘x
, *
cb_¨g
,

340 
do_åül_divisi⁄
))

343 
BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
, 
bôs
, 
ß„
, c⁄° BIGNUM *
add
,

344 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

345 
BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

346 
BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
, 
nchecks
, 
BN_CTX
 *
˘x
,

347 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

349 
BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

351 
BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

352 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
,

353 c⁄° 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
e
, 
BN_CTX
 *
˘x
,

354 
BN_GENCB
 *
cb
);

355 
BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
, BIGNUM *
Xp1
,

356 
BIGNUM
 *
Xp2
, c⁄° BIGNUM *
Xp
, c⁄° BIGNUM *
e
,

357 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

359 
BN_MONT_CTX
 *
BN_MONT_CTX_√w
();

360 
BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

361 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

362 
BN_to_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

363 
BN_CTX
 *
˘x
);

364 
BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
BN_MONT_CTX
 *
m⁄t
,

365 
BN_CTX
 *
˘x
);

366 
BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

367 
BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
, c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

368 
BN_MONT_CTX
 *
BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
, BN_MONT_CTX *
‰om
);

369 
BN_MONT_CTX
 *
BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
CRYPTO_RWLOCK
 *
lock
,

370 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

373 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

374 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

376 
BN_BLINDING
 *
BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

377 
BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

378 
BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

379 
BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

380 
BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

381 
BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

382 
BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
,

383 
BN_CTX
 *);

385 
BN_BLINDING_is_cuºít_thªad
(
BN_BLINDING
 *
b
);

386 
BN_BLINDING_£t_cuºít_thªad
(
BN_BLINDING
 *
b
);

387 
BN_BLINDING_lock
(
BN_BLINDING
 *
b
);

388 
BN_BLINDING_u∆ock
(
BN_BLINDING
 *
b
);

390 
BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

391 
BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

392 
BN_BLINDING
 *
BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

393 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

394 (*
bn_mod_exp
Ë(
BIGNUM
 *
r
,

395 c⁄° 
BIGNUM
 *
a
,

396 c⁄° 
BIGNUM
 *
p
,

397 c⁄° 
BIGNUM
 *
m
,

398 
BN_CTX
 *
˘x
,

399 
BN_MONT_CTX
 *
m_˘x
),

400 
BN_MONT_CTX
 *
m_˘x
);

402 
DEPRECATEDIN_0_9_8
(
BN_£t_∑øms
(
mul
, 
high
, 
low
, 
m⁄t
))

403 
DEPRECATEDIN_0_9_8
(
BN_gë_∑øms
(
which
))

406 
BN_RECP_CTX
 *
BN_RECP_CTX_√w
();

407 
BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

408 
BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
, c⁄° 
BIGNUM
 *
rdiv
, 
BN_CTX
 *
˘x
);

409 
BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

410 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

411 
BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

412 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

413 
BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

414 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

416 #i‚de‡
OPENSSL_NO_EC2M


428 
BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

429 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

433 
BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

435 
BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

436 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

438 
BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

440 
BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

442 
BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

443 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

445 
BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

446 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

448 
BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

449 
BN_CTX
 *
˘x
);

451 
BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

452 
BN_CTX
 *
˘x
);

453 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

461 
BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

463 
BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

464 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

466 
BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

467 
BN_CTX
 *
˘x
);

469 
BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

470 
BN_CTX
 *
˘x
);

472 
BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

473 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

475 
BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

476 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

478 
BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

479 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

481 
BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

482 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

483 
BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

484 
BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

491 
BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

492 
BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

493 
BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

494 
BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

495 
BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

497 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_192
();

498 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_224
();

499 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_256
();

500 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_384
();

501 c⁄° 
BIGNUM
 *
BN_gë0_ni°_¥ime_521
();

503 (*
BN_ni°_mod_func
(c⁄° 
BIGNUM
 *
p
)Ë(BIGNUM *
r
, c⁄° BIGNUM *
a
,

504 c⁄° 
BIGNUM
 *
fõld
, 
BN_CTX
 *
˘x
);

506 
BN_gíî©e_dß_n⁄˚
(
BIGNUM
 *
out
, c⁄° BIGNUM *
ønge
,

507 c⁄° 
BIGNUM
 *
¥iv
, c⁄° *
mesßge
,

508 
size_t
 
mesßge_Àn
, 
BN_CTX
 *
˘x
);

511 
BIGNUM
 *
BN_gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

512 
BIGNUM
 *
BN_gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

515 
BIGNUM
 *
BN_gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

516 
BIGNUM
 *
BN_gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

517 
BIGNUM
 *
BN_gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

518 
BIGNUM
 *
BN_gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

519 
BIGNUM
 *
BN_gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

520 
BIGNUM
 *
BN_gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

522 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

523 
	#gë_rfc2409_¥ime_768
 
BN_gë_rfc2409_¥ime_768


	)

524 
	#gë_rfc2409_¥ime_1024
 
BN_gë_rfc2409_¥ime_1024


	)

525 
	#gë_rfc3526_¥ime_1536
 
BN_gë_rfc3526_¥ime_1536


	)

526 
	#gë_rfc3526_¥ime_2048
 
BN_gë_rfc3526_¥ime_2048


	)

527 
	#gë_rfc3526_¥ime_3072
 
BN_gë_rfc3526_¥ime_3072


	)

528 
	#gë_rfc3526_¥ime_4096
 
BN_gë_rfc3526_¥ime_4096


	)

529 
	#gë_rfc3526_¥ime_6144
 
BN_gë_rfc3526_¥ime_6144


	)

530 
	#gë_rfc3526_¥ime_8192
 
BN_gë_rfc3526_¥ime_8192


	)

533 
BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
, 
bŸtom
);

536 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/conferr.h

11 #i‚de‡
HEADER_CONFERR_H


12 
	#HEADER_CONFERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_CONF_°rögs
();

26 
	#CONF_F_CONF_DUMP_FP
 104

	)

27 
	#CONF_F_CONF_LOAD
 100

	)

28 
	#CONF_F_CONF_LOAD_FP
 103

	)

29 
	#CONF_F_CONF_PARSE_LIST
 119

	)

30 
	#CONF_F_DEF_LOAD
 120

	)

31 
	#CONF_F_DEF_LOAD_BIO
 121

	)

32 
	#CONF_F_GET_NEXT_FILE
 107

	)

33 
	#CONF_F_MODULE_ADD
 122

	)

34 
	#CONF_F_MODULE_INIT
 115

	)

35 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

36 
	#CONF_F_MODULE_RUN
 118

	)

37 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

38 
	#CONF_F_NCONF_DUMP_FP
 106

	)

39 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

40 
	#CONF_F_NCONF_GET_SECTION
 108

	)

41 
	#CONF_F_NCONF_GET_STRING
 109

	)

42 
	#CONF_F_NCONF_LOAD
 113

	)

43 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

44 
	#CONF_F_NCONF_LOAD_FP
 114

	)

45 
	#CONF_F_NCONF_NEW
 111

	)

46 
	#CONF_F_PROCESS_INCLUDE
 116

	)

47 
	#CONF_F_SSL_MODULE_INIT
 123

	)

48 
	#CONF_F_STR_COPY
 101

	)

53 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

54 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

55 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

56 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

57 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

58 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

59 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

60 
	#CONF_R_NO_CONF
 105

	)

61 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

62 
	#CONF_R_NO_SECTION
 107

	)

63 
	#CONF_R_NO_SUCH_FILE
 114

	)

64 
	#CONF_R_NO_VALUE
 108

	)

65 
	#CONF_R_NUMBER_TOO_LARGE
 121

	)

66 
	#CONF_R_RECURSIVE_DIRECTORY_INCLUDE
 111

	)

67 
	#CONF_R_SSL_COMMAND_SECTION_EMPTY
 117

	)

68 
	#CONF_R_SSL_COMMAND_SECTION_NOT_FOUND
 118

	)

69 
	#CONF_R_SSL_SECTION_EMPTY
 119

	)

70 
	#CONF_R_SSL_SECTION_NOT_FOUND
 120

	)

71 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

72 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

73 
	#CONF_R_VARIABLE_EXPANSION_TOO_LONG
 116

	)

74 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

	@/usr/include/openssl/crypto.h

11 #i‚de‡
HEADER_CRYPTO_H


12 
	#HEADER_CRYPTO_H


	)

14 
	~<°dlib.h
>

15 
	~<time.h
>

17 
	~<›ís¶/e_os2.h
>

19 #i‚de‡
OPENSSL_NO_STDIO


20 
	~<°dio.h
>

23 
	~<›ís¶/ß„°ack.h
>

24 
	~<›ís¶/›ís¶v.h
>

25 
	~<›ís¶/os¶_typ.h
>

26 
	~<›ís¶/›ís¶c⁄f.h
>

27 
	~<›ís¶/¸y±€º.h
>

29 #ifde‡
CHARSET_EBCDIC


30 
	~<›ís¶/ebcdic.h
>

37 
	~<›ís¶/symhacks.h
>

39 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

40 
	~<›ís¶/›ís¶v.h
>

43 #ifde‡ 
__˝lu•lus


47 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

48 
	#SSLóy
 
O≥nSSL_vîsi⁄_num


	)

49 
	#SSLóy_vîsi⁄
 
O≥nSSL_vîsi⁄


	)

50 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

51 
	#SSLEAY_VERSION
 
OPENSSL_VERSION


	)

52 
	#SSLEAY_CFLAGS
 
OPENSSL_CFLAGS


	)

53 
	#SSLEAY_BUILT_ON
 
OPENSSL_BUILT_ON


	)

54 
	#SSLEAY_PLATFORM
 
OPENSSL_PLATFORM


	)

55 
	#SSLEAY_DIR
 
OPENSSL_DIR


	)

62 
dummy
;

63 } 
	tCRYPTO_dy∆ock
;

67 
	tCRYPTO_RWLOCK
;

69 
CRYPTO_RWLOCK
 *
CRYPTO_THREAD_lock_√w
();

70 
CRYPTO_THREAD_ªad_lock
(
CRYPTO_RWLOCK
 *
lock
);

71 
CRYPTO_THREAD_wrôe_lock
(
CRYPTO_RWLOCK
 *
lock
);

72 
CRYPTO_THREAD_u∆ock
(
CRYPTO_RWLOCK
 *
lock
);

73 
CRYPTO_THREAD_lock_‰ì
(
CRYPTO_RWLOCK
 *
lock
);

75 
CRYPTO_©omic_add
(*
vÆ
, 
amou¡
, *
ªt
, 
CRYPTO_RWLOCK
 *
lock
);

81 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

82 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

83 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

84 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

86 
	s¸y±o_ex_d©a_°
 {

87 
STACK_OF
(Ë*
	gsk
;

89 
DEFINE_STACK_OF
()

94 
	#CRYPTO_EX_INDEX_SSL
 0

	)

95 
	#CRYPTO_EX_INDEX_SSL_CTX
 1

	)

96 
	#CRYPTO_EX_INDEX_SSL_SESSION
 2

	)

97 
	#CRYPTO_EX_INDEX_X509
 3

	)

98 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

99 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

100 
	#CRYPTO_EX_INDEX_DH
 6

	)

101 
	#CRYPTO_EX_INDEX_DSA
 7

	)

102 
	#CRYPTO_EX_INDEX_EC_KEY
 8

	)

103 
	#CRYPTO_EX_INDEX_RSA
 9

	)

104 
	#CRYPTO_EX_INDEX_ENGINE
 10

	)

105 
	#CRYPTO_EX_INDEX_UI
 11

	)

106 
	#CRYPTO_EX_INDEX_BIO
 12

	)

107 
	#CRYPTO_EX_INDEX_APP
 13

	)

108 
	#CRYPTO_EX_INDEX_UI_METHOD
 14

	)

109 
	#CRYPTO_EX_INDEX_DRBG
 15

	)

110 
	#CRYPTO_EX_INDEX__COUNT
 16

	)

113 
	#OPENSSL_mÆloc_öô
(Ë0Ë

	)

115 
CRYPTO_mem_˘æ
(
mode
);

117 
	#OPENSSL_mÆloc
(
num
) \

118 
	`CRYPTO_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

119 
	#OPENSSL_zÆloc
(
num
) \

120 
	`CRYPTO_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

121 
	#OPENSSL_ªÆloc
(
addr
, 
num
) \

122 
	`CRYPTO_ªÆloc
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

123 
	#OPENSSL_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
) \

124 
	`CRYPTO_˛ór_ªÆloc
(
addr
, 
ﬁd_num
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

125 
	#OPENSSL_˛ór_‰ì
(
addr
, 
num
) \

126 
	`CRYPTO_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

127 
	#OPENSSL_‰ì
(
addr
) \

128 
	`CRYPTO_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

129 
	#OPENSSL_memdup
(
°r
, 
s
) \

130 
	`CRYPTO_memdup
((
°r
), 
s
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

131 
	#OPENSSL_°rdup
(
°r
) \

132 
	`CRYPTO_°rdup
(
°r
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

133 
	#OPENSSL_°∫dup
(
°r
, 
n
) \

134 
	`CRYPTO_°∫dup
(
°r
, 
n
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

135 
	#OPENSSL_£cuª_mÆloc
(
num
) \

136 
	`CRYPTO_£cuª_mÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

137 
	#OPENSSL_£cuª_zÆloc
(
num
) \

138 
	`CRYPTO_£cuª_zÆloc
(
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

139 
	#OPENSSL_£cuª_‰ì
(
addr
) \

140 
	`CRYPTO_£cuª_‰ì
(
addr
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

141 
	#OPENSSL_£cuª_˛ór_‰ì
(
addr
, 
num
) \

142 
	`CRYPTO_£cuª_˛ór_‰ì
(
addr
, 
num
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

143 
	#OPENSSL_£cuª_a˘uÆ_size
(
±r
) \

144 
	`CRYPTO_£cuª_a˘uÆ_size
(
±r
)

	)

146 
size_t
 
OPENSSL_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

147 
size_t
 
OPENSSL_°æˇt
(*
d°
, c⁄° *
§c
, size_à
siz
);

148 
size_t
 
OPENSSL_°∫Àn
(c⁄° *
°r
, size_à
maxÀn
);

149 *
OPENSSL_buf2hex°r
(c⁄° *
buf„r
, 
Àn
);

150 *
OPENSSL_hex°r2buf
(c⁄° *
°r
, *
Àn
);

151 
OPENSSL_hexch¨2öt
(
c
);

153 
	#OPENSSL_MALLOC_MAX_NELEMS
(
ty≥
Ë(((1U<<(()*8-1))-1)/—y≥))

	)

155 
O≥nSSL_vîsi⁄_num
();

156 c⁄° *
O≥nSSL_vîsi⁄
(
ty≥
);

157 
	#OPENSSL_VERSION
 0

	)

158 
	#OPENSSL_CFLAGS
 1

	)

159 
	#OPENSSL_BUILT_ON
 2

	)

160 
	#OPENSSL_PLATFORM
 3

	)

161 
	#OPENSSL_DIR
 4

	)

162 
	#OPENSSL_ENGINES_DIR
 5

	)

164 
OPENSSL_is£tugid
();

166 
	tCRYPTO_EX_√w
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

168 
	tCRYPTO_EX_‰ì
 (*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

169 
	tidx
, 
	t¨gl
, *
	t¨gp
);

170 
	tCRYPTO_EX_dup
 (
	tCRYPTO_EX_DATA
 *
	tto
, c⁄° CRYPTO_EX_DATA *
	t‰om
,

171 *
	t‰om_d
, 
	tidx
, 
	t¨gl
, *
	t¨gp
);

172 
__owur
 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

173 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

174 
CRYPTO_EX_‰ì
 *
‰ì_func
);

176 
CRYPTO_‰ì_ex_ödex
(
˛ass_ödex
, 
idx
);

182 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

183 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

184 c⁄° 
CRYPTO_EX_DATA
 *
‰om
);

186 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

192 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

193 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
, 
idx
);

195 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

200 
	#CRYPTO_˛ónup_Æl_ex_d©a
(Ë0Ë

	)

212 
	#CRYPTO_num_locks
(Ë(1)

	)

213 
	#CRYPTO_£t_lockög_ˇŒback
(
func
)

	)

214 
	#CRYPTO_gë_lockög_ˇŒback
(Ë(
NULL
)

	)

215 
	#CRYPTO_£t_add_lock_ˇŒback
(
func
)

	)

216 
	#CRYPTO_gë_add_lock_ˇŒback
(Ë(
NULL
)

	)

223 
	#CRYPTO_LOCK
 1

	)

224 
	#CRYPTO_UNLOCK
 2

	)

225 
	#CRYPTO_READ
 4

	)

226 
	#CRYPTO_WRITE
 8

	)

229 
	s¸y±o_thªadid_°
 {

230 
	gdummy
;

231 } 
	tCRYPTO_THREADID
;

233 
	#CRYPTO_THREADID_£t_numîic
(
id
, 
vÆ
)

	)

234 
	#CRYPTO_THREADID_£t_poöãr
(
id
, 
±r
)

	)

235 
	#CRYPTO_THREADID_£t_ˇŒback
(
thªadid_func
Ë(0)

	)

236 
	#CRYPTO_THREADID_gë_ˇŒback
(Ë(
NULL
)

	)

237 
	#CRYPTO_THREADID_cuºít
(
id
)

	)

238 
	#CRYPTO_THREADID_cmp
(
a
, 
b
Ë(-1)

	)

239 
	#CRYPTO_THREADID_˝y
(
de°
, 
§c
)

	)

240 
	#CRYPTO_THREADID_hash
(
id
Ë(0UL)

	)

242 #i‡
OPENSSL_API_COMPAT
 < 0x10000000L

243 
	#CRYPTO_£t_id_ˇŒback
(
func
)

	)

244 
	#CRYPTO_gë_id_ˇŒback
(Ë(
NULL
)

	)

245 
	#CRYPTO_thªad_id
(Ë(0UL)

	)

248 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
dyn_¸óã_fun˘i⁄
)

	)

249 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
(
dyn_lock_fun˘i⁄
)

	)

250 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
dyn_de°roy_fun˘i⁄
)

	)

251 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
(Ë(
NULL
)

	)

252 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
(Ë(
NULL
)

	)

253 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
(Ë(
NULL
)

	)

256 
CRYPTO_£t_mem_fun˘i⁄s
(

257 *(*
m
Ë(
size_t
, const *, ),

258 *(*
r
Ë(*, 
size_t
, const *, ),

259 (*
f
) (*, const *, ));

260 
CRYPTO_£t_mem_debug
(
Êag
);

261 
CRYPTO_gë_mem_fun˘i⁄s
(

262 *(**
m
Ë(
size_t
, const *, ),

263 *(**
r
Ë(*, 
size_t
, const *, ),

264 (**
f
) (*, const *, ));

266 *
CRYPTO_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

267 *
CRYPTO_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

268 *
CRYPTO_memdup
(c⁄° *
°r
, 
size_t
 
siz
, c⁄° *
fûe
, 
löe
);

269 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

270 *
CRYPTO_°∫dup
(c⁄° *
°r
, 
size_t
 
s
, c⁄° *
fûe
, 
löe
);

271 
CRYPTO_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

272 
CRYPTO_˛ór_‰ì
(*
±r
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

273 *
CRYPTO_ªÆloc
(*
addr
, 
size_t
 
num
, c⁄° *
fûe
, 
löe
);

274 *
CRYPTO_˛ór_ªÆloc
(*
addr
, 
size_t
 
ﬁd_num
, size_à
num
,

275 c⁄° *
fûe
, 
löe
);

277 
CRYPTO_£cuª_mÆloc_öô
(
size_t
 
sz
, 
mösize
);

278 
CRYPTO_£cuª_mÆloc_d⁄e
();

279 *
CRYPTO_£cuª_mÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

280 *
CRYPTO_£cuª_zÆloc
(
size_t
 
num
, c⁄° *
fûe
, 
löe
);

281 
CRYPTO_£cuª_‰ì
(*
±r
, c⁄° *
fûe
, 
löe
);

282 
CRYPTO_£cuª_˛ór_‰ì
(*
±r
, 
size_t
 
num
,

283 c⁄° *
fûe
, 
löe
);

284 
CRYPTO_£cuª_Æloˇãd
(c⁄° *
±r
);

285 
CRYPTO_£cuª_mÆloc_öôülized
();

286 
size_t
 
CRYPTO_£cuª_a˘uÆ_size
(*
±r
);

287 
size_t
 
CRYPTO_£cuª_u£d
();

289 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

291 #i‚de‡
OPENSSL_NO_CRYPTO_MDEBUG


292 
	#OPENSSL_mem_debug_push
(
öfo
) \

293 
	`CRYPTO_mem_debug_push
(
öfo
, 
OPENSSL_FILE
, 
OPENSSL_LINE
)

	)

294 
	#OPENSSL_mem_debug_p›
() \

295 
	`CRYPTO_mem_debug_p›
()

	)

296 
CRYPTO_mem_debug_push
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

297 
CRYPTO_mem_debug_p›
();

298 
CRYPTO_gë_Æloc_cou¡s
(*
mcou¡
, *
rcou¡
, *
fcou¡
);

306 
CRYPTO_mem_debug_mÆloc
(*
addr
, 
size_t
 
num
, 
Êag
,

307 c⁄° *
fûe
, 
löe
);

308 
CRYPTO_mem_debug_ªÆloc
(*
addr1
, *
addr2
, 
size_t
 
num
, 
Êag
,

309 c⁄° *
fûe
, 
löe
);

310 
CRYPTO_mem_debug_‰ì
(*
addr
, 
Êag
,

311 c⁄° *
fûe
, 
löe
);

313 
CRYPTO_mem_Àaks_cb
((*
cb
Ë(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

314 *
u
);

315 #i‚de‡
OPENSSL_NO_STDIO


316 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

318 
CRYPTO_mem_Àaks
(
BIO
 *
bio
);

322 
os¶_n‹ëu∫
 
OPENSSL_dõ
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
);

323 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

324 
	#O≥nSSLDõ
(
f
,
l
,
a
Ë
	`OPENSSL_dõ
(◊),(f),÷))

	)

326 
	#OPENSSL_as£π
(
e
) \

327 ()((
e
Ë? 0 : (
	`OPENSSL_dõ
("as£πi⁄ faûed: " #e, 
OPENSSL_FILE
, 
OPENSSL_LINE
), 1))

	)

329 
OPENSSL_is£rvi˚
();

331 
FIPS_mode
();

332 
FIPS_mode_£t
(
r
);

334 #ifde‡
OPENSSL_FIPS


336 
FIPS_£l·e°_check
();

339 
OPENSSL_öô
();

340 #ifde‡
OPENSSL_SYS_UNIX


341 
OPENSSL_f‹k_¥ï¨e
();

342 
OPENSSL_f‹k_∑ª¡
();

343 
OPENSSL_f‹k_chûd
();

346 
tm
 *
OPENSSL_gmtime
(c⁄° 
time_t
 *
timî
, tm *
ªsu…
);

347 
OPENSSL_gmtime_adj
(
tm
 *tm, 
off£t_day
, 
off£t_£c
);

348 
OPENSSL_gmtime_diff
(*
pday
, *
p£c
,

349 c⁄° 
tm
 *
‰om
, c⁄° tm *
to
);

358 
CRYPTO_memcmp
(c⁄° * 
ö_a
, c⁄° * 
ö_b
, 
size_t
 
Àn
);

361 
	#OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS
 0x00000001L

	)

362 
	#OPENSSL_INIT_LOAD_CRYPTO_STRINGS
 0x00000002L

	)

363 
	#OPENSSL_INIT_ADD_ALL_CIPHERS
 0x00000004L

	)

364 
	#OPENSSL_INIT_ADD_ALL_DIGESTS
 0x00000008L

	)

365 
	#OPENSSL_INIT_NO_ADD_ALL_CIPHERS
 0x00000010L

	)

366 
	#OPENSSL_INIT_NO_ADD_ALL_DIGESTS
 0x00000020L

	)

367 
	#OPENSSL_INIT_LOAD_CONFIG
 0x00000040L

	)

368 
	#OPENSSL_INIT_NO_LOAD_CONFIG
 0x00000080L

	)

369 
	#OPENSSL_INIT_ASYNC
 0x00000100L

	)

370 
	#OPENSSL_INIT_ENGINE_RDRAND
 0x00000200L

	)

371 
	#OPENSSL_INIT_ENGINE_DYNAMIC
 0x00000400L

	)

372 
	#OPENSSL_INIT_ENGINE_OPENSSL
 0x00000800L

	)

373 
	#OPENSSL_INIT_ENGINE_CRYPTODEV
 0x00001000L

	)

374 
	#OPENSSL_INIT_ENGINE_CAPI
 0x00002000L

	)

375 
	#OPENSSL_INIT_ENGINE_PADLOCK
 0x00004000L

	)

376 
	#OPENSSL_INIT_ENGINE_AFALG
 0x00008000L

	)

378 
	#OPENSSL_INIT_ATFORK
 0x00020000L

	)

380 
	#OPENSSL_INIT_NO_ATEXIT
 0x00080000L

	)

385 
	#OPENSSL_INIT_ENGINE_ALL_BUILTIN
 \

386 (
OPENSSL_INIT_ENGINE_RDRAND
 | 
OPENSSL_INIT_ENGINE_DYNAMIC
 \

387 | 
OPENSSL_INIT_ENGINE_CRYPTODEV
 | 
OPENSSL_INIT_ENGINE_CAPI
 | \

388 
OPENSSL_INIT_ENGINE_PADLOCK
)

	)

392 
OPENSSL_˛ónup
();

393 
OPENSSL_öô_¸y±o
(
uöt64_t
 
›ts
, c⁄° 
OPENSSL_INIT_SETTINGS
 *
£âögs
);

394 
OPENSSL_©exô
((*
h™dÀr
)());

395 
OPENSSL_thªad_°›
();

398 
OPENSSL_INIT_SETTINGS
 *
OPENSSL_INIT_√w
();

399 #i‚de‡
OPENSSL_NO_STDIO


400 
OPENSSL_INIT_£t_c⁄fig_fûíame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

401 c⁄° *
c⁄fig_fûíame
);

402 
OPENSSL_INIT_£t_c⁄fig_fûe_Êags
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

403 
Êags
);

404 
OPENSSL_INIT_£t_c⁄fig_≠≤ame
(
OPENSSL_INIT_SETTINGS
 *
£âögs
,

405 c⁄° *
c⁄fig_≠≤ame
);

407 
OPENSSL_INIT_‰ì
(
OPENSSL_INIT_SETTINGS
 *
£âögs
);

409 #i‡
deföed
(
OPENSSL_THREADS
Ë&& !deföed(
CRYPTO_TDEBUG
)

410 #i‡
deföed
(
_WIN32
)

411 #i‡
deföed
(
BASETYPES
Ë|| deföed(
_WINDEF_H
)

413 
DWORD
 
	tCRYPTO_THREAD_LOCAL
;

414 
DWORD
 
	tCRYPTO_THREAD_ID
;

416 
LONG
 
	tCRYPTO_ONCE
;

417 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

420 
	~<±hªad.h
>

421 
±hªad_⁄˚_t
 
	tCRYPTO_ONCE
;

422 
±hªad_key_t
 
	tCRYPTO_THREAD_LOCAL
;

423 
±hªad_t
 
	tCRYPTO_THREAD_ID
;

425 
	#CRYPTO_ONCE_STATIC_INIT
 
PTHREAD_ONCE_INIT


	)

429 #i‡!
deföed
(
CRYPTO_ONCE_STATIC_INIT
)

430 
	tCRYPTO_ONCE
;

431 
	tCRYPTO_THREAD_LOCAL
;

432 
	tCRYPTO_THREAD_ID
;

433 
	#CRYPTO_ONCE_STATIC_INIT
 0

	)

436 
CRYPTO_THREAD_run_⁄˚
(
CRYPTO_ONCE
 *
⁄˚
, (*
öô
)());

438 
CRYPTO_THREAD_öô_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, (*
˛ónup
)(*));

439 *
CRYPTO_THREAD_gë_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

440 
CRYPTO_THREAD_£t_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
, *
vÆ
);

441 
CRYPTO_THREAD_˛ónup_loˇl
(
CRYPTO_THREAD_LOCAL
 *
key
);

443 
CRYPTO_THREAD_ID
 
CRYPTO_THREAD_gë_cuºít_id
();

444 
CRYPTO_THREAD_com∑ª_id
(
CRYPTO_THREAD_ID
 
a
, CRYPTO_THREAD_ID 
b
);

447 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

10 #i‚de‡
HEADER_E_OS2_H


11 
	#HEADER_E_OS2_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #ifde‡ 
__˝lu•lus


25 
	#OPENSSL_SYS_UNIX


	)

33 #i‡
deföed
(
OPENSSL_SYS_MSDOS
)

34 #unde‡
OPENSSL_SYS_UNIX


45 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

46 #unde‡
OPENSSL_SYS_UNIX


47 #ñi‡
deföed
(
OPENSSL_SYS_UWIN
)

48 #unde‡
OPENSSL_SYS_UNIX


49 
	#OPENSSL_SYS_WIN32_UWIN


	)

51 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
OPENSSL_SYS_CYGWIN
)

52 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

54 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN32
)

55 #unde‡
OPENSSL_SYS_UNIX


56 #i‡!
deföed
(
OPENSSL_SYS_WIN32
)

57 
	#OPENSSL_SYS_WIN32


	)

60 #i‡
deföed
(
_WIN64
Ë|| deföed(
OPENSSL_SYS_WIN64
)

61 #unde‡
OPENSSL_SYS_UNIX


62 #i‡!
deföed
(
OPENSSL_SYS_WIN64
)

63 
	#OPENSSL_SYS_WIN64


	)

66 #i‡
deföed
(
OPENSSL_SYS_WINNT
)

67 #unde‡
OPENSSL_SYS_UNIX


69 #i‡
deföed
(
OPENSSL_SYS_WINCE
)

70 #unde‡
OPENSSL_SYS_UNIX


76 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WIN64
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

77 #unde‡
OPENSSL_SYS_UNIX


78 
	#OPENSSL_SYS_WINDOWS


	)

79 #i‚de‡
OPENSSL_SYS_MSDOS


80 
	#OPENSSL_SYS_MSDOS


	)

89 #ifde‡
OPENSSL_SYS_WINDOWS


90 #i‚de‡
OPENSSL_OPT_WINDLL


91 #i‡
deföed
(
_WINDLL
)

93 
	#OPENSSL_OPT_WINDLL


	)

99 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYS_VMS
)

100 #i‡!
deföed
(
OPENSSL_SYS_VMS
)

101 #unde‡
OPENSSL_SYS_UNIX


103 
	#OPENSSL_SYS_VMS


	)

104 #i‡
deföed
(
__DECC
)

105 
	#OPENSSL_SYS_VMS_DECC


	)

106 #ñi‡
deföed
(
__DECCXX
)

107 
	#OPENSSL_SYS_VMS_DECC


	)

108 
	#OPENSSL_SYS_VMS_DECCXX


	)

110 
	#OPENSSL_SYS_VMS_NODECC


	)

115 #ifde‡
OPENSSL_SYS_UNIX


116 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë&& !deföed(
OPENSSL_SYS_LINUX
)

117 
	#OPENSSL_SYS_LINUX


	)

119 #i‡
deföed
(
_AIX
Ë&& !deföed(
OPENSSL_SYS_AIX
)

120 
	#OPENSSL_SYS_AIX


	)

125 #i‡
deföed
(
__VOS__
Ë&& !deföed(
OPENSSL_SYS_VOS
)

126 
	#OPENSSL_SYS_VOS


	)

127 #ifde‡
__HPPA__


128 
	#OPENSSL_SYS_VOS_HPPA


	)

130 #ifde‡
__IA32__


131 
	#OPENSSL_SYS_VOS_IA32


	)

140 #ifde‡
OPENSSL_SYS_MSDOS


141 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

142 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

144 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

145 
	#OPENSSL_DECLARE_EXIT


	)

167 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

168 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

169 
	#OPENSSL_EXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

171 
	#OPENSSL_EXPORT
 

	)

172 
	#OPENSSL_EXTERN
 

	)

186 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


187 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

188 
ty≥
 *
_shadow_
##
	`«me
() \

189 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

190 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

191 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

193 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ëty≥ 
_shadow_
##«me=vÆue;

	)

194 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
«me

195 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
«me

198 #ifde‡
_WIN32


199 #ifde‡
_WIN64


200 
	#os¶_ssize_t
 
__öt64


	)

201 
	#OSSL_SSIZE_MAX
 
_I64_MAX


	)

203 
	#os¶_ssize_t
 

	)

204 
	#OSSL_SSIZE_MAX
 
INT_MAX


	)

208 #i‡
deföed
(
OPENSSL_SYS_UEFI
Ë&& !deföed(
os¶_ssize_t
)

209 
	#os¶_ssize_t
 
INTN


	)

210 
	#OSSL_SSIZE_MAX
 
MAX_INTN


	)

213 #i‚de‡
os¶_ssize_t


214 
	#os¶_ssize_t
 
ssize_t


	)

215 #i‡
deföed
(
SSIZE_MAX
)

216 
	#OSSL_SSIZE_MAX
 
SSIZE_MAX


	)

217 #ñi‡
deföed
(
_POSIX_SSIZE_MAX
)

218 
	#OSSL_SSIZE_MAX
 
_POSIX_SSIZE_MAX


	)

220 
	#OSSL_SSIZE_MAX
 ((
ssize_t
)(
SIZE_MAX
>>1))

	)

224 #ifde‡
DEBUG_UNUSED


225 
	#__owur
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

227 
	#__owur


	)

231 #i‡
deföed
(
OPENSSL_SYS_UEFI
)

232 
INT8
 
	töt8_t
;

233 
UINT8
 
	tuöt8_t
;

234 
INT16
 
	töt16_t
;

235 
UINT16
 
	tuöt16_t
;

236 
INT32
 
	töt32_t
;

237 
UINT32
 
	tuöt32_t
;

238 
INT64
 
	töt64_t
;

239 
UINT64
 
	tuöt64_t
;

240 #ñi‡(
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L) || \

241 
deföed
(
__osf__
Ë|| deföed(
__sgi
Ë|| deföed(
__hpux
) || \

242 
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed (
__O≥nBSD__
)

243 
	~<öây≥s.h
>

244 #ñi‡
deföed
(
_MSC_VER
) && _MSC_VER<1600

249 sig√d 
	töt8_t
;

250 
	tuöt8_t
;

251 
	töt16_t
;

252 
	tuöt16_t
;

253 
	töt32_t
;

254 
	tuöt32_t
;

255 
__öt64
 
	töt64_t
;

256 
	t__öt64
 
	tuöt64_t
;

258 
	~<°döt.h
>

262 #i‡!
deföed
(
ölöe
Ë&& !deföed(
__˝lu•lus
)

263 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__>=199901L

265 
	#os¶_ölöe
 
ölöe


	)

266 #ñi‡
deföed
(
__GNUC__
) && __GNUC__>=2

267 
	#os¶_ölöe
 
__ölöe__


	)

268 #ñi‡
deföed
(
_MSC_VER
)

274 
	#os¶_ölöe
 
__ölöe


	)

276 
	#os¶_ölöe


	)

279 
	#os¶_ölöe
 
ölöe


	)

282 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

283 
	#os¶_n‹ëu∫
 
_N‹ëu∫


	)

284 #ñi‡
deföed
(
__GNUC__
) && __GNUC__ >= 2

285 
	#os¶_n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

287 
	#os¶_n‹ëu∫


	)

291 #i‡
deföed
(
__GNUC__
)

292 
	#os¶_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

294 
	#os¶_unu£d


	)

297 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/evperr.h

11 #i‚de‡
HEADER_EVPERR_H


12 
	#HEADER_EVPERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_EVP_°rögs
();

24 
	#EVP_F_AESNI_INIT_KEY
 165

	)

25 
	#EVP_F_AESNI_XTS_INIT_KEY
 233

	)

26 
	#EVP_F_AES_GCM_CTRL
 196

	)

27 
	#EVP_F_AES_INIT_KEY
 133

	)

28 
	#EVP_F_AES_OCB_CIPHER
 169

	)

29 
	#EVP_F_AES_T4_INIT_KEY
 178

	)

30 
	#EVP_F_AES_T4_XTS_INIT_KEY
 234

	)

31 
	#EVP_F_AES_WRAP_CIPHER
 170

	)

32 
	#EVP_F_AES_XTS_CIPHER
 229

	)

33 
	#EVP_F_AES_XTS_INIT_KEY
 235

	)

34 
	#EVP_F_ALG_MODULE_INIT
 177

	)

35 
	#EVP_F_ARIA_CCM_INIT_KEY
 175

	)

36 
	#EVP_F_ARIA_GCM_CTRL
 197

	)

37 
	#EVP_F_ARIA_GCM_INIT_KEY
 176

	)

38 
	#EVP_F_ARIA_INIT_KEY
 185

	)

39 
	#EVP_F_B64_NEW
 198

	)

40 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

41 
	#EVP_F_CHACHA20_POLY1305_CTRL
 182

	)

42 
	#EVP_F_CMLL_T4_INIT_KEY
 179

	)

43 
	#EVP_F_DES_EDE3_WRAP_CIPHER
 171

	)

44 
	#EVP_F_DO_SIGVER_INIT
 161

	)

45 
	#EVP_F_ENC_NEW
 199

	)

46 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

47 
	#EVP_F_EVP_CIPHER_ASN1_TO_PARAM
 204

	)

48 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

49 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

50 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

51 
	#EVP_F_EVP_CIPHER_PARAM_TO_ASN1
 205

	)

52 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

53 
	#EVP_F_EVP_DECRYPTUPDATE
 166

	)

54 
	#EVP_F_EVP_DIGESTFINALXOF
 174

	)

55 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

56 
	#EVP_F_EVP_ENCRYPTDECRYPTUPDATE
 219

	)

57 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

58 
	#EVP_F_EVP_ENCRYPTUPDATE
 167

	)

59 
	#EVP_F_EVP_KDF_CTRL
 224

	)

60 
	#EVP_F_EVP_KDF_CTRL_STR
 225

	)

61 
	#EVP_F_EVP_KDF_CTX_NEW_ID
 226

	)

62 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

63 
	#EVP_F_EVP_MD_SIZE
 162

	)

64 
	#EVP_F_EVP_OPENINIT
 102

	)

65 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

66 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

67 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

68 
	#EVP_F_EVP_PBE_SCRYPT
 181

	)

69 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

70 
	#EVP_F_EVP_PKEY2PKCS8
 113

	)

71 
	#EVP_F_EVP_PKEY_ASN1_ADD0
 188

	)

72 
	#EVP_F_EVP_PKEY_CHECK
 186

	)

73 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

74 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

75 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

76 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

77 
	#EVP_F_EVP_PKEY_CTX_MD
 168

	)

78 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

79 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

80 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

81 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

82 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

83 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

84 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

85 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

86 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

87 
	#EVP_F_EVP_PKEY_GET0_DH
 119

	)

88 
	#EVP_F_EVP_PKEY_GET0_DSA
 120

	)

89 
	#EVP_F_EVP_PKEY_GET0_EC_KEY
 131

	)

90 
	#EVP_F_EVP_PKEY_GET0_HMAC
 183

	)

91 
	#EVP_F_EVP_PKEY_GET0_POLY1305
 184

	)

92 
	#EVP_F_EVP_PKEY_GET0_RSA
 121

	)

93 
	#EVP_F_EVP_PKEY_GET0_SIPHASH
 172

	)

94 
	#EVP_F_EVP_PKEY_GET_RAW_PRIVATE_KEY
 202

	)

95 
	#EVP_F_EVP_PKEY_GET_RAW_PUBLIC_KEY
 203

	)

96 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

97 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

98 
	#EVP_F_EVP_PKEY_METH_ADD0
 194

	)

99 
	#EVP_F_EVP_PKEY_METH_NEW
 195

	)

100 
	#EVP_F_EVP_PKEY_NEW
 106

	)

101 
	#EVP_F_EVP_PKEY_NEW_CMAC_KEY
 193

	)

102 
	#EVP_F_EVP_PKEY_NEW_RAW_PRIVATE_KEY
 191

	)

103 
	#EVP_F_EVP_PKEY_NEW_RAW_PUBLIC_KEY
 192

	)

104 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

105 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

106 
	#EVP_F_EVP_PKEY_PARAM_CHECK
 189

	)

107 
	#EVP_F_EVP_PKEY_PUBLIC_CHECK
 190

	)

108 
	#EVP_F_EVP_PKEY_SET1_ENGINE
 187

	)

109 
	#EVP_F_EVP_PKEY_SET_ALIAS_TYPE
 206

	)

110 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

111 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

112 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

113 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

114 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

115 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

116 
	#EVP_F_EVP_SIGNFINAL
 107

	)

117 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

118 
	#EVP_F_INT_CTX_NEW
 157

	)

119 
	#EVP_F_OK_NEW
 200

	)

120 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

121 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

122 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

123 
	#EVP_F_PKCS5_V2_SCRYPT_KEYIVGEN
 180

	)

124 
	#EVP_F_PKEY_KDF_CTRL
 227

	)

125 
	#EVP_F_PKEY_SET_TYPE
 158

	)

126 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

127 
	#EVP_F_RC5_CTRL
 125

	)

128 
	#EVP_F_R_32_12_16_INIT_KEY
 242

	)

129 
	#EVP_F_S390X_AES_GCM_CTRL
 201

	)

130 
	#EVP_F_SCRYPT_ALG
 228

	)

131 
	#EVP_F_UPDATE
 173

	)

136 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

137 
	#EVP_R_ARIA_KEY_SETUP_FAILED
 176

	)

138 
	#EVP_R_BAD_DECRYPT
 100

	)

139 
	#EVP_R_BAD_KEY_LENGTH
 195

	)

140 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

141 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

142 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

143 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

144 
	#EVP_R_COPY_ERROR
 173

	)

145 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

146 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

147 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

148 
	#EVP_R_DECODE_ERROR
 114

	)

149 
	#EVP_R_DISABLED_FOR_FIPS
 200

	)

150 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

151 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

152 
	#EVP_R_ERROR_LOADING_SECTION
 165

	)

153 
	#EVP_R_ERROR_SETTING_FIPS_MODE
 166

	)

154 
	#EVP_R_EXPECTING_AN_HMAC_KEY
 174

	)

155 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

156 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

157 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

158 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

159 
	#EVP_R_EXPECTING_A_POLY1305_KEY
 164

	)

160 
	#EVP_R_EXPECTING_A_SIPHASH_KEY
 175

	)

161 
	#EVP_R_FIPS_MODE_NOT_SUPPORTED
 167

	)

162 
	#EVP_R_GET_RAW_KEY_FAILED
 182

	)

163 
	#EVP_R_ILLEGAL_SCRYPT_PARAMETERS
 171

	)

164 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

165 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

166 
	#EVP_R_INVALID_DIGEST
 152

	)

167 
	#EVP_R_INVALID_FIPS_MODE
 168

	)

168 
	#EVP_R_INVALID_IV_LENGTH
 194

	)

169 
	#EVP_R_INVALID_KEY
 163

	)

170 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

171 
	#EVP_R_INVALID_OPERATION
 148

	)

172 
	#EVP_R_KEYGEN_FAILURE
 120

	)

173 
	#EVP_R_KEY_SETUP_FAILED
 180

	)

174 
	#EVP_R_MEMORY_LIMIT_EXCEEDED
 172

	)

175 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

176 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

177 
	#EVP_R_MISSING_PARAMETERS
 103

	)

178 
	#EVP_R_NOT_XOF_OR_INVALID_LENGTH
 178

	)

179 
	#EVP_R_NO_CIPHER_SET
 131

	)

180 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

181 
	#EVP_R_NO_DIGEST_SET
 139

	)

182 
	#EVP_R_NO_KEY_SET
 154

	)

183 
	#EVP_R_NO_OPERATION_SET
 149

	)

184 
	#EVP_R_ONLY_ONESHOT_SUPPORTED
 177

	)

185 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

186 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

187 
	#EVP_R_PARAMETER_TOO_LARGE
 187

	)

188 
	#EVP_R_OUTPUT_WOULD_OVERFLOW
 184

	)

189 
	#EVP_R_PARTIALLY_OVERLAPPING
 162

	)

190 
	#EVP_R_PBKDF2_ERROR
 181

	)

191 
	#EVP_R_PKEY_APPLICATION_ASN1_METHOD_ALREADY_REGISTERED
 179

	)

192 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

193 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

194 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

195 
	#EVP_R_TOO_LARGE
 201

	)

196 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

197 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

198 
	#EVP_R_UNKNOWN_OPTION
 169

	)

199 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

200 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

201 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

202 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

203 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

204 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

205 
	#EVP_R_UNSUPPORTED_NUMBER_OF_ROUNDS
 135

	)

206 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

207 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

208 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

209 
	#EVP_R_WRAP_MODE_NOT_ALLOWED
 170

	)

210 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

211 
	#EVP_R_XTS_DATA_UNIT_IS_TOO_LARGE
 191

	)

212 
	#EVP_R_XTS_DUPLICATED_KEYS
 192

	)

	@/usr/include/openssl/lhash.h

14 #i‚de‡
HEADER_LHASH_H


15 
	#HEADER_LHASH_H


	)

17 
	~<›ís¶/e_os2.h
>

18 
	~<›ís¶/bio.h
>

20 #ifde‡ 
__˝lu•lus


24 
lhash_node_°
 
	tOPENSSL_LH_NODE
;

25 (*
OPENSSL_LH_COMPFUNC
) (const *, const *);

26 (*
	tOPENSSL_LH_HASHFUNC
) (const *);

27 (*
OPENSSL_LH_DOALL_FUNC
) (*);

28 (*
OPENSSL_LH_DOALL_FUNCARG
) (*, *);

29 
lhash_°
 
	tOPENSSL_LHASH
;

41 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

42 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

43 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

44 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

45 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

46  
«me
##
	`_hash
(
a
); }

	)

47 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

50 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

51 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

52 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

53 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

54 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

55 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

56  
«me
##
	`_cmp
(
a
,
b
); }

	)

57 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

60 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

61 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

62 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

63 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

64 
o_ty≥
 *
a
 = 
¨g1
; \

65 
a_ty≥
 *
b
 = 
¨g2
; \

66 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

67 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

70 
	#LH_LOAD_MULT
 256

	)

72 
OPENSSL_LH_îr‹
(
OPENSSL_LHASH
 *
lh
);

73 
OPENSSL_LHASH
 *
OPENSSL_LH_√w
(
OPENSSL_LH_HASHFUNC
 
h
, 
OPENSSL_LH_COMPFUNC
 
c
);

74 
OPENSSL_LH_‰ì
(
OPENSSL_LHASH
 *
lh
);

75 *
OPENSSL_LH_ö£π
(
OPENSSL_LHASH
 *
lh
, *
d©a
);

76 *
OPENSSL_LH_dñëe
(
OPENSSL_LHASH
 *
lh
, c⁄° *
d©a
);

77 *
OPENSSL_LH_ªåõve
(
OPENSSL_LHASH
 *
lh
, c⁄° *
d©a
);

78 
OPENSSL_LH_dﬂŒ
(
OPENSSL_LHASH
 *
lh
, 
OPENSSL_LH_DOALL_FUNC
 
func
);

79 
OPENSSL_LH_dﬂŒ_¨g
(
OPENSSL_LHASH
 *
lh
, 
OPENSSL_LH_DOALL_FUNCARG
 
func
, *
¨g
);

80 
OPENSSL_LH_°rhash
(c⁄° *
c
);

81 
OPENSSL_LH_num_ôems
(c⁄° 
OPENSSL_LHASH
 *
lh
);

82 
OPENSSL_LH_gë_down_lﬂd
(c⁄° 
OPENSSL_LHASH
 *
lh
);

83 
OPENSSL_LH_£t_down_lﬂd
(
OPENSSL_LHASH
 *
lh
, 
down_lﬂd
);

85 #i‚de‡
OPENSSL_NO_STDIO


86 
OPENSSL_LH_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

87 
OPENSSL_LH_node_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

88 
OPENSSL_LH_node_ußge_°©s
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
FILE
 *
Â
);

90 
OPENSSL_LH_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

91 
OPENSSL_LH_node_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

92 
OPENSSL_LH_node_ußge_°©s_bio
(c⁄° 
OPENSSL_LHASH
 *
lh
, 
BIO
 *
out
);

94 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

95 
	#_LHASH
 
OPENSSL_LHASH


	)

96 
	#LHASH_NODE
 
OPENSSL_LH_NODE


	)

97 
	#lh_îr‹
 
OPENSSL_LH_îr‹


	)

98 
	#lh_√w
 
OPENSSL_LH_√w


	)

99 
	#lh_‰ì
 
OPENSSL_LH_‰ì


	)

100 
	#lh_ö£π
 
OPENSSL_LH_ö£π


	)

101 
	#lh_dñëe
 
OPENSSL_LH_dñëe


	)

102 
	#lh_ªåõve
 
OPENSSL_LH_ªåõve


	)

103 
	#lh_dﬂŒ
 
OPENSSL_LH_dﬂŒ


	)

104 
	#lh_dﬂŒ_¨g
 
OPENSSL_LH_dﬂŒ_¨g


	)

105 
	#lh_°rhash
 
OPENSSL_LH_°rhash


	)

106 
	#lh_num_ôems
 
OPENSSL_LH_num_ôems


	)

107 #i‚de‡
OPENSSL_NO_STDIO


108 
	#lh_°©s
 
OPENSSL_LH_°©s


	)

109 
	#lh_node_°©s
 
OPENSSL_LH_node_°©s


	)

110 
	#lh_node_ußge_°©s
 
OPENSSL_LH_node_ußge_°©s


	)

112 
	#lh_°©s_bio
 
OPENSSL_LH_°©s_bio


	)

113 
	#lh_node_°©s_bio
 
OPENSSL_LH_node_°©s_bio


	)

114 
	#lh_node_ußge_°©s_bio
 
OPENSSL_LH_node_ußge_°©s_bio


	)

119 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
ty≥

121 
	#DEFINE_LHASH_OF
(
ty≥
) \

122 
	`LHASH_OF
(
ty≥
Ë{ 
lh_
##ty≥##
_dummy
 { * 
d1
; 
d2
; 
d3
; } 
dummy
; }; \

123 
os¶_unu£d
 
os¶_ölöe
 
	`LHASH_OF
(
ty≥
Ë*
lh_
##ty≥##
	`_√w
((*
h‚
)(constÅype *), \

124 (*
c‚
)(c⁄° 
ty≥
 *, constÅype *)) \

126  (
	`LHASH_OF
(
ty≥
) *) \

127 
	`OPENSSL_LH_√w
((
OPENSSL_LH_HASHFUNC
)
h‚
, (
OPENSSL_LH_COMPFUNC
)
c‚
); \

129 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_‰ì
(
	`LHASH_OF
—y≥Ë*
lh
) \

131 
	`OPENSSL_LH_‰ì
((
OPENSSL_LHASH
 *)
lh
); \

133 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_ö£π
(
	`LHASH_OF
—y≥Ë*
lh
,Åy≥ *
d
) \

135  (
ty≥
 *)
	`OPENSSL_LH_ö£π
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

137 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_dñëe
(
	`LHASH_OF
—y≥Ë*
lh
, c⁄°Åy≥ *
d
) \

139  (
ty≥
 *)
	`OPENSSL_LH_dñëe
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

141 
os¶_unu£d
 
os¶_ölöe
 
ty≥
 *
lh_
##ty≥##
	`_ªåõve
(
	`LHASH_OF
—y≥Ë*
lh
, c⁄°Åy≥ *
d
) \

143  (
ty≥
 *)
	`OPENSSL_LH_ªåõve
((
OPENSSL_LHASH
 *)
lh
, 
d
); \

145 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_îr‹
(
	`LHASH_OF
—y≥Ë*
lh
) \

147  
	`OPENSSL_LH_îr‹
((
OPENSSL_LHASH
 *)
lh
); \

149 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_num_ôems
(
	`LHASH_OF
—y≥Ë*
lh
) \

151  
	`OPENSSL_LH_num_ôems
((
OPENSSL_LHASH
 *)
lh
); \

153 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_node_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

155 
	`OPENSSL_LH_node_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

157 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_node_ußge_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

159 
	`OPENSSL_LH_node_ußge_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

161 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_°©s_bio
(c⁄° 
	`LHASH_OF
—y≥Ë*
lh
, 
BIO
 *
out
) \

163 
	`OPENSSL_LH_°©s_bio
((c⁄° 
OPENSSL_LHASH
 *)
lh
, 
out
); \

165 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_gë_down_lﬂd
(
	`LHASH_OF
—y≥Ë*
lh
) \

167  
	`OPENSSL_LH_gë_down_lﬂd
((
OPENSSL_LHASH
 *)
lh
); \

169 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_£t_down_lﬂd
(
	`LHASH_OF
—y≥Ë*
lh
, 
dl
) \

171 
	`OPENSSL_LH_£t_down_lﬂd
((
OPENSSL_LHASH
 *)
lh
, 
dl
); \

173 
os¶_unu£d
 
os¶_ölöe
 
lh_
##
ty≥
##
	`_dﬂŒ
(
	`LHASH_OF
—y≥Ë*
lh
, \

174 (*
dﬂŒ
)(
ty≥
 *)) \

176 
	`OPENSSL_LH_dﬂŒ
((
OPENSSL_LHASH
 *)
lh
, (
OPENSSL_LH_DOALL_FUNC
)
dﬂŒ
); \

178 
	`LHASH_OF
(
ty≥
)

	)

180 
	#IMPLEMENT_LHASH_DOALL_ARG_CONST
(
ty≥
, 
¨gty≥
) \

181 
	`öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
, c⁄°Åy≥)

	)

183 
	#IMPLEMENT_LHASH_DOALL_ARG
(
ty≥
, 
¨gty≥
) \

184 
	`öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
,Åy≥)

	)

186 
	#öt_im∂emít_lhash_dﬂŒ
(
ty≥
, 
¨gty≥
, 
cb¨gty≥
) \

187 
os¶_unu£d
 
os¶_ölöe
 \

188 
lh_
##
ty≥
##
_dﬂŒ_
##
	`¨gty≥
(
	`LHASH_OF
—y≥Ë*
lh
, \

189 (*
‚
)(
cb¨gty≥
 *, 
¨gty≥
 *), \

190 
¨gty≥
 *
¨g
) \

192 
	`OPENSSL_LH_dﬂŒ_¨g
((
OPENSSL_LHASH
 *)
lh
, (
OPENSSL_LH_DOALL_FUNCARG
)
‚
, (*)
¨g
); \

194 
	`LHASH_OF
(
ty≥
)

	)

196 
DEFINE_LHASH_OF
(
OPENSSL_STRING
);

197 #ifde‡
_MSC_VER


202 #¥agm®
w¨nög
 (
push
)

203 #¥agm®
w¨nög
 (
dißbÀ
: 4090)

206 
DEFINE_LHASH_OF
(
OPENSSL_CSTRING
);

208 #ifde‡
_MSC_VER


209 #¥agm®
w¨nög
 (
p›
)

220 #ifde‡
__SUNPRO_C


221 #¥agm®
wók
 
OPENSSL_LH_√w


222 #¥agm®
wók
 
OPENSSL_LH_‰ì


223 #¥agm®
wók
 
OPENSSL_LH_ö£π


224 #¥agm®
wók
 
OPENSSL_LH_dñëe


225 #¥agm®
wók
 
OPENSSL_LH_ªåõve


226 #¥agm®
wók
 
OPENSSL_LH_îr‹


227 #¥agm®
wók
 
OPENSSL_LH_num_ôems


228 #¥agm®
wók
 
OPENSSL_LH_node_°©s_bio


229 #¥agm®
wók
 
OPENSSL_LH_node_ußge_°©s_bio


230 #¥agm®
wók
 
OPENSSL_LH_°©s_bio


231 #¥agm®
wók
 
OPENSSL_LH_gë_down_lﬂd


232 #¥agm®
wók
 
OPENSSL_LH_£t_down_lﬂd


233 #¥agm®
wók
 
OPENSSL_LH_dﬂŒ


234 #¥agm®
wók
 
OPENSSL_LH_dﬂŒ_¨g


237 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

10 #i‚de‡
HEADER_OBJECTS_H


11 
	#HEADER_OBJECTS_H


	)

13 
	~<›ís¶/obj_mac.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/a¢1.h
>

16 
	~<›ís¶/obje˘£º.h
>

18 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

19 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

20 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

21 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

22 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

23 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

25 
	#OBJ_NAME_ALIAS
 0x8000

	)

27 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

28 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

31 #ifde‡ 
__˝lu•lus


35 
	sobj_«me_°
 {

36 
ty≥
;

37 
Æüs
;

38 c⁄° *
«me
;

39 c⁄° *
d©a
;

40 } 
	tOBJ_NAME
;

42 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

44 
OBJ_NAME_öô
();

45 
OBJ_NAME_√w_ödex
((*
hash_func
) (const *),

46 (*
cmp_func
) (const *, const *),

47 (*
‰ì_func
) (const *, , const *));

48 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
, 
ty≥
);

49 
OBJ_NAME_add
(c⁄° *
«me
, 
ty≥
, c⁄° *
d©a
);

50 
OBJ_NAME_ªmove
(c⁄° *
«me
, 
ty≥
);

51 
OBJ_NAME_˛ónup
(
ty≥
);

52 
OBJ_NAME_do_Æl
(
ty≥
, (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

53 *
¨g
);

54 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,

55 (*
‚
Ë(c⁄° 
OBJ_NAME
 *, *
¨g
),

56 *
¨g
);

58 
ASN1_OBJECT
 *
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

59 
ASN1_OBJECT
 *
OBJ_nid2obj
(
n
);

60 c⁄° *
OBJ_nid2 
(
n
);

61 c⁄° *
OBJ_nid2¢
(
n
);

62 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

63 
ASN1_OBJECT
 *
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

64 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

65 
OBJ_txt2nid
(c⁄° *
s
);

66 
OBJ_ 2nid
(c⁄° *
s
);

67 
OBJ_¢2nid
(c⁄° *
s
);

68 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
, c⁄° ASN1_OBJECT *
b
);

69 c⁄° *
OBJ_b£¨ch_
(c⁄° *
key
, c⁄° *
ba£
, 
num
, 
size
,

70 (*
cmp
) (const *, const *));

71 c⁄° *
OBJ_b£¨ch_ex_
(c⁄° *
key
, c⁄° *
ba£
, 
num
,

72 
size
,

73 (*
cmp
) (const *, const *),

74 
Êags
);

76 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

77 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

78 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

79 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

81 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

82 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

83 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

84 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

113 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

114 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

116 
ty≥1
 c⁄° *
a
 = 
a_
; \

117 
ty≥2
 c⁄° *
b
 = 
b_
; \

118  
nm
##
	`_cmp
(
a
,
b
); \

120 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

122  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

123 
nm
##
_cmp_BSEARCH_CMP_FN
); \

125 
	`dummy_¥ŸŸy≥
()

	)

127 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

128 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

130 
ty≥1
 c⁄° *
a
 = 
a_
; \

131 
ty≥2
 c⁄° *
b
 = 
b_
; \

132  
nm
##
	`_cmp
(
a
,
b
); \

134 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

136  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

137 
nm
##
_cmp_BSEARCH_CMP_FN
); \

139 
	`dummy_¥ŸŸy≥
()

	)

141 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

142 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

143 
num
,(
ty≥2
), \

144 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

145 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

146 
cmp
##
_BSEARCH_CMP_FN
)))

	)

148 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

149 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

150 
num
,(
ty≥2
), \

151 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

152 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

153 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

155 
OBJ_√w_nid
(
num
);

156 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

157 
OBJ_¸óã
(c⁄° *
oid
, c⁄° *
¢
, c⁄° *
 
);

158 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

159 
	#OBJ_˛ónup
(Ë0Ë

	)

161 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

163 
size_t
 
OBJ_Àngth
(c⁄° 
ASN1_OBJECT
 *
obj
);

164 c⁄° *
OBJ_gë0_d©a
(c⁄° 
ASN1_OBJECT
 *
obj
);

166 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

167 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

168 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

169 
OBJ_sigid_‰ì
();

172 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

7 #ifde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


10 
	#›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	)

12 #i‡
deföed
(
__i386__
)

13 
	~"›ís¶c⁄f-i386.h
"

14 #ñi‡
deföed
(
__ü64__
)

15 
	~"›ís¶c⁄f-ü64.h
"

16 #ñi‡
deföed
(
__mùs64
Ë&& deföed(
__MIPSEL__
)

17 
	~"›ís¶c⁄f-mùs64ñ.h
"

18 #ñi‡
deföed
(
__mùs64
)

19 
	~"›ís¶c⁄f-mùs64.h
"

20 #ñi‡
deföed
(
__mùs
Ë&& deföed(
__MIPSEL__
)

21 
	~"›ís¶c⁄f-mù£l.h
"

22 #ñi‡
deföed
(
__mùs
)

23 
	~"›ís¶c⁄f-mùs.h
"

24 #ñi‡
deföed
(
__powîpc64__
)

25 
	~<ídün.h
>

26 #i‡
__BYTE_ORDER__
 =
__ORDER_BIG_ENDIAN__


27 
	~"›ís¶c⁄f-µc64.h
"

29 
	~"›ís¶c⁄f-µc64À.h
"

31 #ñi‡
deföed
(
__powîpc__
)

32 
	~"›ís¶c⁄f-µc.h
"

33 #ñi‡
deföed
(
__s390x__
)

34 
	~"›ís¶c⁄f-s390x.h
"

35 #ñi‡
deföed
(
__s390__
)

36 
	~"›ís¶c⁄f-s390.h
"

37 #ñi‡
deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)

38 
	~"›ís¶c⁄f-•¨c64.h
"

39 #ñi‡
deföed
(
__•¨c__
)

40 
	~"›ís¶c⁄f-•¨c.h
"

41 #ñi‡
deföed
(
__x86_64__
)

42 
	~"›ís¶c⁄f-x86_64.h
"

47 #unde‡
›ís¶_›ís¶c⁄f_mu…ûib_ªdúe˘i⁄_h


	@/usr/include/openssl/pemerr.h

11 #i‚de‡
HEADER_PEMERR_H


12 
	#HEADER_PEMERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_PEM_°rögs
();

26 
	#PEM_F_B2I_DSS
 127

	)

27 
	#PEM_F_B2I_PVK_BIO
 128

	)

28 
	#PEM_F_B2I_RSA
 129

	)

29 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

30 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

31 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

32 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

33 
	#PEM_F_DO_B2I
 132

	)

34 
	#PEM_F_DO_B2I_BIO
 133

	)

35 
	#PEM_F_DO_BLOB_HEADER
 134

	)

36 
	#PEM_F_DO_I2B
 146

	)

37 
	#PEM_F_DO_PK8PKEY
 126

	)

38 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

39 
	#PEM_F_DO_PVK_BODY
 135

	)

40 
	#PEM_F_DO_PVK_HEADER
 136

	)

41 
	#PEM_F_GET_HEADER_AND_DATA
 143

	)

42 
	#PEM_F_GET_NAME
 144

	)

43 
	#PEM_F_I2B_PVK
 137

	)

44 
	#PEM_F_I2B_PVK_BIO
 138

	)

45 
	#PEM_F_LOAD_IV
 101

	)

46 
	#PEM_F_PEM_ASN1_READ
 102

	)

47 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

48 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

49 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

50 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

51 
	#PEM_F_PEM_DO_HEADER
 106

	)

52 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

53 
	#PEM_F_PEM_READ
 108

	)

54 
	#PEM_F_PEM_READ_BIO
 109

	)

55 
	#PEM_F_PEM_READ_BIO_DHPARAMS
 141

	)

56 
	#PEM_F_PEM_READ_BIO_EX
 145

	)

57 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

58 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

59 
	#PEM_F_PEM_READ_DHPARAMS
 142

	)

60 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

61 
	#PEM_F_PEM_SIGNFINAL
 112

	)

62 
	#PEM_F_PEM_WRITE
 113

	)

63 
	#PEM_F_PEM_WRITE_BIO
 114

	)

64 
	#PEM_F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL
 147

	)

65 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

66 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

67 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

68 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

73 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

74 
	#PEM_R_BAD_DECRYPT
 101

	)

75 
	#PEM_R_BAD_END_LINE
 102

	)

76 
	#PEM_R_BAD_IV_CHARS
 103

	)

77 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

78 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

79 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

80 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

81 
	#PEM_R_CIPHER_IS_NULL
 127

	)

82 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

83 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

84 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

85 
	#PEM_R_HEADER_TOO_LONG
 128

	)

86 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

87 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

88 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

89 
	#PEM_R_MISSING_DEK_IV
 129

	)

90 
	#PEM_R_NOT_DEK_INFO
 105

	)

91 
	#PEM_R_NOT_ENCRYPTED
 106

	)

92 
	#PEM_R_NOT_PROC_TYPE
 107

	)

93 
	#PEM_R_NO_START_LINE
 108

	)

94 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

95 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

96 
	#PEM_R_PVK_TOO_SHORT
 125

	)

97 
	#PEM_R_READ_KEY
 111

	)

98 
	#PEM_R_SHORT_HEADER
 112

	)

99 
	#PEM_R_UNEXPECTED_DEK_IV
 130

	)

100 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

101 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

102 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

103 
	#PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 110

	)

	@/usr/include/openssl/rsaerr.h

11 #i‚de‡
HEADER_RSAERR_H


12 
	#HEADER_RSAERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_RSA_°rögs
();

26 
	#RSA_F_CHECK_PADDING_MD
 140

	)

27 
	#RSA_F_ENCODE_PKCS1
 146

	)

28 
	#RSA_F_FIPS_RSA_BUILTIN_KEYGEN
 206

	)

29 
	#RSA_F_INT_RSA_VERIFY
 145

	)

30 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

31 
	#RSA_F_PKEY_PSS_INIT
 165

	)

32 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

33 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

34 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

35 
	#RSA_F_PKEY_RSA_VERIFY
 149

	)

36 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

37 
	#RSA_F_RSA_ALGOR_TO_MD
 156

	)

38 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

39 
	#RSA_F_RSA_CHECK_KEY
 123

	)

40 
	#RSA_F_RSA_CHECK_KEY_EX
 160

	)

41 
	#RSA_F_RSA_CMS_DECRYPT
 159

	)

42 
	#RSA_F_RSA_CMS_VERIFY
 158

	)

43 
	#RSA_F_RSA_GENERATE_KEY_EX
 204

	)

44 
	#RSA_F_RSA_GENERATE_MULTI_PRIME_KEY
 207

	)

45 
	#RSA_F_RSA_ITEM_VERIFY
 148

	)

46 
	#RSA_F_RSA_METH_DUP
 161

	)

47 
	#RSA_F_RSA_METH_NEW
 162

	)

48 
	#RSA_F_RSA_METH_SET1_NAME
 163

	)

49 
	#RSA_F_RSA_MGF1_TO_MD
 157

	)

50 
	#RSA_F_RSA_MULTIP_INFO_NEW
 166

	)

51 
	#RSA_F_RSA_NEW_METHOD
 106

	)

52 
	#RSA_F_RSA_NULL
 124

	)

53 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

54 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

55 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

56 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

57 
	#RSA_F_RSA_OSSL_PRIVATE_DECRYPT
 101

	)

58 
	#RSA_F_RSA_OSSL_PRIVATE_ENCRYPT
 102

	)

59 
	#RSA_F_RSA_OSSL_PUBLIC_DECRYPT
 103

	)

60 
	#RSA_F_RSA_OSSL_PUBLIC_ENCRYPT
 104

	)

61 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

62 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

63 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1
 154

	)

64 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

65 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 152

	)

66 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

67 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

68 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

69 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

70 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

71 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

72 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1
 153

	)

73 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

74 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

75 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

76 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

77 
	#RSA_F_RSA_PARAM_DECODE
 164

	)

78 
	#RSA_F_RSA_PRINT
 115

	)

79 
	#RSA_F_RSA_PRINT_FP
 116

	)

80 
	#RSA_F_RSA_PRIV_DECODE
 150

	)

81 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

82 
	#RSA_F_RSA_PRIVATE_DECRYPT
 200

	)

83 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 201

	)

84 
	#RSA_F_RSA_PSS_GET_PARAM
 151

	)

85 
	#RSA_F_RSA_PSS_TO_CTX
 155

	)

86 
	#RSA_F_RSA_PUB_DECODE
 139

	)

87 
	#RSA_F_RSA_PUBLIC_DECRYPT
 202

	)

88 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 203

	)

89 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

90 
	#RSA_F_RSA_SET_DEFAULT_METHOD
 205

	)

91 
	#RSA_F_RSA_SET_METHOD
 204

	)

92 
	#RSA_F_RSA_SIGN
 117

	)

93 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

94 
	#RSA_F_RSA_VERIFY
 119

	)

95 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

96 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 126

	)

97 
	#RSA_F_SETUP_TBUF
 167

	)

102 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

103 
	#RSA_R_BAD_E_VALUE
 101

	)

104 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

105 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

106 
	#RSA_R_BAD_SIGNATURE
 104

	)

107 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

108 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

109 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

110 
	#RSA_R_DATA_TOO_LARGE
 109

	)

111 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

112 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

113 
	#RSA_R_DATA_TOO_SMALL
 111

	)

114 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

115 
	#RSA_R_DIGEST_DOES_NOT_MATCH
 158

	)

116 
	#RSA_R_DIGEST_NOT_ALLOWED
 145

	)

117 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

118 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

119 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

120 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

121 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

122 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

123 
	#RSA_R_INVALID_DIGEST
 157

	)

124 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

125 
	#RSA_R_INVALID_HEADER
 137

	)

126 
	#RSA_R_INVALID_LABEL
 160

	)

127 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

128 
	#RSA_R_INVALID_MGF1_MD
 156

	)

129 
	#RSA_R_INVALID_MULTI_PRIME_KEY
 167

	)

130 
	#RSA_R_INVALID_OAEP_PARAMETERS
 161

	)

131 
	#RSA_R_INVALID_PADDING
 138

	)

132 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

133 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

134 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

135 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

136 
	#RSA_R_INVALID_TRAILER
 139

	)

137 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

138 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

139 
	#RSA_R_KEY_PRIME_NUM_INVALID
 165

	)

140 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

141 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

142 
	#RSA_R_MISSING_PRIVATE_KEY
 179

	)

143 
	#RSA_R_MGF1_DIGEST_NOT_ALLOWED
 152

	)

144 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

145 
	#RSA_R_MP_COEFFICIENT_NOT_INVERSE_OF_R
 168

	)

146 
	#RSA_R_MP_EXPONENT_NOT_CONGRUENT_TO_D
 169

	)

147 
	#RSA_R_MP_R_NOT_PRIME
 170

	)

148 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

149 
	#RSA_R_NON_FIPS_RSA_METHOD
 200

	)

150 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

151 
	#RSA_R_N_DOES_NOT_EQUAL_PRODUCT_OF_PRIMES
 172

	)

152 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

153 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

154 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 201

	)

155 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

156 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

157 
	#RSA_R_PKCS_DECODING_ERROR
 159

	)

158 
	#RSA_R_PSS_SALTLEN_TOO_SMALL
 164

	)

159 
	#RSA_R_P_NOT_PRIME
 128

	)

160 
	#RSA_R_Q_NOT_PRIME
 129

	)

161 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

162 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

163 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

164 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

165 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

166 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

167 
	#RSA_R_UNKNOWN_DIGEST
 166

	)

168 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

169 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

170 
	#RSA_R_UNSUPPORTED_ENCRYPTION_TYPE
 162

	)

171 
	#RSA_R_UNSUPPORTED_LABEL_SOURCE
 163

	)

172 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

173 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

174 
	#RSA_R_UNSUPPORTED_PARAMETERS
 202

	)

175 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

176 
	#RSA_R_VALUE_MISSING
 147

	)

177 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

	@/usr/include/openssl/safestack.h

10 #i‚de‡
HEADER_SAFESTACK_H


11 
	#HEADER_SAFESTACK_H


	)

13 
	~<›ís¶/°ack.h
>

14 
	~<›ís¶/e_os2.h
>

16 #ifde‡
__˝lu•lus


20 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
ty≥

22 
	#SKM_DEFINE_STACK_OF
(
t1
, 
t2
, 
t3
) \

23 
	`STACK_OF
(
t1
); \

24 (*
	tsk_
##
	tt1
##
	t_compfunc
)(c⁄° 
	tt3
 * c⁄° *
	ta
, c⁄°Å3 *c⁄° *
	tb
); \

25 (*
	tsk_
##
	tt1
##
	t_‰ìfunc
)(
	tt3
 *
	ta
); \

26 
t3
 * (*
	tsk_
##
	tt1
##
	t_c›yfunc
)(c⁄° 
	tt3
 *
	ta
); \

27 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_num
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

29  
	`OPENSSL_sk_num
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

31 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_vÆue
(c⁄° 
	`STACK_OF
—1Ë*
sk
, 
idx
) \

33  (
t2
 *)
	`OPENSSL_sk_vÆue
((c⁄° 
OPENSSL_STACK
 *)
sk
, 
idx
); \

35 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w
(sk_##t1##
_compfunc
 
com∑ª
) \

37  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w
((
OPENSSL_sk_compfunc
)
com∑ª
); \

39 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_nuŒ
() \

41  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_nuŒ
(); \

43 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_√w_ª£rve
(sk_##t1##
_compfunc
 
com∑ª
, 
n
) \

45  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_√w_ª£rve
((
OPENSSL_sk_compfunc
)
com∑ª
, 
n
); \

47 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_ª£rve
(
	`STACK_OF
—1Ë*
sk
, 
n
) \

49  
	`OPENSSL_sk_ª£rve
((
OPENSSL_STACK
 *)
sk
, 
n
); \

51 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_‰ì
(
	`STACK_OF
—1Ë*
sk
) \

53 
	`OPENSSL_sk_‰ì
((
OPENSSL_STACK
 *)
sk
); \

55 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_zîo
(
	`STACK_OF
—1Ë*
sk
) \

57 
	`OPENSSL_sk_zîo
((
OPENSSL_STACK
 *)
sk
); \

59 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe
(
	`STACK_OF
—1Ë*
sk
, 
i
) \

61  (
t2
 *)
	`OPENSSL_sk_dñëe
((
OPENSSL_STACK
 *)
sk
, 
i
); \

63 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_dñëe_±r
(
	`STACK_OF
—1Ë*
sk
,Å2 *
±r
) \

65  (
t2
 *)
	`OPENSSL_sk_dñëe_±r
((
OPENSSL_STACK
 *)
sk
, \

66 (c⁄° *)
±r
); \

68 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_push
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

70  
	`OPENSSL_sk_push
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

72 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_unshi·
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

74  
	`OPENSSL_sk_unshi·
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

76 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_p›
(
	`STACK_OF
—1Ë*
sk
) \

78  (
t2
 *)
	`OPENSSL_sk_p›
((
OPENSSL_STACK
 *)
sk
); \

80 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_shi·
(
	`STACK_OF
—1Ë*
sk
) \

82  (
t2
 *)
	`OPENSSL_sk_shi·
((
OPENSSL_STACK
 *)
sk
); \

84 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_p›_‰ì
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##
_‰ìfunc
 
‰ìfunc
) \

86 
	`OPENSSL_sk_p›_‰ì
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

88 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_ö£π
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
, 
idx
) \

90  
	`OPENSSL_sk_ö£π
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
, 
idx
); \

92 
os¶_unu£d
 
os¶_ölöe
 
t2
 *
sk_
##
t1
##
	`_£t
(
	`STACK_OF
—1Ë*
sk
, 
idx
,Å2 *
±r
) \

94  (
t2
 *)
	`OPENSSL_sk_£t
((
OPENSSL_STACK
 *)
sk
, 
idx
, (c⁄° *)
±r
); \

96 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

98  
	`OPENSSL_sk_föd
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

100 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_föd_ex
(
	`STACK_OF
—1Ë*
sk
, 
t2
 *
±r
) \

102  
	`OPENSSL_sk_föd_ex
((
OPENSSL_STACK
 *)
sk
, (c⁄° *)
±r
); \

104 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_s‹t
(
	`STACK_OF
—1Ë*
sk
) \

106 
	`OPENSSL_sk_s‹t
((
OPENSSL_STACK
 *)
sk
); \

108 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
	`_is_s‹ãd
(c⁄° 
	`STACK_OF
—1Ë*
sk
) \

110  
	`OPENSSL_sk_is_s‹ãd
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

112 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë* 
sk_
##t1##
	`_dup
(c⁄° STACK_OF—1Ë*
sk
) \

114  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dup
((c⁄° 
OPENSSL_STACK
 *)
sk
); \

116 
os¶_unu£d
 
os¶_ölöe
 
	`STACK_OF
(
t1
Ë*
sk_
##t1##
	`_dìp_c›y
(c⁄° STACK_OF—1Ë*
sk
, \

117 
sk_
##
t1
##
_c›yfunc
 
c›yfunc
, \

118 
sk_
##
t1
##
_‰ìfunc
 
‰ìfunc
) \

120  (
	`STACK_OF
(
t1
Ë*)
	`OPENSSL_sk_dìp_c›y
((c⁄° 
OPENSSL_STACK
 *)
sk
, \

121 (
OPENSSL_sk_c›yfunc
)
c›yfunc
, \

122 (
OPENSSL_sk_‰ìfunc
)
‰ìfunc
); \

124 
os¶_unu£d
 
os¶_ölöe
 
sk_
##
t1
##
_compfunc
 sk_##t1##
	`_£t_cmp_func
(
	`STACK_OF
—1Ë*
sk
, sk_##t1##_compfun¯
com∑ª
) \

126  (
sk_
##
t1
##
_compfunc
)
	`OPENSSL_sk_£t_cmp_func
((
OPENSSL_STACK
 *)
sk
, (
OPENSSL_sk_compfunc
)
com∑ª
); \

127 }

	)

129 
	#DEFINE_SPECIAL_STACK_OF
(
t1
, 
t2
Ë
	`SKM_DEFINE_STACK_OF
—1,Å2,Å2)

	)

130 
	#DEFINE_STACK_OF
(
t
Ë
	`SKM_DEFINE_STACK_OF
—,Å,Å)

	)

131 
	#DEFINE_SPECIAL_STACK_OF_CONST
(
t1
, 
t2
) \

132 
	`SKM_DEFINE_STACK_OF
(
t1
, c⁄° 
t2
,Å2)

	)

133 
	#DEFINE_STACK_OF_CONST
(
t
Ë
	`SKM_DEFINE_STACK_OF
—, c⁄°Å,Å)

	)

149 *
	tOPENSSL_STRING
;

150 c⁄° *
	tOPENSSL_CSTRING
;

159 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

160 
DEFINE_SPECIAL_STACK_OF_CONST
(
OPENSSL_CSTRING
, )

166 *
	tOPENSSL_BLOCK
;

167 
DEFINE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

177 #ifde‡
__SUNPRO_C


178 #¥agm®
wók
 
OPENSSL_sk_num


179 #¥agm®
wók
 
OPENSSL_sk_vÆue


180 #¥agm®
wók
 
OPENSSL_sk_√w


181 #¥agm®
wók
 
OPENSSL_sk_√w_nuŒ


182 #¥agm®
wók
 
OPENSSL_sk_√w_ª£rve


183 #¥agm®
wók
 
OPENSSL_sk_ª£rve


184 #¥agm®
wók
 
OPENSSL_sk_‰ì


185 #¥agm®
wók
 
OPENSSL_sk_zîo


186 #¥agm®
wók
 
OPENSSL_sk_dñëe


187 #¥agm®
wók
 
OPENSSL_sk_dñëe_±r


188 #¥agm®
wók
 
OPENSSL_sk_push


189 #¥agm®
wók
 
OPENSSL_sk_unshi·


190 #¥agm®
wók
 
OPENSSL_sk_p›


191 #¥agm®
wók
 
OPENSSL_sk_shi·


192 #¥agm®
wók
 
OPENSSL_sk_p›_‰ì


193 #¥agm®
wók
 
OPENSSL_sk_ö£π


194 #¥agm®
wók
 
OPENSSL_sk_£t


195 #¥agm®
wók
 
OPENSSL_sk_föd


196 #¥agm®
wók
 
OPENSSL_sk_föd_ex


197 #¥agm®
wók
 
OPENSSL_sk_s‹t


198 #¥agm®
wók
 
OPENSSL_sk_is_s‹ãd


199 #¥agm®
wók
 
OPENSSL_sk_dup


200 #¥agm®
wók
 
OPENSSL_sk_dìp_c›y


201 #¥agm®
wók
 
OPENSSL_sk_£t_cmp_func


204 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

10 #i‚de‡
HEADER_SYMHACKS_H


11 
	#HEADER_SYMHACKS_H


	)

13 
	~<›ís¶/e_os2.h
>

16 #i‡
deföed
(
OPENSSL_SYS_VMS
)

17 #unde‡
ERR_lﬂd_CRYPTO_°rögs


18 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

19 #unde‡
OCSP_¸lID_√w


20 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

22 #unde‡
d2i_ECPARAMETERS


23 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

24 #unde‡
i2d_ECPARAMETERS


25 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

26 #unde‡
d2i_ECPKPARAMETERS


27 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

28 #unde‡
i2d_ECPKPARAMETERS


29 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

32 #unde‡
cms_D©a_¸óã


33 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/x509.h

11 #i‚de‡
HEADER_X509_H


12 
	#HEADER_X509_H


	)

14 
	~<›ís¶/e_os2.h
>

15 
	~<›ís¶/os¶_typ.h
>

16 
	~<›ís¶/symhacks.h
>

17 
	~<›ís¶/buf„r.h
>

18 
	~<›ís¶/evp.h
>

19 
	~<›ís¶/bio.h
>

20 
	~<›ís¶/a¢1.h
>

21 
	~<›ís¶/ß„°ack.h
>

22 
	~<›ís¶/ec.h
>

24 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

25 
	~<›ís¶/rß.h
>

26 
	~<›ís¶/dß.h
>

27 
	~<›ís¶/dh.h
>

30 
	~<›ís¶/sha.h
>

31 
	~<›ís¶/x509îr.h
>

33 #ifde‡ 
__˝lu•lus


40 
	#X509_SIG_INFO_VALID
 0x1

	)

42 
	#X509_SIG_INFO_TLS
 0x2

	)

44 
	#X509_FILETYPE_PEM
 1

	)

45 
	#X509_FILETYPE_ASN1
 2

	)

46 
	#X509_FILETYPE_DEFAULT
 3

	)

48 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

49 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

50 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

51 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

52 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

53 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

54 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

55 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

56 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

57 
	#X509v3_KU_UNDEF
 0xffff

	)

59 
	sX509_Æg‹_°
 {

60 
ASN1_OBJECT
 *
Æg‹ôhm
;

61 
ASN1_TYPE
 *
∑ømëî
;

64 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

66 
	sX509_vÆ_°
 {

67 
ASN1_TIME
 *
nŸBef‹e
;

68 
ASN1_TIME
 *
nŸA·î
;

69 } 
	tX509_VAL
;

71 
X509_sig_°
 
	tX509_SIG
;

73 
X509_«me_íåy_°
 
	tX509_NAME_ENTRY
;

75 
DEFINE_STACK_OF
(
X509_NAME_ENTRY
)

77 
DEFINE_STACK_OF
(
X509_NAME
)

79 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

80 
	#X509_EX_V_INIT
 0x0001

	)

81 
X509_exãnsi⁄_°
 
	tX509_EXTENSION
;

83 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

85 
DEFINE_STACK_OF
(
X509_EXTENSION
)

87 
x509_©åibuãs_°
 
	tX509_ATTRIBUTE
;

89 
DEFINE_STACK_OF
(
X509_ATTRIBUTE
)

91 
X509_ªq_öfo_°
 
	tX509_REQ_INFO
;

93 
X509_ªq_°
 
	tX509_REQ
;

95 
x509_˚π_aux_°
 
	tX509_CERT_AUX
;

97 
x509_cöf_°
 
	tX509_CINF
;

99 
DEFINE_STACK_OF
(
X509
)

103 
	sx509_åu°_°
 {

104 
åu°
;

105 
Êags
;

106 (*
check_åu°
Ë(
x509_åu°_°
 *, 
X509
 *, );

107 *
«me
;

108 
¨g1
;

109 *
¨g2
;

110 } 
	tX509_TRUST
;

112 
DEFINE_STACK_OF
(
X509_TRUST
)

116 
	#X509_TRUST_DEFAULT
 0

	)

118 
	#X509_TRUST_COMPAT
 1

	)

119 
	#X509_TRUST_SSL_CLIENT
 2

	)

120 
	#X509_TRUST_SSL_SERVER
 3

	)

121 
	#X509_TRUST_EMAIL
 4

	)

122 
	#X509_TRUST_OBJECT_SIGN
 5

	)

123 
	#X509_TRUST_OCSP_SIGN
 6

	)

124 
	#X509_TRUST_OCSP_REQUEST
 7

	)

125 
	#X509_TRUST_TSA
 8

	)

128 
	#X509_TRUST_MIN
 1

	)

129 
	#X509_TRUST_MAX
 8

	)

132 
	#X509_TRUST_DYNAMIC
 (1U << 0)

	)

133 
	#X509_TRUST_DYNAMIC_NAME
 (1U << 1)

	)

135 
	#X509_TRUST_NO_SS_COMPAT
 (1U << 2)

	)

137 
	#X509_TRUST_DO_SS_COMPAT
 (1U << 3)

	)

139 
	#X509_TRUST_OK_ANY_EKU
 (1U << 4)

	)

143 
	#X509_TRUST_TRUSTED
 1

	)

144 
	#X509_TRUST_REJECTED
 2

	)

145 
	#X509_TRUST_UNTRUSTED
 3

	)

149 
	#X509_FLAG_COMPAT
 0

	)

150 
	#X509_FLAG_NO_HEADER
 1L

	)

151 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

152 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

153 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

154 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

155 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

156 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

157 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

158 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

159 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

160 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

161 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

162 
	#X509_FLAG_NO_IDS
 (1L << 12)

	)

168 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

170 
	#XN_FLAG_COMPAT
 0

	)

171 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16)

	)

172 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16)

	)

173 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16)

	)

174 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16)

	)

176 
	#XN_FLAG_DN_REV
 (1 << 20)

	)

180 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

182 
	#XN_FLAG_FN_SN
 0

	)

183 
	#XN_FLAG_FN_LN
 (1 << 21)

	)

184 
	#XN_FLAG_FN_OID
 (2 << 21)

	)

185 
	#XN_FLAG_FN_NONE
 (3 << 21)

	)

187 
	#XN_FLAG_SPC_EQ
 (1 << 23)

	)

194 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

196 
	#XN_FLAG_FN_ALIGN
 (1 << 25)

	)

201 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

202 
XN_FLAG_SEP_COMMA_PLUS
 | \

203 
XN_FLAG_DN_REV
 | \

204 
XN_FLAG_FN_SN
 | \

205 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

209 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

210 
ASN1_STRFLGS_ESC_QUOTE
 | \

211 
XN_FLAG_SEP_CPLUS_SPC
 | \

212 
XN_FLAG_SPC_EQ
 | \

213 
XN_FLAG_FN_SN
)

	)

217 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

218 
ASN1_STRFLGS_ESC_MSB
 | \

219 
XN_FLAG_SEP_MULTILINE
 | \

220 
XN_FLAG_SPC_EQ
 | \

221 
XN_FLAG_FN_LN
 | \

222 
XN_FLAG_FN_ALIGN
)

	)

224 
DEFINE_STACK_OF
(
X509_REVOKED
)

226 
X509_¸l_öfo_°
 
	tX509_CRL_INFO
;

228 
DEFINE_STACK_OF
(
X509_CRL
)

230 
	s¥iv©e_key_°
 {

231 
vîsi⁄
;

233 
X509_ALGOR
 *
íc_Æg‹
;

234 
ASN1_OCTET_STRING
 *
íc_pkey
;

236 
EVP_PKEY
 *
dec_pkey
;

238 
key_Àngth
;

239 *
key_d©a
;

240 
key_‰ì
;

242 
EVP_CIPHER_INFO
 
cùhî
;

243 } 
	tX509_PKEY
;

245 
	sX509_öfo_°
 {

246 
X509
 *
x509
;

247 
X509_CRL
 *
¸l
;

248 
X509_PKEY
 *
x_pkey
;

249 
EVP_CIPHER_INFO
 
íc_cùhî
;

250 
íc_Àn
;

251 *
íc_d©a
;

252 } 
	tX509_INFO
;

254 
DEFINE_STACK_OF
(
X509_INFO
)

260 
	sNësˇ≥_•kac_°
 {

261 
X509_PUBKEY
 *
pubkey
;

262 
ASN1_IA5STRING
 *
chÆÀnge
;

263 } 
	tNETSCAPE_SPKAC
;

265 
	sNësˇ≥_•ki_°
 {

266 
NETSCAPE_SPKAC
 *
•kac
;

267 
X509_ALGOR
 
sig_Æg‹
;

268 
ASN1_BIT_STRING
 *
sig«tuª
;

269 } 
	tNETSCAPE_SPKI
;

272 
	sNësˇ≥_˚πifiˇã_£quí˚
 {

273 
ASN1_OBJECT
 *
ty≥
;

274 
STACK_OF
(
X509
Ë*
˚πs
;

275 } 
	tNETSCAPE_CERT_SEQUENCE
;

286 
	sPBEPARAM_°
 {

287 
ASN1_OCTET_STRING
 *
ß…
;

288 
ASN1_INTEGER
 *
ôî
;

289 } 
	tPBEPARAM
;

293 
	sPBE2PARAM_°
 {

294 
X509_ALGOR
 *
keyfunc
;

295 
X509_ALGOR
 *
í¸y±i⁄
;

296 } 
	tPBE2PARAM
;

298 
	sPBKDF2PARAM_°
 {

300 
ASN1_TYPE
 *
ß…
;

301 
ASN1_INTEGER
 *
ôî
;

302 
ASN1_INTEGER
 *
keyÀngth
;

303 
X509_ALGOR
 *
¥f
;

304 } 
	tPBKDF2PARAM
;

306 #i‚de‡
OPENSSL_NO_SCRYPT


307 
	sSCRYPT_PARAMS_°
 {

308 
ASN1_OCTET_STRING
 *
ß…
;

309 
ASN1_INTEGER
 *
co°P¨amëî
;

310 
ASN1_INTEGER
 *
blockSize
;

311 
ASN1_INTEGER
 *
∑øŒñiz©i⁄P¨amëî
;

312 
ASN1_INTEGER
 *
keyLígth
;

313 } 
	tSCRYPT_PARAMS
;

316 #ifde‡ 
__˝lu•lus


320 
	~<›ís¶/x509_vfy.h
>

321 
	~<›ís¶/pkcs7.h
>

323 #ifde‡ 
__˝lu•lus


327 
	#X509_EXT_PACK_UNKNOWN
 1

	)

328 
	#X509_EXT_PACK_STRING
 2

	)

330 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(x)

	)

331 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

332 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

334 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

335 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
((*
¸l_öô
Ë(
X509_CRL
 *
¸l
),

336 (*
¸l_‰ì
Ë(
X509_CRL
 *
¸l
),

337 (*
¸l_lookup
Ë(
X509_CRL
 *
¸l
,

338 
X509_REVOKED
 **
ªt
,

339 
ASN1_INTEGER
 *
£r
,

340 
X509_NAME
 *
issuî
),

341 (*
¸l_vîify
Ë(
X509_CRL
 *
¸l
,

342 
EVP_PKEY
 *
pk
));

343 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

345 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

346 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

348 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

350 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

352 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

353 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

354 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

356 
NETSCAPE_SPKI
 *
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

357 *
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

358 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

359 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

361 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

363 
X509_sig«tuª_dump
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

364 
X509_sig«tuª_¥öt
(
BIO
 *
bp
, c⁄° 
X509_ALGOR
 *
Æg
,

365 c⁄° 
ASN1_STRING
 *
sig
);

367 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

368 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

369 #i‚de‡
OPENSSL_NO_OCSP


370 
X509_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509
 **
p˚π
);

372 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

373 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

374 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

375 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

376 #i‚de‡
OPENSSL_NO_OCSP


377 
X509_CRL_hâp_nbio
(
OCSP_REQ_CTX
 *
r˘x
, 
X509_CRL
 **
p¸l
);

379 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

381 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

382 *
md
, *
Àn
);

383 
X509_dige°
(c⁄° 
X509
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

384 *
md
, *
Àn
);

385 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

386 *
md
, *
Àn
);

387 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

388 *
md
, *
Àn
);

389 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
, c⁄° 
EVP_MD
 *
ty≥
,

390 *
md
, *
Àn
);

392 #i‚de‡
OPENSSL_NO_STDIO


393 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

394 
i2d_X509_Â
(
FILE
 *
Â
, 
X509
 *
x509
);

395 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
, X509_CRL **
¸l
);

396 
i2d_X509_CRL_Â
(
FILE
 *
Â
, 
X509_CRL
 *
¸l
);

397 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
, X509_REQ **
ªq
);

398 
i2d_X509_REQ_Â
(
FILE
 *
Â
, 
X509_REQ
 *
ªq
);

399 #i‚de‡
OPENSSL_NO_RSA


400 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
, RSA **
rß
);

401 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

402 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
, RSA **
rß
);

403 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

404 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
, RSA **
rß
);

405 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
, 
RSA
 *
rß
);

407 #i‚de‡
OPENSSL_NO_DSA


408 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

409 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

410 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

411 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

413 #i‚de‡
OPENSSL_NO_EC


414 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

415 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

416 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

417 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

419 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
, X509_SIG **
p8
);

420 
i2d_PKCS8_Â
(
FILE
 *
Â
, 
X509_SIG
 *
p8
);

421 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

422 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

423 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

424 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

425 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

426 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

427 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

428 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

431 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
, X509 **
x509
);

432 
i2d_X509_bio
(
BIO
 *
bp
, 
X509
 *
x509
);

433 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
, X509_CRL **
¸l
);

434 
i2d_X509_CRL_bio
(
BIO
 *
bp
, 
X509_CRL
 *
¸l
);

435 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
, X509_REQ **
ªq
);

436 
i2d_X509_REQ_bio
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

437 #i‚de‡
OPENSSL_NO_RSA


438 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
, RSA **
rß
);

439 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

440 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
, RSA **
rß
);

441 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

442 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
, RSA **
rß
);

443 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
, 
RSA
 *
rß
);

445 #i‚de‡
OPENSSL_NO_DSA


446 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

447 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

448 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

449 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

451 #i‚de‡
OPENSSL_NO_EC


452 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

453 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

454 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

455 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

457 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
, X509_SIG **
p8
);

458 
i2d_PKCS8_bio
(
BIO
 *
bp
, 
X509_SIG
 *
p8
);

459 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

460 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

461 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

462 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

463 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

464 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

465 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

466 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

468 
X509
 *
X509_dup
(X509 *
x509
);

469 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

470 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

471 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

472 
X509_REVOKED
 *
X509_REVOKED_dup
(X509_REVOKED *
ªv
);

473 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

474 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

475 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
,

476 *
pvÆ
);

477 
X509_ALGOR_gë0
(c⁄° 
ASN1_OBJECT
 **
∑obj
, *
µty≥
,

478 c⁄° **
µvÆ
, c⁄° 
X509_ALGOR
 *
Æg‹
);

479 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

480 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

481 
X509_ALGOR_c›y
(
X509_ALGOR
 *
de°
, c⁄° X509_ALGOR *
§c
);

483 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

484 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

486 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

487 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

488 
ASN1_TIME
 *
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

489 
ASN1_TIME
 *
X509_time_adj_ex
(ASN1_TIME *
s
,

490 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

491 
ASN1_TIME
 *
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

493 c⁄° *
X509_gë_deÁu…_˚π_¨ó
();

494 c⁄° *
X509_gë_deÁu…_˚π_dú
();

495 c⁄° *
X509_gë_deÁu…_˚π_fûe
();

496 c⁄° *
X509_gë_deÁu…_˚π_dú_ív
();

497 c⁄° *
X509_gë_deÁu…_˚π_fûe_ív
();

498 c⁄° *
X509_gë_deÁu…_¥iv©e_dú
();

500 
X509_REQ
 *
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

501 
X509
 *
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
, 
EVP_PKEY
 *
pkey
);

503 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

504 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

505 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

507 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

509 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

510 
EVP_PKEY
 *
X509_PUBKEY_gë0
(
X509_PUBKEY
 *
key
);

511 
EVP_PKEY
 *
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

512 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
, 
STACK_OF
(
X509
Ë*
chaö
);

513 
X509_gë_∑thÀn
(
X509
 *
x
);

514 
i2d_PUBKEY
(
EVP_PKEY
 *
a
, **
µ
);

515 
EVP_PKEY
 *
d2i_PUBKEY
(EVP_PKEY **
a
, c⁄° **
µ
, 
Àngth
);

516 #i‚de‡
OPENSSL_NO_RSA


517 
i2d_RSA_PUBKEY
(
RSA
 *
a
, **
µ
);

518 
RSA
 *
d2i_RSA_PUBKEY
(RSA **
a
, c⁄° **
µ
, 
Àngth
);

520 #i‚de‡
OPENSSL_NO_DSA


521 
i2d_DSA_PUBKEY
(
DSA
 *
a
, **
µ
);

522 
DSA
 *
d2i_DSA_PUBKEY
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

524 #i‚de‡
OPENSSL_NO_EC


525 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

526 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
, 
Àngth
);

529 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

530 
X509_SIG_gë0
(c⁄° 
X509_SIG
 *
sig
, c⁄° 
X509_ALGOR
 **
∑lg
,

531 c⁄° 
ASN1_OCTET_STRING
 **
pdige°
);

532 
X509_SIG_gëm
(
X509_SIG
 *
sig
, 
X509_ALGOR
 **
∑lg
,

533 
ASN1_OCTET_STRING
 **
pdige°
);

535 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

536 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

538 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

539 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

541 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

542 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

544 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

546 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

548 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

550 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

552 
DECLARE_ASN1_FUNCTIONS
(
X509
)

553 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

555 
	#X509_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

556 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

557 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

558 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

559 
i2d_X509_AUX
(
X509
 *
a
, **
µ
);

560 
X509
 *
d2i_X509_AUX
(X509 **
a
, c⁄° **
µ
, 
Àngth
);

562 
i2d_ª_X509_tbs
(
X509
 *
x
, **
µ
);

564 
X509_SIG_INFO_gë
(c⁄° 
X509_SIG_INFO
 *
sigöf
, *
mdnid
, *
pknid
,

565 *
£cbôs
, 
uöt32_t
 *
Êags
);

566 
X509_SIG_INFO_£t
(
X509_SIG_INFO
 *
sigöf
, 
mdnid
, 
pknid
,

567 
£cbôs
, 
uöt32_t
 
Êags
);

569 
X509_gë_sig«tuª_öfo
(
X509
 *
x
, *
mdnid
, *
pknid
, *
£cbôs
,

570 
uöt32_t
 *
Êags
);

572 
X509_gë0_sig«tuª
(c⁄° 
ASN1_BIT_STRING
 **
psig
,

573 c⁄° 
X509_ALGOR
 **
∑lg
, c⁄° 
X509
 *
x
);

574 
X509_gë_sig«tuª_nid
(c⁄° 
X509
 *
x
);

576 
X509_åu°ed
(c⁄° 
X509
 *
x
);

577 
X509_Æüs_£t1
(
X509
 *
x
, c⁄° *
«me
, 
Àn
);

578 
X509_keyid_£t1
(
X509
 *
x
, c⁄° *
id
, 
Àn
);

579 *
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

580 *
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

581 (*
X509_TRUST_£t_deÁu…
((*
åu°
Ë(, 
X509
 *, ))) (, X509 *,

583 
X509_TRUST_£t
(*
t
, 
åu°
);

584 
X509_add1_åu°_obje˘
(
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
);

585 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
);

586 
X509_åu°_˛ór
(
X509
 *
x
);

587 
X509_ªje˘_˛ór
(
X509
 *
x
);

589 
STACK_OF
(
ASN1_OBJECT
Ë*
X509_gë0_åu°_obje˘s
(
X509
 *
x
);

590 
STACK_OF
(
ASN1_OBJECT
Ë*
X509_gë0_ªje˘_obje˘s
(
X509
 *
x
);

592 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

593 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

594 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

596 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

597 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

598 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

599 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

601 
X509_PKEY
 *
X509_PKEY_√w
();

602 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

604 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

605 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

606 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

608 
X509_INFO
 *
X509_INFO_√w
();

609 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

610 *
X509_NAME_⁄ñöe
(c⁄° 
X509_NAME
 *
a
, *
buf
, 
size
);

612 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

613 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

615 
ASN1_dige°
(
i2d_of_void
 *
i2d
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

616 *
md
, *
Àn
);

618 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

619 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

620 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

622 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
EVP_MD
 *
ty≥
, *
d©a
,

623 *
md
, *
Àn
);

625 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

626 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
, 
EVP_PKEY
 *
pkey
);

628 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

629 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
, *
d©a
,

630 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

631 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

632 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

633 *
a¢
, 
EVP_MD_CTX
 *
˘x
);

635 
X509_gë_vîsi⁄
(c⁄° 
X509
 *
x
);

636 
X509_£t_vîsi⁄
(
X509
 *
x
, 
vîsi⁄
);

637 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

638 
ASN1_INTEGER
 *
X509_gë_£rülNumbî
(
X509
 *
x
);

639 c⁄° 
ASN1_INTEGER
 *
X509_gë0_£rülNumbî
(c⁄° 
X509
 *
x
);

640 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

641 
X509_NAME
 *
X509_gë_issuî_«me
(c⁄° 
X509
 *
a
);

642 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

643 
X509_NAME
 *
X509_gë_subje˘_«me
(c⁄° 
X509
 *
a
);

644 c⁄° 
ASN1_TIME
 * 
X509_gë0_nŸBef‹e
(c⁄° 
X509
 *
x
);

645 
ASN1_TIME
 *
X509_gëm_nŸBef‹e
(c⁄° 
X509
 *
x
);

646 
X509_£t1_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

647 c⁄° 
ASN1_TIME
 *
X509_gë0_nŸA·î
(c⁄° 
X509
 *
x
);

648 
ASN1_TIME
 *
X509_gëm_nŸA·î
(c⁄° 
X509
 *
x
);

649 
X509_£t1_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

650 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

651 
X509_up_ªf
(
X509
 *
x
);

652 
X509_gë_sig«tuª_ty≥
(c⁄° 
X509
 *
x
);

654 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

655 
	#X509_gë_nŸBef‹e
 
X509_gëm_nŸBef‹e


	)

656 
	#X509_gë_nŸA·î
 
X509_gëm_nŸA·î


	)

657 
	#X509_£t_nŸBef‹e
 
X509_£t1_nŸBef‹e


	)

658 
	#X509_£t_nŸA·î
 
X509_£t1_nŸA·î


	)

666 
X509_PUBKEY
 *
X509_gë_X509_PUBKEY
(c⁄° 
X509
 *
x
);

667 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
X509_gë0_exãnsi⁄s
(c⁄° 
X509
 *
x
);

668 
X509_gë0_uids
(c⁄° 
X509
 *
x
, c⁄° 
ASN1_BIT_STRING
 **
piuid
,

669 c⁄° 
ASN1_BIT_STRING
 **
psuid
);

670 c⁄° 
X509_ALGOR
 *
X509_gë0_tbs_sigÆg
(c⁄° 
X509
 *
x
);

672 
EVP_PKEY
 *
X509_gë0_pubkey
(c⁄° 
X509
 *
x
);

673 
EVP_PKEY
 *
X509_gë_pubkey
(
X509
 *
x
);

674 
ASN1_BIT_STRING
 *
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

675 
X509_˚πifiˇã_ty≥
(c⁄° 
X509
 *
x
, c⁄° 
EVP_PKEY
 *
pubkey
);

677 
X509_REQ_gë_vîsi⁄
(c⁄° 
X509_REQ
 *
ªq
);

678 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
, 
vîsi⁄
);

679 
X509_NAME
 *
X509_REQ_gë_subje˘_«me
(c⁄° 
X509_REQ
 *
ªq
);

680 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
, 
X509_NAME
 *
«me
);

681 
X509_REQ_gë0_sig«tuª
(c⁄° 
X509_REQ
 *
ªq
, c⁄° 
ASN1_BIT_STRING
 **
psig
,

682 c⁄° 
X509_ALGOR
 **
∑lg
);

683 
X509_REQ_£t0_sig«tuª
(
X509_REQ
 *
ªq
, 
ASN1_BIT_STRING
 *
psig
);

684 
X509_REQ_£t1_sig«tuª_Ægo
(
X509_REQ
 *
ªq
, 
X509_ALGOR
 *
∑lg
);

685 
X509_REQ_gë_sig«tuª_nid
(c⁄° 
X509_REQ
 *
ªq
);

686 
i2d_ª_X509_REQ_tbs
(
X509_REQ
 *
ªq
, **
µ
);

687 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

688 
EVP_PKEY
 *
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

689 
EVP_PKEY
 *
X509_REQ_gë0_pubkey
(
X509_REQ
 *
ªq
);

690 
X509_PUBKEY
 *
X509_REQ_gë_X509_PUBKEY
(
X509_REQ
 *
ªq
);

691 
X509_REQ_exãnsi⁄_nid
(
nid
);

692 *
X509_REQ_gë_exãnsi⁄_nids
();

693 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

694 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

695 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

696 
nid
);

697 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

698 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

699 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
, 
œ°pos
);

700 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, c⁄° 
ASN1_OBJECT
 *
obj
,

701 
œ°pos
);

702 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

703 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

704 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

705 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

706 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

707 c⁄° *
byãs
, 
Àn
);

708 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

709 
nid
, 
ty≥
,

710 c⁄° *
byãs
, 
Àn
);

711 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

712 c⁄° *
©å«me
, 
ty≥
,

713 c⁄° *
byãs
, 
Àn
);

715 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

716 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

717 
X509_CRL_£t1_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

718 
X509_CRL_£t1_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

719 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

720 
X509_CRL_up_ªf
(
X509_CRL
 *
¸l
);

722 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

723 
	#X509_CRL_£t_œ°Upd©e
 
X509_CRL_£t1_œ°Upd©e


	)

724 
	#X509_CRL_£t_√xtUpd©e
 
X509_CRL_£t1_√xtUpd©e


	)

727 
X509_CRL_gë_vîsi⁄
(c⁄° 
X509_CRL
 *
¸l
);

728 c⁄° 
ASN1_TIME
 *
X509_CRL_gë0_œ°Upd©e
(c⁄° 
X509_CRL
 *
¸l
);

729 c⁄° 
ASN1_TIME
 *
X509_CRL_gë0_√xtUpd©e
(c⁄° 
X509_CRL
 *
¸l
);

730 
DEPRECATEDIN_1_1_0
(
ASN1_TIME
 *
X509_CRL_gë_œ°Upd©e
(
X509_CRL
 *
¸l
))

731 
DEPRECATEDIN_1_1_0
(
ASN1_TIME
 *
X509_CRL_gë_√xtUpd©e
(
X509_CRL
 *
¸l
))

732 
X509_NAME
 *
X509_CRL_gë_issuî
(c⁄° 
X509_CRL
 *
¸l
);

733 c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
X509_CRL_gë0_exãnsi⁄s
(c⁄° 
X509_CRL
 *
¸l
);

734 
STACK_OF
(
X509_REVOKED
Ë*
X509_CRL_gë_REVOKED
(
X509_CRL
 *
¸l
);

735 
X509_CRL_gë0_sig«tuª
(c⁄° 
X509_CRL
 *
¸l
, c⁄° 
ASN1_BIT_STRING
 **
psig
,

736 c⁄° 
X509_ALGOR
 **
∑lg
);

737 
X509_CRL_gë_sig«tuª_nid
(c⁄° 
X509_CRL
 *
¸l
);

738 
i2d_ª_X509_CRL_tbs
(
X509_CRL
 *
ªq
, **
µ
);

740 c⁄° 
ASN1_INTEGER
 *
X509_REVOKED_gë0_£rülNumbî
(c⁄° 
X509_REVOKED
 *
x
);

741 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

742 c⁄° 
ASN1_TIME
 *
X509_REVOKED_gë0_ªvoˇti⁄D©e
(c⁄° 
X509_REVOKED
 *
x
);

743 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

744 c⁄° 
STACK_OF
(
X509_EXTENSION
) *

745 
X509_REVOKED_gë0_exãnsi⁄s
(c⁄° 
X509_REVOKED
 *
r
);

747 
X509_CRL
 *
X509_CRL_diff
(X509_CRL *
ba£
, X509_CRL *
√wî
,

748 
EVP_PKEY
 *
skey
, c⁄° 
EVP_MD
 *
md
, 
Êags
);

750 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
, 
EVP_PKEY
 *
pkey
);

752 
X509_check_¥iv©e_key
(c⁄° 
X509
 *
x509
, c⁄° 
EVP_PKEY
 *
pkey
);

753 
X509_chaö_check_suôeb
(*
≥º‹_dïth
,

754 
X509
 *
x
, 
STACK_OF
(X509Ë*
chaö
,

755 
Êags
);

756 
X509_CRL_check_suôeb
(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
, 
Êags
);

757 
STACK_OF
(
X509
Ë*
X509_chaö_up_ªf
(STACK_OF(X509Ë*
chaö
);

759 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

760 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

762 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

763 
X509_issuî_«me_hash
(
X509
 *
a
);

765 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

766 
X509_subje˘_«me_hash
(
X509
 *
x
);

768 #i‚de‡
OPENSSL_NO_MD5


769 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

770 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

773 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

774 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

775 
X509_NAME_hash
(
X509_NAME
 *
x
);

776 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

778 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

779 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

780 
X509_aux_¥öt
(
BIO
 *
out
, 
X509
 *
x
, 
ödít
);

781 #i‚de‡
OPENSSL_NO_STDIO


782 
X509_¥öt_ex_Â
(
FILE
 *
bp
, 
X509
 *
x
, 
nmÊag
,

783 
cÊag
);

784 
X509_¥öt_Â
(
FILE
 *
bp
, 
X509
 *
x
);

785 
X509_CRL_¥öt_Â
(
FILE
 *
bp
, 
X509_CRL
 *
x
);

786 
X509_REQ_¥öt_Â
(
FILE
 *
bp
, 
X509_REQ
 *
ªq
);

787 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, c⁄° 
X509_NAME
 *
nm
, 
ödít
,

788 
Êags
);

791 
X509_NAME_¥öt
(
BIO
 *
bp
, c⁄° 
X509_NAME
 *
«me
, 
oba£
);

792 
X509_NAME_¥öt_ex
(
BIO
 *
out
, c⁄° 
X509_NAME
 *
nm
, 
ödít
,

793 
Êags
);

794 
X509_¥öt_ex
(
BIO
 *
bp
, 
X509
 *
x
, 
nmÊag
,

795 
cÊag
);

796 
X509_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

797 
X509_oc•id_¥öt
(
BIO
 *
bp
, 
X509
 *
x
);

798 
X509_CRL_¥öt_ex
(
BIO
 *
out
, 
X509_CRL
 *
x
, 
nmÊag
);

799 
X509_CRL_¥öt
(
BIO
 *
bp
, 
X509_CRL
 *
x
);

800 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
,

801 
cÊag
);

802 
X509_REQ_¥öt
(
BIO
 *
bp
, 
X509_REQ
 *
ªq
);

804 
X509_NAME_íåy_cou¡
(c⁄° 
X509_NAME
 *
«me
);

805 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
, *
buf
, 
Àn
);

806 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
,

807 *
buf
, 
Àn
);

813 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
œ°pos
);

814 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
,

815 
œ°pos
);

816 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(c⁄° 
X509_NAME
 *
«me
, 
loc
);

817 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

818 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
, c⁄° 
X509_NAME_ENTRY
 *
√
,

819 
loc
, 
£t
);

820 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

821 c⁄° *
byãs
, 
Àn
, 
loc
,

822 
£t
);

823 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

824 c⁄° *
byãs
, 
Àn
, 
loc
,

825 
£t
);

826 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

827 c⁄° *
fõld
, 
ty≥
,

828 c⁄° *
byãs
,

829 
Àn
);

830 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

831 
ty≥
,

832 c⁄° *
byãs
,

833 
Àn
);

834 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

835 c⁄° *
byãs
, 
Àn
, 
loc
,

836 
£t
);

837 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

838 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

839 c⁄° *
byãs
,

840 
Àn
);

841 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
, c⁄° 
ASN1_OBJECT
 *
obj
);

842 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

843 c⁄° *
byãs
, 
Àn
);

844 
ASN1_OBJECT
 *
X509_NAME_ENTRY_gë_obje˘
(c⁄° 
X509_NAME_ENTRY
 *
√
);

845 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(c⁄° 
X509_NAME_ENTRY
 *
√
);

846 
X509_NAME_ENTRY_£t
(c⁄° 
X509_NAME_ENTRY
 *
√
);

848 
X509_NAME_gë0_dî
(
X509_NAME
 *
nm
, c⁄° **
pdî
,

849 
size_t
 *
pdîÀn
);

851 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

852 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

853 
nid
, 
œ°pos
);

854 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

855 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

856 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

857 
¸ô
, 
œ°pos
);

858 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

859 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

860 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

861 
X509_EXTENSION
 *
ex
, 
loc
);

863 
X509_gë_ext_cou¡
(c⁄° 
X509
 *
x
);

864 
X509_gë_ext_by_NID
(c⁄° 
X509
 *
x
, 
nid
, 
œ°pos
);

865 
X509_gë_ext_by_OBJ
(c⁄° 
X509
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

866 
X509_gë_ext_by_¸ôiˇl
(c⁄° 
X509
 *
x
, 
¸ô
, 
œ°pos
);

867 
X509_EXTENSION
 *
X509_gë_ext
(c⁄° 
X509
 *
x
, 
loc
);

868 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

869 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

870 *
X509_gë_ext_d2i
(c⁄° 
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

871 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

872 
Êags
);

874 
X509_CRL_gë_ext_cou¡
(c⁄° 
X509_CRL
 *
x
);

875 
X509_CRL_gë_ext_by_NID
(c⁄° 
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

876 
X509_CRL_gë_ext_by_OBJ
(c⁄° 
X509_CRL
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

877 
œ°pos
);

878 
X509_CRL_gë_ext_by_¸ôiˇl
(c⁄° 
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

879 
X509_EXTENSION
 *
X509_CRL_gë_ext
(c⁄° 
X509_CRL
 *
x
, 
loc
);

880 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

881 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

882 *
X509_CRL_gë_ext_d2i
(c⁄° 
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

883 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

884 
Êags
);

886 
X509_REVOKED_gë_ext_cou¡
(c⁄° 
X509_REVOKED
 *
x
);

887 
X509_REVOKED_gë_ext_by_NID
(c⁄° 
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

888 
X509_REVOKED_gë_ext_by_OBJ
(c⁄° 
X509_REVOKED
 *
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

889 
œ°pos
);

890 
X509_REVOKED_gë_ext_by_¸ôiˇl
(c⁄° 
X509_REVOKED
 *
x
, 
¸ô
,

891 
œ°pos
);

892 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(c⁄° 
X509_REVOKED
 *
x
, 
loc
);

893 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

894 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

895 *
X509_REVOKED_gë_ext_d2i
(c⁄° 
X509_REVOKED
 *
x
, 
nid
, *
¸ô
,

896 *
idx
);

897 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

898 
Êags
);

900 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

901 
nid
, 
¸ô
,

902 
ASN1_OCTET_STRING
 *
d©a
);

903 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

904 c⁄° 
ASN1_OBJECT
 *
obj
, 
¸ô
,

905 
ASN1_OCTET_STRING
 *
d©a
);

906 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
, c⁄° 
ASN1_OBJECT
 *
obj
);

907 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

908 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
, 
ASN1_OCTET_STRING
 *
d©a
);

909 
ASN1_OBJECT
 *
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

910 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

911 
X509_EXTENSION_gë_¸ôiˇl
(c⁄° 
X509_EXTENSION
 *
ex
);

913 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

914 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

915 
œ°pos
);

916 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
,

917 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

918 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

919 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

920 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

921 
X509_ATTRIBUTE
 *
©å
);

922 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTE)

923 **
x
, c⁄° 
ASN1_OBJECT
 *
obj
,

924 
ty≥
,

925 c⁄° *
byãs
,

926 
Àn
);

927 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTE)

928 **
x
, 
nid
, 
ty≥
,

929 c⁄° *
byãs
,

930 
Àn
);

931 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTE)

932 **
x
, c⁄° *
©å«me
,

933 
ty≥
,

934 c⁄° *
byãs
,

935 
Àn
);

936 *
X509©_gë0_d©a_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

937 c⁄° 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

938 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

939 
©πy≥
, c⁄° *
d©a
,

940 
Àn
);

941 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

942 c⁄° 
ASN1_OBJECT
 *
obj
,

943 
©πy≥
, c⁄° *
d©a
,

944 
Àn
);

945 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

946 c⁄° *
©∫ame
, 
ty≥
,

947 c⁄° *
byãs
,

948 
Àn
);

949 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

950 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
,

951 c⁄° *
d©a
, 
Àn
);

952 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
, 
©πy≥
,

953 *
d©a
);

954 
X509_ATTRIBUTE_cou¡
(c⁄° 
X509_ATTRIBUTE
 *
©å
);

955 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

956 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

958 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

959 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
, 
œ°pos
);

960 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, c⁄° 
ASN1_OBJECT
 *
obj
,

961 
œ°pos
);

962 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

963 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

964 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

965 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

966 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

967 c⁄° *
byãs
, 
Àn
);

968 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

969 
nid
, 
ty≥
,

970 c⁄° *
byãs
, 
Àn
);

971 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

972 c⁄° *
©å«me
, 
ty≥
,

973 c⁄° *
byãs
, 
Àn
);

975 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

978 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
,

979 
ASN1_INTEGER
 *
£rül
);

980 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
, 
X509_NAME
 *
«me
);

982 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

983 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

984 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

985 #i‚de‡
OPENSSL_NO_SCRYPT


986 
DECLARE_ASN1_FUNCTIONS
(
SCRYPT_PARAMS
)

989 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

990 c⁄° *
ß…
, 
ß…Àn
);

992 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

993 c⁄° *
ß…
, 
ß…Àn
);

994 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

995 *
ß…
, 
ß…Àn
);

996 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

997 *
ß…
, 
ß…Àn
,

998 *
aiv
, 
¥f_nid
);

1000 #i‚de‡
OPENSSL_NO_SCRYPT


1001 
X509_ALGOR
 *
PKCS5_pbe2_£t_s¸y±
(c⁄° 
EVP_CIPHER
 *
cùhî
,

1002 c⁄° *
ß…
, 
ß…Àn
,

1003 *
aiv
, 
uöt64_t
 
N
, uöt64_à
r
,

1004 
uöt64_t
 
p
);

1007 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1008 
¥f_nid
, 
keyÀn
);

1012 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1014 
EVP_PKEY
 *
EVP_PKCS82PKEY
(c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1015 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1017 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1018 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1019 *
≥nc
, 
≥n˛í
);

1020 
PKCS8_pkey_gë0
(c⁄° 
ASN1_OBJECT
 **
µkÆg
,

1021 c⁄° **
pk
, *
µkÀn
,

1022 c⁄° 
X509_ALGOR
 **
∑
, c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1024 c⁄° 
STACK_OF
(
X509_ATTRIBUTE
) *

1025 
PKCS8_pkey_gë0_©ås
(c⁄° 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1026 
PKCS8_pkey_add1_©å_by_NID
(
PKCS8_PRIV_KEY_INFO
 *
p8
, 
nid
, 
ty≥
,

1027 c⁄° *
byãs
, 
Àn
);

1029 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1030 
±y≥
, *
pvÆ
,

1031 *
≥nc
, 
≥n˛í
);

1032 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1033 c⁄° **
pk
, *
µkÀn
,

1034 
X509_ALGOR
 **
∑
, 
X509_PUBKEY
 *
pub
);

1036 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1037 
X509_TRUST_gë_cou¡
();

1038 
X509_TRUST
 *
X509_TRUST_gë0
(
idx
);

1039 
X509_TRUST_gë_by_id
(
id
);

1040 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
Ë(
X509_TRUST
 *, 
X509
 *, ),

1041 c⁄° *
«me
, 
¨g1
, *
¨g2
);

1042 
X509_TRUST_˛ónup
();

1043 
X509_TRUST_gë_Êags
(c⁄° 
X509_TRUST
 *
xp
);

1044 *
X509_TRUST_gë0_«me
(c⁄° 
X509_TRUST
 *
xp
);

1045 
X509_TRUST_gë_åu°
(c⁄° 
X509_TRUST
 *
xp
);

1047 #ifde‡ 
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
__BEGIN_DECLS


101 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

102 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

103 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

104 
timevÆ
 *
__ª°ri˘
 
__timeout
);

106 #ifde‡
__USE_XOPEN2K


113 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

114 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

115 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

116 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

117 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

122 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


123 
	~<bôs/£À˘2.h
>

126 
	g__END_DECLS


	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
 << 3, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (c⁄° *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_MISC


200 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/ty≥s/°ack_t.h
>

28 #ifde‡
__USE_MISC


29 
	#__˘x
(
Êd
Ë
	)
Êd

31 
	#__˘x
(
Êd
Ë
__
 ## 
	)
Êd

34 #ifde‡
__x86_64__


37 
__exãnsi⁄__
 
	tgªg_t
;

40 
	#__NGREG
 23

	)

41 #ifde‡
__USE_MISC


42 
	#NGREG
 
__NGREG


	)

46 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

48 #ifde‡
__USE_GNU


52 
	mREG_R8
 = 0,

53 
	#REG_R8
 
REG_R8


	)

54 
	mREG_R9
,

55 
	#REG_R9
 
REG_R9


	)

56 
	mREG_R10
,

57 
	#REG_R10
 
REG_R10


	)

58 
	mREG_R11
,

59 
	#REG_R11
 
REG_R11


	)

60 
	mREG_R12
,

61 
	#REG_R12
 
REG_R12


	)

62 
	mREG_R13
,

63 
	#REG_R13
 
REG_R13


	)

64 
	mREG_R14
,

65 
	#REG_R14
 
REG_R14


	)

66 
	mREG_R15
,

67 
	#REG_R15
 
REG_R15


	)

68 
	mREG_RDI
,

69 
	#REG_RDI
 
REG_RDI


	)

70 
	mREG_RSI
,

71 
	#REG_RSI
 
REG_RSI


	)

72 
	mREG_RBP
,

73 
	#REG_RBP
 
REG_RBP


	)

74 
	mREG_RBX
,

75 
	#REG_RBX
 
REG_RBX


	)

76 
	mREG_RDX
,

77 
	#REG_RDX
 
REG_RDX


	)

78 
	mREG_RAX
,

79 
	#REG_RAX
 
REG_RAX


	)

80 
	mREG_RCX
,

81 
	#REG_RCX
 
REG_RCX


	)

82 
	mREG_RSP
,

83 
	#REG_RSP
 
REG_RSP


	)

84 
	mREG_RIP
,

85 
	#REG_RIP
 
REG_RIP


	)

86 
	mREG_EFL
,

87 
	#REG_EFL
 
REG_EFL


	)

88 
	mREG_CSGSFS
,

89 
	#REG_CSGSFS
 
REG_CSGSFS


	)

90 
	mREG_ERR
,

91 
	#REG_ERR
 
REG_ERR


	)

92 
	mREG_TRAPNO
,

93 
	#REG_TRAPNO
 
REG_TRAPNO


	)

94 
	mREG_OLDMASK
,

95 
	#REG_OLDMASK
 
REG_OLDMASK


	)

96 
	mREG_CR2


97 
	#REG_CR2
 
REG_CR2


	)

101 
	s_libc_Âxªg


103 
__˘x
(
signifiˇnd
)[4];

104 
__˘x
(
exp⁄ít
);

105 
	m__glibc_ª£rved1
[3];

108 
	s_libc_xmmªg


110 
__uöt32_t
 
__˘x
(
ñemít
)[4];

113 
	s_libc_Â°©e


116 
__uöt16_t
 
__˘x
(
cwd
);

117 
__uöt16_t
 
__˘x
(
swd
);

118 
__uöt16_t
 
__˘x
(
·w
);

119 
__uöt16_t
 
__˘x
(
f›
);

120 
__uöt64_t
 
__˘x
(
rù
);

121 
__uöt64_t
 
__˘x
(
rdp
);

122 
__uöt32_t
 
__˘x
(
mxc§
);

123 
__uöt32_t
 
__˘x
(
mx¸_mask
);

124 
_libc_Âxªg
 
	m_°
[8];

125 
_libc_xmmªg
 
	m_xmm
[16];

126 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

130 
_libc_Â°©e
 *
	tÂªg£t_t
;

135 
gªg£t_t
 
__˘x
(
gªgs
);

137 
Âªg£t_t
 
__˘x
(
Âªgs
);

138 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

139 } 
	tmc⁄ãxt_t
;

142 
	suc⁄ãxt_t


144 
__˘x
(
uc_Êags
);

145 
uc⁄ãxt_t
 *
	muc_lök
;

146 
°ack_t
 
	muc_°ack
;

147 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

148 
sig£t_t
 
	muc_sigmask
;

149 
_libc_Â°©e
 
	m__Âªgs_mem
;

150 
__exãnsi⁄__
 
	m__s•
[4];

151 } 
	tuc⁄ãxt_t
;

156 
	tgªg_t
;

159 
	#__NGREG
 19

	)

160 #ifde‡
__USE_MISC


161 
	#NGREG
 
__NGREG


	)

165 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

167 #ifde‡
__USE_GNU


171 
	mREG_GS
 = 0,

172 
	#REG_GS
 
REG_GS


	)

173 
	mREG_FS
,

174 
	#REG_FS
 
REG_FS


	)

175 
	mREG_ES
,

176 
	#REG_ES
 
REG_ES


	)

177 
	mREG_DS
,

178 
	#REG_DS
 
REG_DS


	)

179 
	mREG_EDI
,

180 
	#REG_EDI
 
REG_EDI


	)

181 
	mREG_ESI
,

182 
	#REG_ESI
 
REG_ESI


	)

183 
	mREG_EBP
,

184 
	#REG_EBP
 
REG_EBP


	)

185 
	mREG_ESP
,

186 
	#REG_ESP
 
REG_ESP


	)

187 
	mREG_EBX
,

188 
	#REG_EBX
 
REG_EBX


	)

189 
	mREG_EDX
,

190 
	#REG_EDX
 
REG_EDX


	)

191 
	mREG_ECX
,

192 
	#REG_ECX
 
REG_ECX


	)

193 
	mREG_EAX
,

194 
	#REG_EAX
 
REG_EAX


	)

195 
	mREG_TRAPNO
,

196 
	#REG_TRAPNO
 
REG_TRAPNO


	)

197 
	mREG_ERR
,

198 
	#REG_ERR
 
REG_ERR


	)

199 
	mREG_EIP
,

200 
	#REG_EIP
 
REG_EIP


	)

201 
	mREG_CS
,

202 
	#REG_CS
 
REG_CS


	)

203 
	mREG_EFL
,

204 
	#REG_EFL
 
REG_EFL


	)

205 
	mREG_UESP
,

206 
	#REG_UESP
 
REG_UESP


	)

207 
	mREG_SS


208 
	#REG_SS
 
REG_SS


	)

213 
	s_libc_Âªg


215 
__˘x
(
signifiˇnd
)[4];

216 
__˘x
(
exp⁄ít
);

219 
	s_libc_Â°©e


221 
__˘x
(
cw
);

222 
__˘x
(
sw
);

223 
__˘x
(
èg
);

224 
__˘x
(
ùoff
);

225 
__˘x
(
cs£l
);

226 
__˘x
(
d©aoff
);

227 
__˘x
(
d©a£l
);

228 
_libc_Âªg
 
	m_°
[8];

229 
__˘x
(
°©us
);

233 
_libc_Â°©e
 *
	tÂªg£t_t
;

238 
gªg£t_t
 
__˘x
(
gªgs
);

241 
Âªg£t_t
 
__˘x
(
Âªgs
);

242 
__˘x
(
ﬁdmask
);

243 
__˘x
(
¸2
);

244 } 
	tmc⁄ãxt_t
;

247 
	suc⁄ãxt_t


249 
__˘x
(
uc_Êags
);

250 
uc⁄ãxt_t
 *
	muc_lök
;

251 
°ack_t
 
	muc_°ack
;

252 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

253 
sig£t_t
 
	muc_sigmask
;

254 
_libc_Â°©e
 
	m__Âªgs_mem
;

255 
	m__s•
[4];

256 } 
	tuc⁄ãxt_t
;

260 #unde‡
__˘x


	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/cpu-set.h

20 #i‚de‡
_BITS_CPU_SET_H


21 
	#_BITS_CPU_SET_H
 1

	)

23 #i‚de‡
_SCHED_H


28 
	#__CPU_SETSIZE
 1024

	)

29 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

32 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

35 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

36 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

41 
__˝u_mask
 
	m__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

42 } 
	t˝u_£t_t
;

45 #i‡
__GNUC_PREREQ
 (2, 91)

46 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

47 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

49 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

51 
size_t
 
__i
; \

52 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

53 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

54 
__i
 = 0; __ò< 
__imax
; ++__i) \

55 
__bôs
[
__i
] = 0; \

56 } 0)

	)

58 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

59 (
__exãnsi⁄__
 \

60 ({ 
size_t
 
__˝u
 = (
˝u
); \

61 
__˝u
 / 8 < (
£tsize
) \

62 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

63 |
	`__CPUMASK
 (
__˝u
)) \

64 : 0; }))

	)

65 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

66 (
__exãnsi⁄__
 \

67 ({ 
size_t
 
__˝u
 = (
˝u
); \

68 
__˝u
 / 8 < (
£tsize
) \

69 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

70 &~
	`__CPUMASK
 (
__˝u
)) \

71 : 0; }))

	)

72 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

73 (
__exãnsi⁄__
 \

74 ({ 
size_t
 
__˝u
 = (
˝u
); \

75 
__˝u
 / 8 < (
£tsize
) \

76 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

77 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

78 : 0; }))

	)

80 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

81 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

83 #i‡
__GNUC_PREREQ
 (2, 91)

84 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

85 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

87 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

88 (
__exãnsi⁄__
 \

89 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

90 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

91 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

92 
size_t
 
__i
; \

93 
__i
 = 0; __ò< 
__imax
; ++__i) \

94 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

96 
__i
 =
__imax
; }))

	)

99 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

100 (
__exãnsi⁄__
 \

101 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

102 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

103 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

104 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

105 
size_t
 
__i
; \

106 
__i
 = 0; __ò< 
__imax
; ++__i) \

107 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

108 
__de°
; }))

	)

110 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

111 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

112 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

113 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

115 
__BEGIN_DECLS


117 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

118 
__THROW
;

119 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

120 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

122 
__END_DECLS


	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/ty≥s/°ru˘_iovec.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

205 
	#F_ADD_SEALS
 1033

	)

206 
	#F_GET_SEALS
 1034

	)

208 
	#F_GET_RW_HINT
 1035

	)

209 
	#F_SET_RW_HINT
 1036

	)

210 
	#F_GET_FILE_RW_HINT
 1037

	)

211 
	#F_SET_FILE_RW_HINT
 1038

	)

213 #ifde‡
__USE_XOPEN2K8


214 
	#F_DUPFD_CLOEXEC
 1030

	)

219 
	#FD_CLOEXEC
 1

	)

221 #i‚de‡
F_RDLCK


223 
	#F_RDLCK
 0

	)

224 
	#F_WRLCK
 1

	)

225 
	#F_UNLCK
 2

	)

230 #i‚de‡
F_EXLCK


231 
	#F_EXLCK
 4

	)

232 
	#F_SHLCK
 8

	)

235 #ifde‡
__USE_MISC


237 
	#LOCK_SH
 1

	)

238 
	#LOCK_EX
 2

	)

239 
	#LOCK_NB
 4

	)

241 
	#LOCK_UN
 8

	)

244 #ifde‡
__USE_GNU


245 
	#LOCK_MAND
 32

	)

246 
	#LOCK_READ
 64

	)

247 
	#LOCK_WRITE
 128

	)

248 
	#LOCK_RW
 192

	)

251 #ifde‡
__USE_GNU


253 
	#DN_ACCESS
 0x00000001

	)

254 
	#DN_MODIFY
 0x00000002

	)

255 
	#DN_CREATE
 0x00000004

	)

256 
	#DN_DELETE
 0x00000008

	)

257 
	#DN_RENAME
 0x00000010

	)

258 
	#DN_ATTRIB
 0x00000020

	)

259 
	#DN_MULTISHOT
 0x80000000

	)

263 #ifde‡
__USE_GNU


265 
	e__pid_ty≥


267 
	mF_OWNER_TID
 = 0,

268 
	mF_OWNER_PID
,

269 
	mF_OWNER_PGRP
,

270 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


274 
	sf_ow√r_ex


276 
__pid_ty≥
 
	mty≥
;

277 
__pid_t
 
	mpid
;

281 #ifde‡
__USE_GNU


283 
	#F_SEAL_SEAL
 0x0001

	)

284 
	#F_SEAL_SHRINK
 0x0002

	)

285 
	#F_SEAL_GROW
 0x0004

	)

286 
	#F_SEAL_WRITE
 0x0008

	)

289 #ifde‡
__USE_GNU


291 
	#RWH_WRITE_LIFE_NOT_SET
 0

	)

292 
	#RWF_WRITE_LIFE_NOT_SET
 
RWH_WRITE_LIFE_NOT_SET


	)

293 
	#RWH_WRITE_LIFE_NONE
 1

	)

294 
	#RWH_WRITE_LIFE_SHORT
 2

	)

295 
	#RWH_WRITE_LIFE_MEDIUM
 3

	)

296 
	#RWH_WRITE_LIFE_LONG
 4

	)

297 
	#RWH_WRITE_LIFE_EXTREME
 5

	)

302 #ifdef 
__USE_MISC


303 
	#FAPPEND
 
O_APPEND


	)

304 
	#FFSYNC
 
O_FSYNC


	)

305 
	#FASYNC
 
O_ASYNC


	)

306 
	#FNONBLOCK
 
O_NONBLOCK


	)

307 
	#FNDELAY
 
O_NDELAY


	)

310 #i‚de‡
__POSIX_FADV_DONTNEED


311 
	#__POSIX_FADV_DONTNEED
 4

	)

312 
	#__POSIX_FADV_NOREUSE
 5

	)

315 #ifde‡
__USE_XOPEN2K


316 
	#POSIX_FADV_NORMAL
 0

	)

317 
	#POSIX_FADV_RANDOM
 1

	)

318 
	#POSIX_FADV_SEQUENTIAL
 2

	)

319 
	#POSIX_FADV_WILLNEED
 3

	)

320 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

321 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

325 #ifde‡
__USE_GNU


327 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

330 
	#SYNC_FILE_RANGE_WRITE
 2

	)

333 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

338 
	#SPLICE_F_MOVE
 1

	)

339 
	#SPLICE_F_NONBLOCK
 2

	)

342 
	#SPLICE_F_MORE
 4

	)

343 
	#SPLICE_F_GIFT
 8

	)

347 
	~<löux/ÁŒoc.h
>

351 
	sfûe_h™dÀ


353 
	mh™dÀ_byãs
;

354 
	mh™dÀ_ty≥
;

356 
	mf_h™dÀ
[0];

360 
	#MAX_HANDLE_SZ
 128

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
__ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
__ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
__ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
__ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_SHARED_VALIDATE
 0x03

	)

47 
	#MAP_TYPE
 0x0‡

	)

51 
	#MAP_FIXED
 0x10

	)

52 #ifde‡
__USE_MISC


53 
	#MAP_FILE
 0

	)

54 #ifde‡
__MAP_ANONYMOUS


55 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

57 
	#MAP_ANONYMOUS
 0x20

	)

59 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

61 
	#MAP_HUGE_SHIFT
 26

	)

62 
	#MAP_HUGE_MASK
 0x3f

	)

66 
	#MS_ASYNC
 1

	)

67 
	#MS_SYNC
 4

	)

68 
	#MS_INVALIDATE
 2

	)

71 #ifde‡
__USE_GNU


72 
	#MREMAP_MAYMOVE
 1

	)

73 
	#MREMAP_FIXED
 2

	)

77 #ifde‡
__USE_MISC


78 
	#MADV_NORMAL
 0

	)

79 
	#MADV_RANDOM
 1

	)

80 
	#MADV_SEQUENTIAL
 2

	)

81 
	#MADV_WILLNEED
 3

	)

82 
	#MADV_DONTNEED
 4

	)

83 
	#MADV_FREE
 8

	)

84 
	#MADV_REMOVE
 9

	)

85 
	#MADV_DONTFORK
 10

	)

86 
	#MADV_DOFORK
 11

	)

87 
	#MADV_MERGEABLE
 12

	)

88 
	#MADV_UNMERGEABLE
 13

	)

89 
	#MADV_HUGEPAGE
 14

	)

90 
	#MADV_NOHUGEPAGE
 15

	)

91 
	#MADV_DONTDUMP
 16

	)

93 
	#MADV_DODUMP
 17

	)

94 
	#MADV_WIPEONFORK
 18

	)

95 
	#MADV_KEEPONFORK
 19

	)

96 
	#MADV_HWPOISON
 100

	)

100 #ifde‡
__USE_XOPEN2K


101 
	#POSIX_MADV_NORMAL
 0

	)

102 
	#POSIX_MADV_RANDOM
 1

	)

103 
	#POSIX_MADV_SEQUENTIAL
 2

	)

104 
	#POSIX_MADV_WILLNEED
 3

	)

105 
	#POSIX_MADV_DONTNEED
 4

	)

109 #i‚de‡
MCL_CURRENT


110 
	#MCL_CURRENT
 1

	)

111 
	#MCL_FUTURE
 2

	)

113 
	#MCL_ONFAULT
 4

	)

117 
	~<bôs/mm™-sh¨ed.h
>

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

27 
	~<bôs/w‹dsize.h
>

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 #ifde‡
__USE_XOPEN2K


139 
	#_POSIX_TZNAME_MAX
 6

	)

141 
	#_POSIX_TZNAME_MAX
 3

	)

144 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


146 
	#_POSIX_QLIMIT
 1

	)

150 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

153 
	#_POSIX_UIO_MAXIOV
 16

	)

157 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

161 
	~<bôs/loˇl_lim.h
>

164 #i‚def 
SSIZE_MAX


168 #i‡
__WORDSIZE
 =64 || 
__WORDSIZE32_SIZE_ULONG


169 
	#SSIZE_MAX
 
LONG_MAX


	)

171 
	#SSIZE_MAX
 
INT_MAX


	)

179 #i‚def 
NGROUPS_MAX


180 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
_BITS_SCHED_H


21 
	#_BITS_SCHED_H
 1

	)

23 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_ISO
 4

	)

34 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_DEADLINE
 6

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_GNU


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWCGROUP
 0x02000000

	)

66 
	#CLONE_NEWUTS
 0x04000000

	)

67 
	#CLONE_NEWIPC
 0x08000000

	)

68 
	#CLONE_NEWUSER
 0x10000000

	)

69 
	#CLONE_NEWPID
 0x20000000

	)

70 
	#CLONE_NEWNET
 0x40000000

	)

71 
	#CLONE_IO
 0x80000000

	)

74 
	~<bôs/ty≥s/°ru˘_sched_∑øm.h
>

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_GNU


80 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

93 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/siginfo-arch.h

2 #i‚de‡
_BITS_SIGINFO_ARCH_H


3 
	#_BITS_SIGINFO_ARCH_H
 1

	)

5 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

12 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

13 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

14 
	#__SI_CLOCK_T
 
__sigchld_˛ock_t


	)

	@/usr/include/bits/siginfo-consts-arch.h

2 #i‚de‡
_BITS_SIGINFO_CONSTS_ARCH_H


3 
	#_BITS_SIGINFO_CONSTS_ARCH_H
 1

	)

	@/usr/include/bits/signum-generic.h

19 #i‚def 
_BITS_SIGNUM_GENERIC_H


20 
	#_BITS_SIGNUM_GENERIC_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

29 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

30 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

32 #ifde‡
__USE_XOPEN


33 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

48 
	#SIGINT
 2

	)

49 
	#SIGILL
 4

	)

50 
	#SIGABRT
 6

	)

51 
	#SIGFPE
 8

	)

52 
	#SIGSEGV
 11

	)

53 
	#SIGTERM
 15

	)

56 
	#SIGHUP
 1

	)

57 
	#SIGQUIT
 3

	)

58 
	#SIGTRAP
 5

	)

59 
	#SIGKILL
 9

	)

60 
	#SIGBUS
 10

	)

61 
	#SIGSYS
 12

	)

62 
	#SIGPIPE
 13

	)

63 
	#SIGALRM
 14

	)

66 
	#SIGURG
 16

	)

67 
	#SIGSTOP
 17

	)

68 
	#SIGTSTP
 18

	)

69 
	#SIGCONT
 19

	)

70 
	#SIGCHLD
 20

	)

71 
	#SIGTTIN
 21

	)

72 
	#SIGTTOU
 22

	)

73 
	#SIGPOLL
 23

	)

74 
	#SIGXCPU
 24

	)

75 
	#SIGXFSZ
 25

	)

76 
	#SIGVTALRM
 26

	)

77 
	#SIGPROF
 27

	)

78 
	#SIGUSR1
 30

	)

79 
	#SIGUSR2
 31

	)

83 
	#SIGWINCH
 28

	)

86 
	#SIGIO
 
SIGPOLL


	)

87 
	#SIGIOT
 
SIGABRT


	)

88 
	#SIGCLD
 
SIGCHLD


	)

96 
	#__SIGRTMIN
 32

	)

97 
	#__SIGRTMAX
 
__SIGRTMIN


	)

100 
	#_NSIG
 (
__SIGRTMAX
 + 1)

	)

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/statx-generic.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©x
-
gíîic
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

25 
	~<bôs/ty≥s/°ru˘_°©x_time°amp.h
>

26 
	~<bôs/ty≥s/°ru˘_°©x.h
>

28 #i‚de‡
STATX_TYPE


29 
	#STATX_TYPE
 0x0001U

	)

30 
	#STATX_MODE
 0x0002U

	)

31 
	#STATX_NLINK
 0x0004U

	)

32 
	#STATX_UID
 0x0008U

	)

33 
	#STATX_GID
 0x0010U

	)

34 
	#STATX_ATIME
 0x0020U

	)

35 
	#STATX_MTIME
 0x0040U

	)

36 
	#STATX_CTIME
 0x0080U

	)

37 
	#STATX_INO
 0x0100U

	)

38 
	#STATX_SIZE
 0x0200U

	)

39 
	#STATX_BLOCKS
 0x0400U

	)

40 
	#STATX_BASIC_STATS
 0x07ffU

	)

41 
	#STATX_ALL
 0x0fffU

	)

42 
	#STATX_BTIME
 0x0800U

	)

43 
	#STATX__RESERVED
 0x80000000U

	)

45 
	#STATX_ATTR_COMPRESSED
 0x0004

	)

46 
	#STATX_ATTR_IMMUTABLE
 0x0010

	)

47 
	#STATX_ATTR_APPEND
 0x0020

	)

48 
	#STATX_ATTR_NODUMP
 0x0040

	)

49 
	#STATX_ATTR_ENCRYPTED
 0x0800

	)

50 
	#STATX_ATTR_AUTOMOUNT
 0x1000

	)

53 
__BEGIN_DECLS


56 
	$°©x
 (
__dúfd
, c⁄° *
__ª°ri˘
 
__∑th
, 
__Êags
,

57 
__mask
, 
°©x
 *
__ª°ri˘
 
__buf
)

58 
__THROW
 
	`__n⁄nuŒ
 ((2, 5));

60 
__END_DECLS


	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
,

26 
	`__glibc_objsize0
 (
__de°
));

27 
	}
}

29 
__f‹tify_fun˘i⁄
 

30 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

32 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
,

33 
	`__glibc_objsize0
 (
__de°
));

34 
	}
}

	@/usr/include/bits/syslog-ldbl.h

19 #i‚de‡
_SYS_SYSLOG_H


23 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

25 #ifde‡
__USE_MISC


26 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

29 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


30 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

32 #ifde‡
__USE_MISC


33 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

19 #i‚de‡
_SYS_SYSLOG_H


23 #i‚de‡
_BITS_SYSLOG_PATH_H


24 
	#_BITS_SYSLOG_PATH_H
 1

	)

26 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

19 #i‚de‡
_SYS_SYSLOG_H


24 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
, ...)

25 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

27 #ifde‡
__va_¨g_∑ck


28 
__f‹tify_fun˘i⁄
 

29 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

31 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

32 
	}
}

33 #ñi‡!
deföed
 
__˝lu•lus


34 
	#sy¶og
(
¥i
, ...) \

35 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

39 #ifde‡
__USE_MISC


40 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
,

41 
__gnuc_va_li°
 
__≠
)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 
__f‹tify_fun˘i⁄
 

45 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

47 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

48 
	}
}

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

77 
	~<bôs/±hªadty≥s-¨ch.h
>

81 #i‡!
__PTHREAD_MUTEX_USE_UNION


82 
	s__±hªad_öã∫Æ_li°


84 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

85 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

86 } 
	t__±hªad_li°_t
;

88 
	s__±hªad_öã∫Æ_¶i°


90 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

91 } 
	t__±hªad_¶i°_t
;

95 #i‡
__PTHREAD_MUTEX_LOCK_ELISION


96 #i‡!
__PTHREAD_MUTEX_USE_UNION


97 
	#__PTHREAD_SPINS_DATA
 \

98 
__•ös
; \

99 
__ñisi⁄


	)

100 
	#__PTHREAD_SPINS
 0, 0

	)

102 
	#__PTHREAD_SPINS_DATA
 \

105 
__e•ös
; \

106 
__ìlisi⁄
; \

107 } 
__ñisi⁄_d©a


	)

108 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

109 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

110 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

113 
	#__PTHREAD_SPINS_DATA
 
__•ös


	)

115 
	#__PTHREAD_SPINS
 0

	)

118 
	s__±hªad_muãx_s


120 
__lock
 
	m__LOCK_ALIGNMENT
;

121 
	m__cou¡
;

122 
	m__ow√r
;

123 #i‡!
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


124 
	m__nu£rs
;

148 
	m__köd
;

149 
	m__PTHREAD_COMPAT_PADDING_MID


150 #i‡
__PTHREAD_MUTEX_NUSERS_AFTER_KIND


151 
	m__nu£rs
;

153 #i‡!
__PTHREAD_MUTEX_USE_UNION


154 
	m__PTHREAD_SPINS_DATA
;

155 
__±hªad_li°_t
 
	m__li°
;

156 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

158 
__exãnsi⁄__
 union

160 
	m__PTHREAD_SPINS_DATA
;

161 
__±hªad_¶i°_t
 
	m__li°
;

163 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

165 
	m__PTHREAD_COMPAT_PADDING_END


171 
	s__±hªad_c⁄d_s


173 
__exãnsi⁄__
 union

175 
__exãnsi⁄__
 
	m__w£q
;

178 
	m__low
;

179 
	m__high
;

180 } 
	m__w£q32
;

182 
__exãnsi⁄__
 union

184 
__exãnsi⁄__
 
	m__g1_°¨t
;

187 
	m__low
;

188 
	m__high
;

189 } 
	m__g1_°¨t32
;

191 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

192 
	m__g_size
[2];

193 
	m__g1_‹ig_size
;

194 
	m__wªfs
;

195 
	m__g_sig«ls
[2];

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

22 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

26 
	stimex


28 
	mmodes
;

29 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

30 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

31 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

32 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

33 
	m°©us
;

34 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

35 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

36 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

37 
timevÆ
 
	mtime
;

38 
__sysˇŒ_¶⁄g_t
 
	mtick
;

39 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

40 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

41 
	mshi·
;

42 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

43 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

46 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

48 
	mèi
;

57 
	#ADJ_OFFSET
 0x0001

	)

58 
	#ADJ_FREQUENCY
 0x0002

	)

59 
	#ADJ_MAXERROR
 0x0004

	)

60 
	#ADJ_ESTERROR
 0x0008

	)

61 
	#ADJ_STATUS
 0x0010

	)

62 
	#ADJ_TIMECONST
 0x0020

	)

63 
	#ADJ_TAI
 0x0080

	)

64 
	#ADJ_SETOFFSET
 0x0100

	)

65 
	#ADJ_MICRO
 0x1000

	)

66 
	#ADJ_NANO
 0x2000

	)

67 
	#ADJ_TICK
 0x4000

	)

68 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

69 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

72 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

73 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

74 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

75 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

76 
	#MOD_STATUS
 
ADJ_STATUS


	)

77 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

78 
	#MOD_CLKB
 
ADJ_TICK


	)

79 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

80 
	#MOD_TAI
 
ADJ_TAI


	)

81 
	#MOD_MICRO
 
ADJ_MICRO


	)

82 
	#MOD_NANO
 
ADJ_NANO


	)

86 
	#STA_PLL
 0x0001

	)

87 
	#STA_PPSFREQ
 0x0002

	)

88 
	#STA_PPSTIME
 0x0004

	)

89 
	#STA_FLL
 0x0008

	)

91 
	#STA_INS
 0x0010

	)

92 
	#STA_DEL
 0x0020

	)

93 
	#STA_UNSYNC
 0x0040

	)

94 
	#STA_FREQHOLD
 0x0080

	)

96 
	#STA_PPSSIGNAL
 0x0100

	)

97 
	#STA_PPSJITTER
 0x0200

	)

98 
	#STA_PPSWANDER
 0x0400

	)

99 
	#STA_PPSERROR
 0x0800

	)

101 
	#STA_CLOCKERR
 0x1000

	)

102 
	#STA_NANO
 0x2000

	)

103 
	#STA_MODE
 0x4000

	)

104 
	#STA_CLK
 0x8000

	)

107 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

108 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/types/__locale_t.h

20 #i‚de‡
_BITS_TYPES___LOCALE_T_H


21 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

42 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/bits/types/__sigval_t.h

19 #i‚de‡
____sigvÆ_t_deföed


20 
	#____sigvÆ_t_deföed


	)

23 #ifde‡
__USE_POSIX199309


24 
	usigvÆ


26 
	msivÆ_öt
;

27 *
	msivÆ_±r
;

30 
sigvÆ
 
	t__sigvÆ_t
;

32 
	u__sigvÆ


34 
	m__sivÆ_öt
;

35 *
	m__sivÆ_±r
;

38 
__sigvÆ
 
	t__sigvÆ_t
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

88 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

92 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

62 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

64 
	~<bôs/uio_lim.h
>

65 #ifde‡
__IOV_MAX


66 
	#IOV_MAX
 
__IOV_MAX


	)

68 #unde‡
IOV_MAX


73 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

76 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

79 
	#NL_MSGMAX
 
INT_MAX


	)

83 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


84 
	#NL_NMAX
 
INT_MAX


	)

88 
	#NL_SETMAX
 
INT_MAX


	)

91 
	#NL_TEXTMAX
 
INT_MAX


	)

94 
	#NZERO
 20

	)

98 #ifde‡
INT_MAX


99 #i‡
INT_MAX
 == 32767

100 
	#WORD_BIT
 16

	)

102 #i‡
INT_MAX
 == 2147483647

103 
	#WORD_BIT
 32

	)

106 
	#WORD_BIT
 64

	)

109 #ñi‡
deföed
 
__INT_MAX__


110 #i‡
__INT_MAX__
 == 32767

111 
	#WORD_BIT
 16

	)

113 #i‡
__INT_MAX__
 == 2147483647

114 
	#WORD_BIT
 32

	)

117 
	#WORD_BIT
 64

	)

121 
	#WORD_BIT
 32

	)

125 #ifde‡
LONG_MAX


126 #i‡
LONG_MAX
 == 2147483647

127 
	#LONG_BIT
 32

	)

130 
	#LONG_BIT
 64

	)

132 #ñi‡
deföed
 
__LONG_MAX__


133 #i‡
__LONG_MAX__
 == 2147483647

134 
	#LONG_BIT
 32

	)

137 
	#LONG_BIT
 64

	)

140 
	~<bôs/w‹dsize.h
>

141 #i‡
__WORDSIZE
 == 64

142 
	#LONG_BIT
 64

	)

144 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/stat.h

2 #i‚de‡
_LINUX_STAT_H


3 
	#_LINUX_STAT_H


	)

5 
	~<löux/ty≥s.h
>

7 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

9 
	#S_IFMT
 00170000

	)

10 
	#S_IFSOCK
 0140000

	)

11 
	#S_IFLNK
 0120000

	)

12 
	#S_IFREG
 0100000

	)

13 
	#S_IFBLK
 0060000

	)

14 
	#S_IFDIR
 0040000

	)

15 
	#S_IFCHR
 0020000

	)

16 
	#S_IFIFO
 0010000

	)

17 
	#S_ISUID
 0004000

	)

18 
	#S_ISGID
 0002000

	)

19 
	#S_ISVTX
 0001000

	)

21 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

22 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

23 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

24 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

25 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

26 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

27 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

29 
	#S_IRWXU
 00700

	)

30 
	#S_IRUSR
 00400

	)

31 
	#S_IWUSR
 00200

	)

32 
	#S_IXUSR
 00100

	)

34 
	#S_IRWXG
 00070

	)

35 
	#S_IRGRP
 00040

	)

36 
	#S_IWGRP
 00020

	)

37 
	#S_IXGRP
 00010

	)

39 
	#S_IRWXO
 00007

	)

40 
	#S_IROTH
 00004

	)

41 
	#S_IWOTH
 00002

	)

42 
	#S_IXOTH
 00001

	)

56 
	s°©x_time°amp
 {

57 
__s64
 
	mtv_£c
;

58 
__u32
 
	mtv_n£c
;

59 
__s32
 
	m__ª£rved
;

99 
	s°©x
 {

101 
__u32
 
	m°x_mask
;

102 
__u32
 
	m°x_blksize
;

103 
__u64
 
	m°x_©åibuãs
;

105 
__u32
 
	m°x_∆ök
;

106 
__u32
 
	m°x_uid
;

107 
__u32
 
	m°x_gid
;

108 
__u16
 
	m°x_mode
;

109 
__u16
 
	m__•¨e0
[1];

111 
__u64
 
	m°x_öo
;

112 
__u64
 
	m°x_size
;

113 
__u64
 
	m°x_blocks
;

114 
__u64
 
	m°x_©åibuãs_mask
;

116 
°©x_time°amp
 
	m°x_©ime
;

117 
°©x_time°amp
 
	m°x_btime
;

118 
°©x_time°amp
 
	m°x_˘ime
;

119 
°©x_time°amp
 
	m°x_mtime
;

121 
__u32
 
	m°x_rdev_maj‹
;

122 
__u32
 
	m°x_rdev_mö‹
;

123 
__u32
 
	m°x_dev_maj‹
;

124 
__u32
 
	m°x_dev_mö‹
;

126 
__u64
 
	m__•¨e2
[14];

138 
	#STATX_TYPE
 0x00000001U

	)

139 
	#STATX_MODE
 0x00000002U

	)

140 
	#STATX_NLINK
 0x00000004U

	)

141 
	#STATX_UID
 0x00000008U

	)

142 
	#STATX_GID
 0x00000010U

	)

143 
	#STATX_ATIME
 0x00000020U

	)

144 
	#STATX_MTIME
 0x00000040U

	)

145 
	#STATX_CTIME
 0x00000080U

	)

146 
	#STATX_INO
 0x00000100U

	)

147 
	#STATX_SIZE
 0x00000200U

	)

148 
	#STATX_BLOCKS
 0x00000400U

	)

149 
	#STATX_BASIC_STATS
 0x000007ffU

	)

150 
	#STATX_BTIME
 0x00000800U

	)

151 
	#STATX_ALL
 0x00000fffU

	)

152 
	#STATX__RESERVED
 0x80000000U

	)

168 
	#STATX_ATTR_COMPRESSED
 0x00000004

	)

169 
	#STATX_ATTR_IMMUTABLE
 0x00000010

	)

170 
	#STATX_ATTR_APPEND
 0x00000020

	)

171 
	#STATX_ATTR_NODUMP
 0x00000040

	)

172 
	#STATX_ATTR_ENCRYPTED
 0x00000800

	)

174 
	#STATX_ATTR_AUTOMOUNT
 0x00001000

	)

175 
	#STATX_ATTR_DAX
 0x00200000

	)

	@/usr/include/openssl/asn1err.h

11 #i‚de‡
HEADER_ASN1ERR_H


12 
	#HEADER_ASN1ERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_ASN1_°rögs
();

24 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

25 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

26 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

27 
	#ASN1_F_APPEND_EXP
 176

	)

28 
	#ASN1_F_ASN1_BIO_INIT
 113

	)

29 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

30 
	#ASN1_F_ASN1_CB
 177

	)

31 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

32 
	#ASN1_F_ASN1_COLLECT
 106

	)

33 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

34 
	#ASN1_F_ASN1_D2I_FP
 109

	)

35 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

36 
	#ASN1_F_ASN1_DIGEST
 184

	)

37 
	#ASN1_F_ASN1_DO_ADB
 110

	)

38 
	#ASN1_F_ASN1_DO_LOCK
 233

	)

39 
	#ASN1_F_ASN1_DUP
 111

	)

40 
	#ASN1_F_ASN1_ENC_SAVE
 115

	)

41 
	#ASN1_F_ASN1_EX_C2I
 204

	)

42 
	#ASN1_F_ASN1_FIND_END
 190

	)

43 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

44 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

45 
	#ASN1_F_ASN1_GET_INT64
 224

	)

46 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

47 
	#ASN1_F_ASN1_GET_UINT64
 225

	)

48 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

49 
	#ASN1_F_ASN1_I2D_FP
 117

	)

50 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

51 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

52 
	#ASN1_F_ASN1_ITEM_EMBED_D2I
 120

	)

53 
	#ASN1_F_ASN1_ITEM_EMBED_NEW
 121

	)

54 
	#ASN1_F_ASN1_ITEM_EX_I2D
 144

	)

55 
	#ASN1_F_ASN1_ITEM_FLAGS_I2D
 118

	)

56 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

57 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

58 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

59 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

60 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

61 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

62 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

63 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

64 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

65 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

66 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

67 
	#ASN1_F_ASN1_PRIMITIVE_NEW
 119

	)

68 
	#ASN1_F_ASN1_SCTX_NEW
 221

	)

69 
	#ASN1_F_ASN1_SIGN
 128

	)

70 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

71 
	#ASN1_F_ASN1_STRING_GET_INT64
 227

	)

72 
	#ASN1_F_ASN1_STRING_GET_UINT64
 230

	)

73 
	#ASN1_F_ASN1_STRING_SET
 186

	)

74 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

75 
	#ASN1_F_ASN1_STRING_TO_BN
 228

	)

76 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

77 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

78 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

79 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

80 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

81 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

82 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

83 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

84 
	#ASN1_F_ASN1_VERIFY
 137

	)

85 
	#ASN1_F_B64_READ_ASN1
 209

	)

86 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

87 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

88 
	#ASN1_F_BITSTR_CB
 180

	)

89 
	#ASN1_F_BN_TO_ASN1_STRING
 229

	)

90 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

91 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

92 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

93 
	#ASN1_F_C2I_IBUF
 226

	)

94 
	#ASN1_F_C2I_UINT64_INT
 101

	)

95 
	#ASN1_F_COLLECT_DATA
 140

	)

96 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

97 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

98 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

99 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

100 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

101 
	#ASN1_F_DO_BUF
 142

	)

102 
	#ASN1_F_DO_CREATE
 124

	)

103 
	#ASN1_F_DO_DUMP
 125

	)

104 
	#ASN1_F_DO_TCREATE
 222

	)

105 
	#ASN1_F_I2A_ASN1_OBJECT
 126

	)

106 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

107 
	#ASN1_F_I2D_ASN1_OBJECT
 143

	)

108 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

109 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

110 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

111 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

112 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

113 
	#ASN1_F_LONG_C2I
 166

	)

114 
	#ASN1_F_NDEF_PREFIX
 127

	)

115 
	#ASN1_F_NDEF_SUFFIX
 136

	)

116 
	#ASN1_F_OID_MODULE_INIT
 174

	)

117 
	#ASN1_F_PARSE_TAGGING
 182

	)

118 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

119 
	#ASN1_F_PKCS5_PBE2_SET_SCRYPT
 231

	)

120 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

121 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

122 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

123 
	#ASN1_F_PKCS5_SCRYPT_SET
 232

	)

124 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

125 
	#ASN1_F_SMIME_TEXT
 213

	)

126 
	#ASN1_F_STABLE_GET
 138

	)

127 
	#ASN1_F_STBL_MODULE_INIT
 223

	)

128 
	#ASN1_F_UINT32_C2I
 105

	)

129 
	#ASN1_F_UINT32_NEW
 139

	)

130 
	#ASN1_F_UINT64_C2I
 112

	)

131 
	#ASN1_F_UINT64_NEW
 141

	)

132 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

133 
	#ASN1_F_X509_INFO_NEW
 170

	)

134 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

135 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

136 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

137 
	#ASN1_F_X509_PKEY_NEW
 173

	)

142 
	#ASN1_R_ADDING_OBJECT
 171

	)

143 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

144 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

145 
	#ASN1_R_AUX_ERROR
 100

	)

146 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

147 
	#ASN1_R_BAD_TEMPLATE
 230

	)

148 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

149 
	#ASN1_R_BN_LIB
 105

	)

150 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

151 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

152 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

153 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

154 
	#ASN1_R_DATA_IS_WRONG
 109

	)

155 
	#ASN1_R_DECODE_ERROR
 110

	)

156 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

157 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

158 
	#ASN1_R_ENCODE_ERROR
 112

	)

159 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

160 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

161 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

162 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

163 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

164 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

165 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

166 
	#ASN1_R_FIELD_MISSING
 121

	)

167 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

168 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

169 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

170 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

171 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

172 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

173 
	#ASN1_R_ILLEGAL_HEX
 178

	)

174 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

175 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

176 
	#ASN1_R_ILLEGAL_NEGATIVE_VALUE
 226

	)

177 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

178 
	#ASN1_R_ILLEGAL_NULL
 125

	)

179 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

180 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

181 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

182 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

183 
	#ASN1_R_ILLEGAL_PADDING
 221

	)

184 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

185 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

186 
	#ASN1_R_ILLEGAL_ZERO_CONTENT
 222

	)

187 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

188 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

189 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

190 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

191 
	#ASN1_R_INVALID_DIGIT
 130

	)

192 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

193 
	#ASN1_R_INVALID_MODIFIER
 186

	)

194 
	#ASN1_R_INVALID_NUMBER
 187

	)

195 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

196 
	#ASN1_R_INVALID_SCRYPT_PARAMETERS
 227

	)

197 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

198 
	#ASN1_R_INVALID_STRING_TABLE_VALUE
 218

	)

199 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

200 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

201 
	#ASN1_R_INVALID_VALUE
 219

	)

202 
	#ASN1_R_LIST_ERROR
 188

	)

203 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

204 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

205 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

206 
	#ASN1_R_MISSING_EOC
 137

	)

207 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

208 
	#ASN1_R_MISSING_VALUE
 189

	)

209 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

210 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

211 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

212 
	#ASN1_R_NESTED_TOO_DEEP
 201

	)

213 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

214 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

215 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

216 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

217 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

218 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

219 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

220 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

221 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

222 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

223 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

224 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

225 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

226 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

227 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

228 
	#ASN1_R_SHORT_LINE
 150

	)

229 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

230 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

231 
	#ASN1_R_STRING_TOO_LONG
 151

	)

232 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

233 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

234 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

235 
	#ASN1_R_TOO_LARGE
 223

	)

236 
	#ASN1_R_TOO_LONG
 155

	)

237 
	#ASN1_R_TOO_SMALL
 224

	)

238 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

239 
	#ASN1_R_TYPE_NOT_PRIMITIVE
 195

	)

240 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

241 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

242 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

243 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

244 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

245 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

246 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

247 
	#ASN1_R_UNKNOWN_TAG
 194

	)

248 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

249 
	#ASN1_R_UNSUPPORTED_CIPHER
 228

	)

250 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

251 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

252 
	#ASN1_R_WRONG_INTEGER_TYPE
 225

	)

253 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

254 
	#ASN1_R_WRONG_TAG
 168

	)

	@/usr/include/openssl/bioerr.h

11 #i‚de‡
HEADER_BIOERR_H


12 
	#HEADER_BIOERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_BIO_°rögs
();

26 
	#BIO_F_ACPT_STATE
 100

	)

27 
	#BIO_F_ADDRINFO_WRAP
 148

	)

28 
	#BIO_F_ADDR_STRINGS
 134

	)

29 
	#BIO_F_BIO_ACCEPT
 101

	)

30 
	#BIO_F_BIO_ACCEPT_EX
 137

	)

31 
	#BIO_F_BIO_ACCEPT_NEW
 152

	)

32 
	#BIO_F_BIO_ADDR_NEW
 144

	)

33 
	#BIO_F_BIO_BIND
 147

	)

34 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

35 
	#BIO_F_BIO_CONNECT
 138

	)

36 
	#BIO_F_BIO_CONNECT_NEW
 153

	)

37 
	#BIO_F_BIO_CTRL
 103

	)

38 
	#BIO_F_BIO_GETS
 104

	)

39 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

40 
	#BIO_F_BIO_GET_NEW_INDEX
 102

	)

41 
	#BIO_F_BIO_GET_PORT
 107

	)

42 
	#BIO_F_BIO_LISTEN
 139

	)

43 
	#BIO_F_BIO_LOOKUP
 135

	)

44 
	#BIO_F_BIO_LOOKUP_EX
 143

	)

45 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

46 
	#BIO_F_BIO_METH_NEW
 146

	)

47 
	#BIO_F_BIO_NEW
 108

	)

48 
	#BIO_F_BIO_NEW_DGRAM_SCTP
 145

	)

49 
	#BIO_F_BIO_NEW_FILE
 109

	)

50 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

51 
	#BIO_F_BIO_NREAD
 123

	)

52 
	#BIO_F_BIO_NREAD0
 124

	)

53 
	#BIO_F_BIO_NWRITE
 125

	)

54 
	#BIO_F_BIO_NWRITE0
 122

	)

55 
	#BIO_F_BIO_PARSE_HOSTSERV
 136

	)

56 
	#BIO_F_BIO_PUTS
 110

	)

57 
	#BIO_F_BIO_READ
 111

	)

58 
	#BIO_F_BIO_READ_EX
 105

	)

59 
	#BIO_F_BIO_READ_INTERN
 120

	)

60 
	#BIO_F_BIO_SOCKET
 140

	)

61 
	#BIO_F_BIO_SOCKET_NBIO
 142

	)

62 
	#BIO_F_BIO_SOCK_INFO
 141

	)

63 
	#BIO_F_BIO_SOCK_INIT
 112

	)

64 
	#BIO_F_BIO_WRITE
 113

	)

65 
	#BIO_F_BIO_WRITE_EX
 119

	)

66 
	#BIO_F_BIO_WRITE_INTERN
 128

	)

67 
	#BIO_F_BUFFER_CTRL
 114

	)

68 
	#BIO_F_CONN_CTRL
 127

	)

69 
	#BIO_F_CONN_STATE
 115

	)

70 
	#BIO_F_DGRAM_SCTP_NEW
 149

	)

71 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

72 
	#BIO_F_DGRAM_SCTP_WRITE
 133

	)

73 
	#BIO_F_DOAPR_OUTCH
 150

	)

74 
	#BIO_F_FILE_CTRL
 116

	)

75 
	#BIO_F_FILE_READ
 130

	)

76 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

77 
	#BIO_F_LINEBUFFER_NEW
 151

	)

78 
	#BIO_F_MEM_WRITE
 117

	)

79 
	#BIO_F_NBIOF_NEW
 154

	)

80 
	#BIO_F_SLG_WRITE
 155

	)

81 
	#BIO_F_SSL_NEW
 118

	)

86 
	#BIO_R_ACCEPT_ERROR
 100

	)

87 
	#BIO_R_ADDRINFO_ADDR_IS_NOT_AF_INET
 141

	)

88 
	#BIO_R_AMBIGUOUS_HOST_OR_SERVICE
 129

	)

89 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

90 
	#BIO_R_BROKEN_PIPE
 124

	)

91 
	#BIO_R_CONNECT_ERROR
 103

	)

92 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

93 
	#BIO_R_GETSOCKNAME_ERROR
 132

	)

94 
	#BIO_R_GETSOCKNAME_TRUNCATED_ADDRESS
 133

	)

95 
	#BIO_R_GETTING_SOCKTYPE
 134

	)

96 
	#BIO_R_INVALID_ARGUMENT
 125

	)

97 
	#BIO_R_INVALID_SOCKET
 135

	)

98 
	#BIO_R_IN_USE
 123

	)

99 
	#BIO_R_LENGTH_TOO_LONG
 102

	)

100 
	#BIO_R_LISTEN_V6_ONLY
 136

	)

101 
	#BIO_R_LOOKUP_RETURNED_NOTHING
 142

	)

102 
	#BIO_R_MALFORMED_HOST_OR_SERVICE
 130

	)

103 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

104 
	#BIO_R_NO_ACCEPT_ADDR_OR_SERVICE_SPECIFIED
 143

	)

105 
	#BIO_R_NO_HOSTNAME_OR_SERVICE_SPECIFIED
 144

	)

106 
	#BIO_R_NO_PORT_DEFINED
 113

	)

107 
	#BIO_R_NO_SUCH_FILE
 128

	)

108 
	#BIO_R_NULL_PARAMETER
 115

	)

109 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

110 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

111 
	#BIO_R_UNABLE_TO_KEEPALIVE
 137

	)

112 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

113 
	#BIO_R_UNABLE_TO_NODELAY
 138

	)

114 
	#BIO_R_UNABLE_TO_REUSEADDR
 139

	)

115 
	#BIO_R_UNAVAILABLE_IP_FAMILY
 145

	)

116 
	#BIO_R_UNINITIALIZED
 120

	)

117 
	#BIO_R_UNKNOWN_INFO_TYPE
 140

	)

118 
	#BIO_R_UNSUPPORTED_IP_FAMILY
 146

	)

119 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

120 
	#BIO_R_UNSUPPORTED_PROTOCOL_FAMILY
 131

	)

121 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

122 
	#BIO_R_WSASTARTUP
 122

	)

	@/usr/include/openssl/bnerr.h

11 #i‚de‡
HEADER_BNERR_H


12 
	#HEADER_BNERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_BN_°rögs
();

26 
	#BN_F_BNRAND
 127

	)

27 
	#BN_F_BNRAND_RANGE
 138

	)

28 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

29 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

30 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

31 
	#BN_F_BN_BLINDING_NEW
 102

	)

32 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

33 
	#BN_F_BN_BN2DEC
 104

	)

34 
	#BN_F_BN_BN2HEX
 105

	)

35 
	#BN_F_BN_COMPUTE_WNAF
 142

	)

36 
	#BN_F_BN_CTX_GET
 116

	)

37 
	#BN_F_BN_CTX_NEW
 106

	)

38 
	#BN_F_BN_CTX_START
 129

	)

39 
	#BN_F_BN_DIV
 107

	)

40 
	#BN_F_BN_DIV_RECP
 130

	)

41 
	#BN_F_BN_EXP
 123

	)

42 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

43 
	#BN_F_BN_GENCB_NEW
 143

	)

44 
	#BN_F_BN_GENERATE_DSA_NONCE
 140

	)

45 
	#BN_F_BN_GENERATE_PRIME_EX
 141

	)

46 
	#BN_F_BN_GF2M_MOD
 131

	)

47 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

48 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

49 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

50 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

51 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

52 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

53 
	#BN_F_BN_LSHIFT
 145

	)

54 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

55 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

56 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

57 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

58 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

59 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

60 
	#BN_F_BN_MOD_INVERSE
 110

	)

61 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

62 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

63 
	#BN_F_BN_MOD_SQRT
 121

	)

64 
	#BN_F_BN_MONT_CTX_NEW
 149

	)

65 
	#BN_F_BN_MPI2BN
 112

	)

66 
	#BN_F_BN_NEW
 113

	)

67 
	#BN_F_BN_POOL_GET
 147

	)

68 
	#BN_F_BN_RAND
 114

	)

69 
	#BN_F_BN_RAND_RANGE
 122

	)

70 
	#BN_F_BN_RECP_CTX_NEW
 150

	)

71 
	#BN_F_BN_RSHIFT
 146

	)

72 
	#BN_F_BN_SET_WORDS
 144

	)

73 
	#BN_F_BN_STACK_PUSH
 148

	)

74 
	#BN_F_BN_USUB
 115

	)

75 
	#BN_F_OSSL_BN_RSA_DO_UNBLIND
 151

	)

80 
	#BN_R_ARG2_LT_ARG3
 100

	)

81 
	#BN_R_BAD_RECIPROCAL
 101

	)

82 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

83 
	#BN_R_BITS_TOO_SMALL
 118

	)

84 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

85 
	#BN_R_DIV_BY_ZERO
 103

	)

86 
	#BN_R_ENCODING_ERROR
 104

	)

87 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

88 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

89 
	#BN_R_INVALID_LENGTH
 106

	)

90 
	#BN_R_INVALID_RANGE
 115

	)

91 
	#BN_R_INVALID_SHIFT
 119

	)

92 
	#BN_R_NOT_A_SQUARE
 111

	)

93 
	#BN_R_NOT_INITIALIZED
 107

	)

94 
	#BN_R_NO_INVERSE
 108

	)

95 
	#BN_R_NO_SOLUTION
 116

	)

96 
	#BN_R_PRIVATE_KEY_TOO_LARGE
 117

	)

97 
	#BN_R_P_IS_NOT_PRIME
 112

	)

98 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

99 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

	@/usr/include/openssl/buffer.h

10 #i‚de‡
HEADER_BUFFER_H


11 
	#HEADER_BUFFER_H


	)

13 
	~<›ís¶/os¶_typ.h
>

14 #i‚de‡
HEADER_CRYPTO_H


15 
	~<›ís¶/¸y±o.h
>

17 
	~<›ís¶/buf„ªº.h
>

20 #ifde‡ 
__˝lu•lus


24 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

31 
	#BUF_°rdup
(
s
Ë
	`OPENSSL_°rdup
(s)

	)

32 
	#BUF_°∫dup
(
s
, 
size
Ë
	`OPENSSL_°∫dup
(s, size)

	)

33 
	#BUF_memdup
(
d©a
, 
size
Ë
	`OPENSSL_memdup
(d©a, size)

	)

34 
	#BUF_°æ˝y
(
d°
, 
§c
, 
size
Ë
	`OPENSSL_°æ˝y
(d°, src, size)

	)

35 
	#BUF_°æˇt
(
d°
, 
§c
, 
size
Ë
	`OPENSSL_°æˇt
(d°, src, size)

	)

36 
	#BUF_°∫Àn
(
°r
, 
maxÀn
Ë
	`OPENSSL_°∫Àn
(°r, maxÀn)

	)

38 
	sbuf_mem_°
 {

39 
size_t
 
Àngth
;

40 *
d©a
;

41 
size_t
 
max
;

42 
Êags
;

45 
	#BUF_MEM_FLAG_SECURE
 0x01

	)

47 
BUF_MEM
 *
BUF_MEM_√w
();

48 
BUF_MEM
 *
BUF_MEM_√w_ex
(
Êags
);

49 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

50 
size_t
 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, size_à
Àn
);

51 
size_t
 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, size_à
Àn
);

52 
BUF_ªvî£
(*
out
, c⁄° *
ö
, 
size_t
 
siz
);

55 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/cryptoerr.h

11 #i‚de‡
HEADER_CRYPTOERR_H


12 
	#HEADER_CRYPTOERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_CRYPTO_°rögs
();

26 
	#CRYPTO_F_CMAC_CTX_NEW
 120

	)

27 
	#CRYPTO_F_CRYPTO_DUP_EX_DATA
 110

	)

28 
	#CRYPTO_F_CRYPTO_FREE_EX_DATA
 111

	)

29 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

30 
	#CRYPTO_F_CRYPTO_MEMDUP
 115

	)

31 
	#CRYPTO_F_CRYPTO_NEW_EX_DATA
 112

	)

32 
	#CRYPTO_F_CRYPTO_OCB128_COPY_CTX
 121

	)

33 
	#CRYPTO_F_CRYPTO_OCB128_INIT
 122

	)

34 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

35 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

36 
	#CRYPTO_F_GET_AND_LOCK
 113

	)

37 
	#CRYPTO_F_OPENSSL_ATEXIT
 114

	)

38 
	#CRYPTO_F_OPENSSL_BUF2HEXSTR
 117

	)

39 
	#CRYPTO_F_OPENSSL_FOPEN
 119

	)

40 
	#CRYPTO_F_OPENSSL_HEXSTR2BUF
 118

	)

41 
	#CRYPTO_F_OPENSSL_INIT_CRYPTO
 116

	)

42 
	#CRYPTO_F_OPENSSL_LH_NEW
 126

	)

43 
	#CRYPTO_F_OPENSSL_SK_DEEP_COPY
 127

	)

44 
	#CRYPTO_F_OPENSSL_SK_DUP
 128

	)

45 
	#CRYPTO_F_PKEY_HMAC_INIT
 123

	)

46 
	#CRYPTO_F_PKEY_POLY1305_INIT
 124

	)

47 
	#CRYPTO_F_PKEY_SIPHASH_INIT
 125

	)

48 
	#CRYPTO_F_SK_RESERVE
 129

	)

53 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

54 
	#CRYPTO_R_ILLEGAL_HEX_DIGIT
 102

	)

55 
	#CRYPTO_R_ODD_NUMBER_OF_DIGITS
 103

	)

	@/usr/include/openssl/dh.h

10 #i‚de‡
HEADER_DH_H


11 
	#HEADER_DH_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_DH


16 
	~<›ís¶/e_os2.h
>

17 
	~<›ís¶/bio.h
>

18 
	~<›ís¶/a¢1.h
>

19 
	~<›ís¶/os¶_typ.h
>

20 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

21 
	~<›ís¶/bn.h
>

23 
	~<›ís¶/dhîr.h
>

25 #ifde‡ 
__˝lu•lus


29 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


30 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

33 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS
 1024

	)

34 
	#OPENSSL_DH_FIPS_MIN_MODULUS_BITS_GEN
 2048

	)

36 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

38 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

42 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x00

	)

52 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

60 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

66 
DECLARE_ASN1_ITEM
(
DH∑øms
)

68 
	#DH_GENERATOR_2
 2

	)

70 
	#DH_GENERATOR_5
 5

	)

73 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

74 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

75 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

76 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

77 
	#DH_CHECK_Q_NOT_PRIME
 0x10

	)

78 
	#DH_CHECK_INVALID_Q_VALUE
 0x20

	)

79 
	#DH_CHECK_INVALID_J_VALUE
 0x40

	)

82 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

83 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

84 
	#DH_CHECK_PUBKEY_INVALID
 0x04

	)

90 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

92 
	#d2i_DH∑øms_Â
(
Â
,
x
) \

93 (
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

94 (*(*)())
d2i_DH∑øms
, \

95 (
Â
), \

96 (**)(
x
))

	)

97 
	#i2d_DH∑øms_Â
(
Â
,
x
) \

98 
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(
Â
), (*)(
x
))

	)

99 
	#d2i_DH∑øms_bio
(
bp
,
x
) \

100 
	`ASN1_d2i_bio_of
(
DH
, 
DH_√w
, 
d2i_DH∑øms
, 
bp
, 
x
)

	)

101 
	#i2d_DH∑øms_bio
(
bp
,
x
) \

102 
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,
bp
,
x
)

	)

104 
	#d2i_DHx∑øms_Â
(
Â
,
x
) \

105 (
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

106 (*(*)())
d2i_DHx∑øms
, \

107 (
Â
), \

108 (**)(
x
))

	)

109 
	#i2d_DHx∑øms_Â
(
Â
,
x
) \

110 
	`ASN1_i2d_Â
(
i2d_DHx∑øms
,(
Â
), (*)(
x
))

	)

111 
	#d2i_DHx∑øms_bio
(
bp
,
x
) \

112 
	`ASN1_d2i_bio_of
(
DH
, 
DH_√w
, 
d2i_DHx∑øms
, 
bp
, 
x
)

	)

113 
	#i2d_DHx∑øms_bio
(
bp
,
x
) \

114 
	`ASN1_i2d_bio_of_c⁄°
(
DH
, 
i2d_DHx∑øms
, 
bp
, 
x
)

	)

116 
DH
 *
DH∑øms_dup
(DH *);

118 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

120 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

121 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

122 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

123 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

125 
DH
 *
DH_√w
();

126 
DH_‰ì
(
DH
 *
dh
);

127 
DH_up_ªf
(
DH
 *
dh
);

128 
DH_bôs
(c⁄° 
DH
 *
dh
);

129 
DH_size
(c⁄° 
DH
 *
dh
);

130 
DH_£curôy_bôs
(c⁄° 
DH
 *
dh
);

131 
	#DH_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

132 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_DH
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

133 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

134 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

137 
DEPRECATEDIN_0_9_8
(
DH
 *
DH_gíî©e_∑ømëîs
(
¥ime_Àn
, 
gíî©‹
,

138 (*
ˇŒback
) (, ,

140 *
cb_¨g
))

143 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
,

144 
BN_GENCB
 *
cb
);

146 
DH_check_∑øms_ex
(c⁄° 
DH
 *
dh
);

147 
DH_check_ex
(c⁄° 
DH
 *
dh
);

148 
DH_check_pub_key_ex
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
);

149 
DH_check_∑øms
(c⁄° 
DH
 *
dh
, *
ªt
);

150 
DH_check
(c⁄° 
DH
 *
dh
, *
codes
);

151 
DH_check_pub_key
(c⁄° 
DH
 *
dh
, c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

152 
DH_gíî©e_key
(
DH
 *
dh
);

153 
DH_compuã_key
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

154 
DH_compuã_key_∑dded
(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

155 
DH
 *
d2i_DH∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

156 
i2d_DH∑øms
(c⁄° 
DH
 *
a
, **
µ
);

157 
DH
 *
d2i_DHx∑øms
(DH **
a
, c⁄° **
µ
, 
Àngth
);

158 
i2d_DHx∑øms
(c⁄° 
DH
 *
a
, **
µ
);

159 #i‚de‡
OPENSSL_NO_STDIO


160 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

162 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

165 
DH
 *
DH_gë_1024_160
();

166 
DH
 *
DH_gë_2048_224
();

167 
DH
 *
DH_gë_2048_256
();

170 
DH
 *
DH_√w_by_nid
(
nid
);

171 
DH_gë_nid
(c⁄° 
DH
 *
dh
);

173 #i‚de‡
OPENSSL_NO_CMS


175 
DH_KDF_X9_42
(*
out
, 
size_t
 
ouéí
,

176 c⁄° *
Z
, 
size_t
 
ZÀn
,

177 
ASN1_OBJECT
 *
key_oid
,

178 c⁄° *
ukm
, 
size_t
 
ukmÀn
, c⁄° 
EVP_MD
 *
md
);

181 
DH_gë0_pqg
(c⁄° 
DH
 *
dh
,

182 c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
, c⁄° BIGNUM **
g
);

183 
DH_£t0_pqg
(
DH
 *
dh
, 
BIGNUM
 *
p
, BIGNUM *
q
, BIGNUM *
g
);

184 
DH_gë0_key
(c⁄° 
DH
 *
dh
,

185 c⁄° 
BIGNUM
 **
pub_key
, c⁄° BIGNUM **
¥iv_key
);

186 
DH_£t0_key
(
DH
 *
dh
, 
BIGNUM
 *
pub_key
, BIGNUM *
¥iv_key
);

187 c⁄° 
BIGNUM
 *
DH_gë0_p
(c⁄° 
DH
 *
dh
);

188 c⁄° 
BIGNUM
 *
DH_gë0_q
(c⁄° 
DH
 *
dh
);

189 c⁄° 
BIGNUM
 *
DH_gë0_g
(c⁄° 
DH
 *
dh
);

190 c⁄° 
BIGNUM
 *
DH_gë0_¥iv_key
(c⁄° 
DH
 *
dh
);

191 c⁄° 
BIGNUM
 *
DH_gë0_pub_key
(c⁄° 
DH
 *
dh
);

192 
DH_˛ór_Êags
(
DH
 *
dh
, 
Êags
);

193 
DH_ã°_Êags
(c⁄° 
DH
 *
dh
, 
Êags
);

194 
DH_£t_Êags
(
DH
 *
dh
, 
Êags
);

195 
ENGINE
 *
DH_gë0_ígöe
(
DH
 *
d
);

196 
DH_gë_Àngth
(c⁄° 
DH
 *
dh
);

197 
DH_£t_Àngth
(
DH
 *
dh
, 
Àngth
);

199 
DH_METHOD
 *
DH_mëh_√w
(c⁄° *
«me
, 
Êags
);

200 
DH_mëh_‰ì
(
DH_METHOD
 *
dhm
);

201 
DH_METHOD
 *
DH_mëh_dup
(c⁄° DH_METHOD *
dhm
);

202 c⁄° *
DH_mëh_gë0_«me
(c⁄° 
DH_METHOD
 *
dhm
);

203 
DH_mëh_£t1_«me
(
DH_METHOD
 *
dhm
, c⁄° *
«me
);

204 
DH_mëh_gë_Êags
(c⁄° 
DH_METHOD
 *
dhm
);

205 
DH_mëh_£t_Êags
(
DH_METHOD
 *
dhm
, 
Êags
);

206 *
DH_mëh_gë0_≠p_d©a
(c⁄° 
DH_METHOD
 *
dhm
);

207 
DH_mëh_£t0_≠p_d©a
(
DH_METHOD
 *
dhm
, *
≠p_d©a
);

208 (*
DH_mëh_gë_gíî©e_key
(c⁄° 
DH_METHOD
 *
dhm
)Ë(
DH
 *);

209 
DH_mëh_£t_gíî©e_key
(
DH_METHOD
 *
dhm
, (*
gíî©e_key
Ë(
DH
 *));

210 (*
DH_mëh_gë_compuã_key
(c⁄° 
DH_METHOD
 *
dhm
))

211 (*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
);

212 
DH_mëh_£t_compuã_key
(
DH_METHOD
 *
dhm
,

213 (*
compuã_key
Ë(*
key
, c⁄° 
BIGNUM
 *
pub_key
, 
DH
 *
dh
));

214 (*
DH_mëh_gë_bn_mod_exp
(c⁄° 
DH_METHOD
 *
dhm
))

215 (c⁄° 
DH
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

216 
BN_CTX
 *, 
BN_MONT_CTX
 *);

217 
DH_mëh_£t_bn_mod_exp
(
DH_METHOD
 *
dhm
,

218 (*
bn_mod_exp
Ë(c⁄° 
DH
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

219 c⁄° 
BIGNUM
 *, 
BN_CTX
 *, 
BN_MONT_CTX
 *));

220 (*
DH_mëh_gë_öô
(c⁄° 
DH_METHOD
 *
dhm
))(
DH
 *);

221 
DH_mëh_£t_öô
(
DH_METHOD
 *
dhm
, (*
öô
)(
DH
 *));

222 (*
DH_mëh_gë_föish
(c⁄° 
DH_METHOD
 *
dhm
)Ë(
DH
 *);

223 
DH_mëh_£t_föish
(
DH_METHOD
 *
dhm
, (*
föish
Ë(
DH
 *));

224 (*
DH_mëh_gë_gíî©e_∑øms
(c⁄° 
DH_METHOD
 *
dhm
))

225 (
DH
 *, , , 
BN_GENCB
 *);

226 
DH_mëh_£t_gíî©e_∑øms
(
DH_METHOD
 *
dhm
,

227 (*
gíî©e_∑øms
Ë(
DH
 *, , , 
BN_GENCB
 *));

230 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

231 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

232 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

234 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_sub¥ime_Àn
(
˘x
, 
Àn
) \

235 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

236 
EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
, 
Àn
, 
NULL
)

	)

238 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_ty≥
(
˘x
, 
typ
) \

239 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

240 
EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
, 
typ
, 
NULL
)

	)

242 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

243 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

244 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

246 
	#EVP_PKEY_CTX_£t_dh_rfc5114
(
˘x
, 
gí
) \

247 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

248 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

250 
	#EVP_PKEY_CTX_£t_dhx_rfc5114
(
˘x
, 
gí
) \

251 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, 
EVP_PKEY_OP_PARAMGEN
, \

252 
EVP_PKEY_CTRL_DH_RFC5114
, 
gí
, 
NULL
)

	)

254 
	#EVP_PKEY_CTX_£t_dh_nid
(
˘x
, 
nid
) \

255 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, \

256 
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
, \

257 
EVP_PKEY_CTRL_DH_NID
, 
nid
, 
NULL
)

	)

259 
	#EVP_PKEY_CTX_£t_dh_∑d
(
˘x
, 
∑d
) \

260 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_DERIVE
, \

261 
EVP_PKEY_CTRL_DH_PAD
, 
∑d
, 
NULL
)

	)

263 
	#EVP_PKEY_CTX_£t_dh_kdf_ty≥
(
˘x
, 
kdf
) \

264 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

265 
EVP_PKEY_OP_DERIVE
, \

266 
EVP_PKEY_CTRL_DH_KDF_TYPE
, 
kdf
, 
NULL
)

	)

268 
	#EVP_PKEY_CTX_gë_dh_kdf_ty≥
(
˘x
) \

269 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

270 
EVP_PKEY_OP_DERIVE
, \

271 
EVP_PKEY_CTRL_DH_KDF_TYPE
, -2, 
NULL
)

	)

273 
	#EVP_PKEY_CTX_£t0_dh_kdf_oid
(
˘x
, 
oid
) \

274 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

275 
EVP_PKEY_OP_DERIVE
, \

276 
EVP_PKEY_CTRL_DH_KDF_OID
, 0, (*)(
oid
))

	)

278 
	#EVP_PKEY_CTX_gë0_dh_kdf_oid
(
˘x
, 
poid
) \

279 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

280 
EVP_PKEY_OP_DERIVE
, \

281 
EVP_PKEY_CTRL_GET_DH_KDF_OID
, 0, (*)(
poid
))

	)

283 
	#EVP_PKEY_CTX_£t_dh_kdf_md
(
˘x
, 
md
) \

284 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

285 
EVP_PKEY_OP_DERIVE
, \

286 
EVP_PKEY_CTRL_DH_KDF_MD
, 0, (*)(
md
))

	)

288 
	#EVP_PKEY_CTX_gë_dh_kdf_md
(
˘x
, 
pmd
) \

289 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

290 
EVP_PKEY_OP_DERIVE
, \

291 
EVP_PKEY_CTRL_GET_DH_KDF_MD
, 0, (*)(
pmd
))

	)

293 
	#EVP_PKEY_CTX_£t_dh_kdf_ouéí
(
˘x
, 
Àn
) \

294 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

295 
EVP_PKEY_OP_DERIVE
, \

296 
EVP_PKEY_CTRL_DH_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

298 
	#EVP_PKEY_CTX_gë_dh_kdf_ouéí
(
˘x
, 
∂í
) \

299 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

300 
EVP_PKEY_OP_DERIVE
, \

301 
EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
, 0, (*)(
∂í
))

	)

303 
	#EVP_PKEY_CTX_£t0_dh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

304 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

305 
EVP_PKEY_OP_DERIVE
, \

306 
EVP_PKEY_CTRL_DH_KDF_UKM
, 
∂í
, (*)(
p
))

	)

308 
	#EVP_PKEY_CTX_gë0_dh_kdf_ukm
(
˘x
, 
p
) \

309 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DHX
, \

310 
EVP_PKEY_OP_DERIVE
, \

311 
EVP_PKEY_CTRL_GET_DH_KDF_UKM
, 0, (*)(
p
))

	)

313 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

314 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

315 
	#EVP_PKEY_CTRL_DH_RFC5114
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

316 
	#EVP_PKEY_CTRL_DH_PARAMGEN_SUBPRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

317 
	#EVP_PKEY_CTRL_DH_PARAMGEN_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

318 
	#EVP_PKEY_CTRL_DH_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

319 
	#EVP_PKEY_CTRL_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

320 
	#EVP_PKEY_CTRL_GET_DH_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

321 
	#EVP_PKEY_CTRL_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

322 
	#EVP_PKEY_CTRL_GET_DH_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

323 
	#EVP_PKEY_CTRL_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

324 
	#EVP_PKEY_CTRL_GET_DH_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

325 
	#EVP_PKEY_CTRL_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

326 
	#EVP_PKEY_CTRL_GET_DH_KDF_OID
 (
EVP_PKEY_ALG_CTRL
 + 14)

	)

327 
	#EVP_PKEY_CTRL_DH_NID
 (
EVP_PKEY_ALG_CTRL
 + 15)

	)

328 
	#EVP_PKEY_CTRL_DH_PAD
 (
EVP_PKEY_ALG_CTRL
 + 16)

	)

331 
	#EVP_PKEY_DH_KDF_NONE
 1

	)

332 #i‚de‡
OPENSSL_NO_CMS


333 
	#EVP_PKEY_DH_KDF_X9_42
 2

	)

337 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

10 #i‚de‡
HEADER_DSA_H


11 
	#HEADER_DSA_H


	)

13 
	~<›ís¶/›ís¶c⁄f.h
>

15 #i‚de‡
OPENSSL_NO_DSA


16 #ifde‡ 
__˝lu•lus


19 
	~<›ís¶/e_os2.h
>

20 
	~<›ís¶/bio.h
>

21 
	~<›ís¶/¸y±o.h
>

22 
	~<›ís¶/os¶_typ.h
>

23 
	~<›ís¶/bn.h
>

24 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

25 
	~<›ís¶/dh.h
>

27 
	~<›ís¶/dßîr.h
>

29 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


30 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

33 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS
 1024

	)

34 
	#OPENSSL_DSA_FIPS_MIN_MODULUS_BITS_GEN
 2048

	)

36 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

37 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

41 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x00

	)

51 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

59 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

60 
	#DSA_FLAG_FIPS_CHECKED
 0x0800

	)

66 
DSA_SIG_°
 
	tDSA_SIG
;

68 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

69 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

70 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

71 (*)(
x
))

	)

72 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

73 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

75 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

76 
DSA_SIG
 *
DSA_SIG_√w
();

77 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

78 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

79 
DSA_SIG
 *
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

80 
DSA_SIG_gë0
(c⁄° 
DSA_SIG
 *
sig
, c⁄° 
BIGNUM
 **
¥
, c⁄° BIGNUM **
ps
);

81 
DSA_SIG_£t0
(
DSA_SIG
 *
sig
, 
BIGNUM
 *
r
, BIGNUM *
s
);

83 
DSA_SIG
 *
DSA_do_sign
(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

84 
DSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

85 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

87 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

89 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

90 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

91 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

92 c⁄° 
DSA_METHOD
 *
DSA_gë_mëhod
(
DSA
 *
d
);

94 
DSA
 *
DSA_√w
();

95 
DSA
 *
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

96 
DSA_‰ì
(
DSA
 *
r
);

98 
DSA_up_ªf
(
DSA
 *
r
);

99 
DSA_size
(c⁄° 
DSA
 *);

100 
DSA_bôs
(c⁄° 
DSA
 *
d
);

101 
DSA_£curôy_bôs
(c⁄° 
DSA
 *
d
);

103 
DEPRECATEDIN_1_2_0
(
DSA_sign_£tup
(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
, BIGNUM **
Ω
))

104 
DSA_sign
(
ty≥
, c⁄° *
dg°
, 
dÀn
,

105 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

106 
DSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°_Àn
,

107 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

108 
	#DSA_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

109 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_DSA
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

110 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

111 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

113 
DSA
 *
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

114 
DSA
 *
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

115 
DSA
 *
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

118 
DEPRECATEDIN_0_9_8
(
DSA
 *
DSA_gíî©e_∑ømëîs
(
bôs
,

119 *
£ed
,

120 
£ed_Àn
,

121 *
cou¡î_ªt
,

122 *
h_ªt
, 

123 (*
ˇŒback
) (, ,

125 *
cb_¨g
))

128 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

129 c⁄° *
£ed
, 
£ed_Àn
,

130 *
cou¡î_ªt
, *
h_ªt
,

131 
BN_GENCB
 *
cb
);

133 
DSA_gíî©e_key
(
DSA
 *
a
);

134 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

135 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

136 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
, **
µ
);

138 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

139 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

140 #i‚de‡
OPENSSL_NO_STDIO


141 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

142 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

145 
	#DSS_¥ime_checks
 64

	)

152 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

153 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

155 #i‚de‡
OPENSSL_NO_DH


160 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

163 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

164 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

165 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

166 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_q_bôs
(
˘x
, 
qbôs
) \

167 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

168 
EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
, 
qbôs
, 
NULL
)

	)

169 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_md
(
˘x
, 
md
) \

170 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

171 
EVP_PKEY_CTRL_DSA_PARAMGEN_MD
, 0, (*)(
md
))

	)

173 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

174 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

175 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

177 
DSA_gë0_pqg
(c⁄° 
DSA
 *
d
,

178 c⁄° 
BIGNUM
 **
p
, c⁄° BIGNUM **
q
, c⁄° BIGNUM **
g
);

179 
DSA_£t0_pqg
(
DSA
 *
d
, 
BIGNUM
 *
p
, BIGNUM *
q
, BIGNUM *
g
);

180 
DSA_gë0_key
(c⁄° 
DSA
 *
d
,

181 c⁄° 
BIGNUM
 **
pub_key
, c⁄° BIGNUM **
¥iv_key
);

182 
DSA_£t0_key
(
DSA
 *
d
, 
BIGNUM
 *
pub_key
, BIGNUM *
¥iv_key
);

183 c⁄° 
BIGNUM
 *
DSA_gë0_p
(c⁄° 
DSA
 *
d
);

184 c⁄° 
BIGNUM
 *
DSA_gë0_q
(c⁄° 
DSA
 *
d
);

185 c⁄° 
BIGNUM
 *
DSA_gë0_g
(c⁄° 
DSA
 *
d
);

186 c⁄° 
BIGNUM
 *
DSA_gë0_pub_key
(c⁄° 
DSA
 *
d
);

187 c⁄° 
BIGNUM
 *
DSA_gë0_¥iv_key
(c⁄° 
DSA
 *
d
);

188 
DSA_˛ór_Êags
(
DSA
 *
d
, 
Êags
);

189 
DSA_ã°_Êags
(c⁄° 
DSA
 *
d
, 
Êags
);

190 
DSA_£t_Êags
(
DSA
 *
d
, 
Êags
);

191 
ENGINE
 *
DSA_gë0_ígöe
(
DSA
 *
d
);

193 
DSA_METHOD
 *
DSA_mëh_√w
(c⁄° *
«me
, 
Êags
);

194 
DSA_mëh_‰ì
(
DSA_METHOD
 *
dßm
);

195 
DSA_METHOD
 *
DSA_mëh_dup
(c⁄° DSA_METHOD *
dßm
);

196 c⁄° *
DSA_mëh_gë0_«me
(c⁄° 
DSA_METHOD
 *
dßm
);

197 
DSA_mëh_£t1_«me
(
DSA_METHOD
 *
dßm
, c⁄° *
«me
);

198 
DSA_mëh_gë_Êags
(c⁄° 
DSA_METHOD
 *
dßm
);

199 
DSA_mëh_£t_Êags
(
DSA_METHOD
 *
dßm
, 
Êags
);

200 *
DSA_mëh_gë0_≠p_d©a
(c⁄° 
DSA_METHOD
 *
dßm
);

201 
DSA_mëh_£t0_≠p_d©a
(
DSA_METHOD
 *
dßm
, *
≠p_d©a
);

202 
DSA_SIG
 *(*
DSA_mëh_gë_sign
(c⁄° 
DSA_METHOD
 *
dßm
))

203 (c⁄° *, , 
DSA
 *);

204 
DSA_mëh_£t_sign
(
DSA_METHOD
 *
dßm
,

205 
DSA_SIG
 *(*
sign
Ë(c⁄° *, , 
DSA
 *));

206 (*
DSA_mëh_gë_sign_£tup
(c⁄° 
DSA_METHOD
 *
dßm
))

207 (
DSA
 *, 
BN_CTX
 *, 
BIGNUM
 **, BIGNUM **);

208 
DSA_mëh_£t_sign_£tup
(
DSA_METHOD
 *
dßm
,

209 (*
sign_£tup
Ë(
DSA
 *, 
BN_CTX
 *, 
BIGNUM
 **, BIGNUM **));

210 (*
DSA_mëh_gë_vîify
(c⁄° 
DSA_METHOD
 *
dßm
))

211 (c⁄° *, , 
DSA_SIG
 *, 
DSA
 *);

212 
DSA_mëh_£t_vîify
(
DSA_METHOD
 *
dßm
,

213 (*
vîify
Ë(c⁄° *, , 
DSA_SIG
 *, 
DSA
 *));

214 (*
DSA_mëh_gë_mod_exp
(c⁄° 
DSA_METHOD
 *
dßm
))

215 (
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

216 c⁄° 
BIGNUM
 *, c⁄° BIGNUM *, 
BN_CTX
 *, 
BN_MONT_CTX
 *);

217 
DSA_mëh_£t_mod_exp
(
DSA_METHOD
 *
dßm
,

218 (*
mod_exp
Ë(
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

219 c⁄° 
BIGNUM
 *, c⁄° BIGNUM *, c⁄° BIGNUM *, 
BN_CTX
 *,

220 
BN_MONT_CTX
 *));

221 (*
DSA_mëh_gë_bn_mod_exp
(c⁄° 
DSA_METHOD
 *
dßm
))

222 (
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *, const BIGNUM *,

223 
BN_CTX
 *, 
BN_MONT_CTX
 *);

224 
DSA_mëh_£t_bn_mod_exp
(
DSA_METHOD
 *
dßm
,

225 (*
bn_mod_exp
Ë(
DSA
 *, 
BIGNUM
 *, const BIGNUM *, const BIGNUM *,

226 c⁄° 
BIGNUM
 *, 
BN_CTX
 *, 
BN_MONT_CTX
 *));

227 (*
DSA_mëh_gë_öô
(c⁄° 
DSA_METHOD
 *
dßm
))(
DSA
 *);

228 
DSA_mëh_£t_öô
(
DSA_METHOD
 *
dßm
, (*
öô
)(
DSA
 *));

229 (*
DSA_mëh_gë_föish
(c⁄° 
DSA_METHOD
 *
dßm
)Ë(
DSA
 *);

230 
DSA_mëh_£t_föish
(
DSA_METHOD
 *
dßm
, (*
föish
Ë(
DSA
 *));

231 (*
DSA_mëh_gë_∑ømgí
(c⁄° 
DSA_METHOD
 *
dßm
))

232 (
DSA
 *, , const *, , *, *,

233 
BN_GENCB
 *);

234 
DSA_mëh_£t_∑ømgí
(
DSA_METHOD
 *
dßm
,

235 (*
∑ømgí
Ë(
DSA
 *, , const *, , *,

236 *, 
BN_GENCB
 *));

237 (*
DSA_mëh_gë_keygí
(c⁄° 
DSA_METHOD
 *
dßm
)Ë(
DSA
 *);

238 
DSA_mëh_£t_keygí
(
DSA_METHOD
 *
dßm
, (*
keygí
Ë(
DSA
 *));

241 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

10 #i‚de‡
HEADER_EBCDIC_H


11 
	#HEADER_EBCDIC_H


	)

13 
	~<°dlib.h
>

15 #ifde‡ 
__˝lu•lus


20 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

21 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

22 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

23 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

25 c⁄° 
os_tﬂscii
[256];

26 c⁄° 
os_t€bcdic
[256];

27 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

28 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

30 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ec.h

11 #i‚de‡
HEADER_EC_H


12 
	#HEADER_EC_H


	)

14 
	~<›ís¶/›ís¶c⁄f.h
>

16 #i‚de‡
OPENSSL_NO_EC


17 
	~<›ís¶/a¢1.h
>

18 
	~<›ís¶/symhacks.h
>

19 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

20 
	~<›ís¶/bn.h
>

22 
	~<›ís¶/e˚º.h
>

23 #ifde‡ 
__˝lu•lus


27 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


28 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

36 
POINT_CONVERSION_COMPRESSED
 = 2,

38 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

41 
POINT_CONVERSION_HYBRID
 = 6

42 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

44 
ec_mëhod_°
 
	tEC_METHOD
;

45 
ec_group_°
 
	tEC_GROUP
;

46 
ec_poöt_°
 
	tEC_POINT
;

47 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

48 
ec_∑ømëîs_°
 
	tECPARAMETERS
;

58 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

63 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

68 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

70 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


74 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

79 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

84 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

87 #i‚de‡
OPENSSL_NO_EC2M


95 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

107 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

112 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

117 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

124 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

131 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

137 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

143 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

153 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
,

154 c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

160 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

166 
BN_MONT_CTX
 *
EC_GROUP_gë_m⁄t_d©a
(c⁄° 
EC_GROUP
 *
group
);

174 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

180 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_‹dî
(c⁄° 
EC_GROUP
 *
group
);

186 
EC_GROUP_‹dî_bôs
(c⁄° 
EC_GROUP
 *
group
);

194 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
,

195 
BN_CTX
 *
˘x
);

201 c⁄° 
BIGNUM
 *
EC_GROUP_gë0_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
);

207 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

213 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

215 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

216 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

218 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *
group
,

219 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
);

220 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

222 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *
x
);

223 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

224 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

236 
EC_GROUP_£t_curve
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

237 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

249 
EC_GROUP_gë_curve
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
,

250 
BN_CTX
 *
˘x
);

261 
DEPRECATEDIN_1_2_0
(
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
,

262 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
,

263 
BN_CTX
 *
˘x
))

274 
DEPRECATEDIN_1_2_0
(
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
,

275 
BIGNUM
 *
a
, BIGNUM *
b
,

276 
BN_CTX
 *
˘x
))

278 #i‚de‡
OPENSSL_NO_EC2M


288 
DEPRECATEDIN_1_2_0
(
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
,

289 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
,

290 
BN_CTX
 *
˘x
))

301 
DEPRECATEDIN_1_2_0
(
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
,

302 
BIGNUM
 *
a
, BIGNUM *
b
,

303 
BN_CTX
 *
˘x
))

309 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

316 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

323 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

331 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

346 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

347 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

348 #i‚de‡
OPENSSL_NO_EC2M


357 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
,

358 c⁄° 
BIGNUM
 *
b
, 
BN_CTX
 *
˘x
);

366 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

373 
EC_GROUP
 *
EC_GROUP_√w_‰om_e˝¨amëîs
(c⁄° 
ECPARAMETERS
 *
∑øms
);

381 
ECPARAMETERS
 *
EC_GROUP_gë_e˝¨amëîs
(c⁄° 
EC_GROUP
 *
group
,

382 
ECPARAMETERS
 *
∑øms
);

389 
EC_GROUP
 *
EC_GROUP_√w_‰om_e˝k∑ømëîs
(c⁄° 
ECPKPARAMETERS
 *
∑øms
);

397 
ECPKPARAMETERS
 *
EC_GROUP_gë_e˝k∑ømëîs
(c⁄° 
EC_GROUP
 *
group
,

398 
ECPKPARAMETERS
 *
∑øms
);

405 
nid
;

406 c⁄° *
commít
;

407 } 
	tEC_buûtö_curve
;

415 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

417 c⁄° *
EC_curve_nid2ni°
(
nid
);

418 
EC_curve_ni°2nid
(c⁄° *
«me
);

428 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

433 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

438 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

445 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

453 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

459 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

466 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

477 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

478 
EC_POINT
 *
p
, c⁄° 
BIGNUM
 *
x
,

479 c⁄° 
BIGNUM
 *
y
, c⁄° BIGNUM *
z
,

480 
BN_CTX
 *
˘x
);

491 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

492 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
,

493 
BIGNUM
 *
y
, BIGNUM *
z
,

494 
BN_CTX
 *
˘x
);

504 
EC_POINT_£t_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

505 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
,

506 
BN_CTX
 *
˘x
);

516 
EC_POINT_gë_afföe_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

517 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

528 
DEPRECATEDIN_1_2_0
(
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

529 
EC_POINT
 *
p
,

530 c⁄° 
BIGNUM
 *
x
,

531 c⁄° 
BIGNUM
 *
y
,

532 
BN_CTX
 *
˘x
))

543 
DEPRECATEDIN_1_2_0
(
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

544 c⁄° 
EC_POINT
 *
p
,

545 
BIGNUM
 *
x
,

546 
BIGNUM
 *
y
,

547 
BN_CTX
 *
˘x
))

557 
EC_POINT_£t_com¥es£d_co‹dö©es
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

558 c⁄° 
BIGNUM
 *
x
, 
y_bô
,

559 
BN_CTX
 *
˘x
);

570 
DEPRECATEDIN_1_2_0
(
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

571 
EC_POINT
 *
p
,

572 c⁄° 
BIGNUM
 *
x
,

573 
y_bô
,

574 
BN_CTX
 *
˘x
))

575 #i‚de‡
OPENSSL_NO_EC2M


585 
DEPRECATEDIN_1_2_0
(
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

586 
EC_POINT
 *
p
,

587 c⁄° 
BIGNUM
 *
x
,

588 c⁄° 
BIGNUM
 *
y
,

589 
BN_CTX
 *
˘x
))

600 
DEPRECATEDIN_1_2_0
(
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

601 c⁄° 
EC_POINT
 *
p
,

602 
BIGNUM
 *
x
,

603 
BIGNUM
 *
y
,

604 
BN_CTX
 *
˘x
))

615 
DEPRECATEDIN_1_2_0
(
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

616 
EC_POINT
 *
p
,

617 c⁄° 
BIGNUM
 *
x
,

618 
y_bô
,

619 
BN_CTX
 *
˘x
))

631 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

632 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

633 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

643 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

644 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

654 
size_t
 
EC_POINT_poöt2buf
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

655 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

656 **
pbuf
, 
BN_CTX
 *
˘x
);

659 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

660 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

661 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

662 
EC_POINT
 *, 
BN_CTX
 *);

663 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

664 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

665 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

666 
EC_POINT
 *, 
BN_CTX
 *);

680 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

681 c⁄° 
EC_POINT
 *
b
, 
BN_CTX
 *
˘x
);

690 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
,

691 
BN_CTX
 *
˘x
);

699 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

706 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

714 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
,

715 
BN_CTX
 *
˘x
);

724 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
,

725 
BN_CTX
 *
˘x
);

727 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

728 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *
group
, 
size_t
 
num
,

729 
EC_POINT
 *
poöts
[], 
BN_CTX
 *
˘x
);

741 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

742 
size_t
 
num
, c⁄° 
EC_POINT
 *
p
[], c⁄° 
BIGNUM
 *
m
[],

743 
BN_CTX
 *
˘x
);

754 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
,

755 c⁄° 
EC_POINT
 *
q
, c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

762 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

768 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

774 
DECLARE_ASN1_ITEM
(
ECPKPARAMETERS
)

775 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
ECPKPARAMETERS
)

776 
DECLARE_ASN1_ITEM
(
ECPARAMETERS
)

777 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
ECPARAMETERS
)

783 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

784 #i‚de‡
OPENSSL_NO_EC2M


785 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

786 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

787 *
k2
, *
k3
);

790 
	#OPENSSL_EC_EXPLICIT_CURVE
 0x000

	)

791 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

793 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

794 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

796 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

797 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

798 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

799 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

800 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

801 (*)(
x
))

	)

803 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

804 #i‚de‡
OPENSSL_NO_STDIO


805 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

813 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

814 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

817 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

818 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

819 
	#EC_FLAG_COFACTOR_ECDH
 0x1000

	)

824 
EC_KEY
 *
EC_KEY_√w
();

826 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

828 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

830 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

832 
EC_KEY_decoded_‰om_ex∂icô_∑øms
(c⁄° 
EC_KEY
 *
key
);

839 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

844 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

851 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

857 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

863 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

869 
ENGINE
 *
EC_KEY_gë0_ígöe
(c⁄° 
EC_KEY
 *
eckey
);

875 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

883 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

889 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

897 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

903 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

911 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

913 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

914 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *
eckey
, 
Êags
);

915 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *
key
);

916 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *
eckey
, 
poöt_c⁄vîsi⁄_f‹m_t
 
cf‹m
);

918 
	#EC_KEY_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

919 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_EC_KEY
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

920 
EC_KEY_£t_ex_d©a
(
EC_KEY
 *
key
, 
idx
, *
¨g
);

921 *
EC_KEY_gë_ex_d©a
(c⁄° 
EC_KEY
 *
key
, 
idx
);

924 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *
eckey
, 
a¢1_Êag
);

932 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

938 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

944 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

950 
EC_KEY_ˇn_sign
(c⁄° 
EC_KEY
 *
eckey
);

959 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
,

960 
BIGNUM
 *
y
);

969 
size_t
 
EC_KEY_key2buf
(c⁄° 
EC_KEY
 *
key
, 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

970 **
pbuf
, 
BN_CTX
 *
˘x
);

980 
EC_KEY_o˘2key
(
EC_KEY
 *
key
, c⁄° *
buf
, 
size_t
 
Àn
,

981 
BN_CTX
 *
˘x
);

990 
EC_KEY_o˘2¥iv
(
EC_KEY
 *
key
, c⁄° *
buf
, 
size_t
 
Àn
);

1000 
size_t
 
EC_KEY_¥iv2o˘
(c⁄° 
EC_KEY
 *
key
, *
buf
, size_à
Àn
);

1007 
size_t
 
EC_KEY_¥iv2buf
(c⁄° 
EC_KEY
 *
eckey
, **
pbuf
);

1019 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

1027 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

1040 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

1048 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

1062 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

1070 
i2o_ECPublicKey
(c⁄° 
EC_KEY
 *
key
, **
out
);

1077 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

1085 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

1087 #i‚de‡
OPENSSL_NO_STDIO


1093 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

1101 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

1105 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_O≥nSSL
();

1106 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_gë_deÁu…_mëhod
();

1107 
EC_KEY_£t_deÁu…_mëhod
(c⁄° 
EC_KEY_METHOD
 *
mëh
);

1108 c⁄° 
EC_KEY_METHOD
 *
EC_KEY_gë_mëhod
(c⁄° 
EC_KEY
 *
key
);

1109 
EC_KEY_£t_mëhod
(
EC_KEY
 *
key
, c⁄° 
EC_KEY_METHOD
 *
mëh
);

1110 
EC_KEY
 *
EC_KEY_√w_mëhod
(
ENGINE
 *
ígöe
);

1117 
ECDH_KDF_X9_62
(*
out
, 
size_t
 
ouéí
,

1118 c⁄° *
Z
, 
size_t
 
ZÀn
,

1119 c⁄° *
söfo
, 
size_t
 
söfﬁí
,

1120 c⁄° 
EVP_MD
 *
md
);

1122 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
,

1123 c⁄° 
EC_KEY
 *
ecdh
,

1124 *(*
KDF
Ë(c⁄° *
ö
, 
size_t
 
öÀn
,

1125 *
out
, 
size_t
 *
ouéí
));

1127 
ECDSA_SIG_°
 
	tECDSA_SIG
;

1132 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

1137 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

1146 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

1155 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

1162 
ECDSA_SIG_gë0
(c⁄° 
ECDSA_SIG
 *
sig
, c⁄° 
BIGNUM
 **
¥
, c⁄° BIGNUM **
ps
);

1167 c⁄° 
BIGNUM
 *
ECDSA_SIG_gë0_r
(c⁄° 
ECDSA_SIG
 *
sig
);

1172 c⁄° 
BIGNUM
 *
ECDSA_SIG_gë0_s
(c⁄° 
ECDSA_SIG
 *
sig
);

1179 
ECDSA_SIG_£t0
(
ECDSA_SIG
 *
sig
, 
BIGNUM
 *
r
, BIGNUM *
s
);

1188 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
, 
dg°_Àn
,

1189 
EC_KEY
 *
eckey
);

1201 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

1202 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
,

1203 
EC_KEY
 *
eckey
);

1214 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

1215 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
 *
eckey
);

1224 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
, BIGNUM **
Ω
);

1236 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1237 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

1252 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1253 *
sig
, *
sigÀn
,

1254 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

1267 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

1268 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

1274 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

1280 
EC_KEY_METHOD
 *
EC_KEY_METHOD_√w
(c⁄° EC_KEY_METHOD *
mëh
);

1281 
EC_KEY_METHOD_‰ì
(
EC_KEY_METHOD
 *
mëh
);

1282 
EC_KEY_METHOD_£t_öô
(
EC_KEY_METHOD
 *
mëh
,

1283 (*
öô
)(
EC_KEY
 *
key
),

1284 (*
föish
)(
EC_KEY
 *
key
),

1285 (*
c›y
)(
EC_KEY
 *
de°
, c⁄° EC_KEY *
§c
),

1286 (*
£t_group
)(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
gΩ
),

1287 (*
£t_¥iv©e
)(
EC_KEY
 *
key
,

1288 c⁄° 
BIGNUM
 *
¥iv_key
),

1289 (*
£t_public
)(
EC_KEY
 *
key
,

1290 c⁄° 
EC_POINT
 *
pub_key
));

1292 
EC_KEY_METHOD_£t_keygí
(
EC_KEY_METHOD
 *
mëh
,

1293 (*
keygí
)(
EC_KEY
 *
key
));

1295 
EC_KEY_METHOD_£t_compuã_key
(
EC_KEY_METHOD
 *
mëh
,

1296 (*
ckey
)(**
p£c
,

1297 
size_t
 *
p£˛í
,

1298 c⁄° 
EC_POINT
 *
pub_key
,

1299 c⁄° 
EC_KEY
 *
ecdh
));

1301 
EC_KEY_METHOD_£t_sign
(
EC_KEY_METHOD
 *
mëh
,

1302 (*
sign
)(
ty≥
, c⁄° *
dg°
,

1303 
dÀn
, *
sig
,

1304 *
sigÀn
,

1305 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
r
,

1306 
EC_KEY
 *
eckey
),

1307 (*
sign_£tup
)(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x_ö
,

1308 
BIGNUM
 **
kövp
, BIGNUM **
Ω
),

1309 
ECDSA_SIG
 *(*
sign_sig
)(c⁄° *
dg°
,

1310 
dg°_Àn
,

1311 c⁄° 
BIGNUM
 *
ö_köv
,

1312 c⁄° 
BIGNUM
 *
ö_r
,

1313 
EC_KEY
 *
eckey
));

1315 
EC_KEY_METHOD_£t_vîify
(
EC_KEY_METHOD
 *
mëh
,

1316 (*
vîify
)(
ty≥
, const 

1317 *
dg°
, 
dg°_Àn
,

1318 c⁄° *
sigbuf
,

1319 
sig_Àn
, 
EC_KEY
 *
eckey
),

1320 (*
vîify_sig
)(c⁄° *
dg°
,

1321 
dg°_Àn
,

1322 c⁄° 
ECDSA_SIG
 *
sig
,

1323 
EC_KEY
 *
eckey
));

1325 
EC_KEY_METHOD_gë_öô
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1326 (**
pöô
)(
EC_KEY
 *
key
),

1327 (**
pföish
)(
EC_KEY
 *
key
),

1328 (**
pc›y
)(
EC_KEY
 *
de°
, c⁄° EC_KEY *
§c
),

1329 (**
p£t_group
)(
EC_KEY
 *
key
,

1330 c⁄° 
EC_GROUP
 *
gΩ
),

1331 (**
p£t_¥iv©e
)(
EC_KEY
 *
key
,

1332 c⁄° 
BIGNUM
 *
¥iv_key
),

1333 (**
p£t_public
)(
EC_KEY
 *
key
,

1334 c⁄° 
EC_POINT
 *
pub_key
));

1336 
EC_KEY_METHOD_gë_keygí
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1337 (**
pkeygí
)(
EC_KEY
 *
key
));

1339 
EC_KEY_METHOD_gë_compuã_key
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1340 (**
pck
)(**
p£c
,

1341 
size_t
 *
p£˛í
,

1342 c⁄° 
EC_POINT
 *
pub_key
,

1343 c⁄° 
EC_KEY
 *
ecdh
));

1345 
EC_KEY_METHOD_gë_sign
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1346 (**
psign
)(
ty≥
, c⁄° *
dg°
,

1347 
dÀn
, *
sig
,

1348 *
sigÀn
,

1349 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
r
,

1350 
EC_KEY
 *
eckey
),

1351 (**
psign_£tup
)(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x_ö
,

1352 
BIGNUM
 **
kövp
, BIGNUM **
Ω
),

1353 
ECDSA_SIG
 *(**
psign_sig
)(c⁄° *
dg°
,

1354 
dg°_Àn
,

1355 c⁄° 
BIGNUM
 *
ö_köv
,

1356 c⁄° 
BIGNUM
 *
ö_r
,

1357 
EC_KEY
 *
eckey
));

1359 
EC_KEY_METHOD_gë_vîify
(c⁄° 
EC_KEY_METHOD
 *
mëh
,

1360 (**
pvîify
)(
ty≥
, const 

1361 *
dg°
, 
dg°_Àn
,

1362 c⁄° *
sigbuf
,

1363 
sig_Àn
, 
EC_KEY
 *
eckey
),

1364 (**
pvîify_sig
)(c⁄° *
dg°
,

1365 
dg°_Àn
,

1366 c⁄° 
ECDSA_SIG
 *
sig
,

1367 
EC_KEY
 *
eckey
));

1369 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

1371 #i‚de‡
__˝lu•lus


1372 #i‡
deföed
(
__SUNPRO_C
)

1373 #i‡
__SUNPRO_C
 >= 0x520

1374 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

1379 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

1380 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1381 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1382 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

1384 
	#EVP_PKEY_CTX_£t_ec_∑øm_íc
(
˘x
, 
Êag
) \

1385 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1386 
EVP_PKEY_OP_PARAMGEN
|
EVP_PKEY_OP_KEYGEN
, \

1387 
EVP_PKEY_CTRL_EC_PARAM_ENC
, 
Êag
, 
NULL
)

	)

1389 
	#EVP_PKEY_CTX_£t_ecdh_coÁ˘‹_mode
(
˘x
, 
Êag
) \

1390 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1391 
EVP_PKEY_OP_DERIVE
, \

1392 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, 
Êag
, 
NULL
)

	)

1394 
	#EVP_PKEY_CTX_gë_ecdh_coÁ˘‹_mode
(
˘x
) \

1395 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1396 
EVP_PKEY_OP_DERIVE
, \

1397 
EVP_PKEY_CTRL_EC_ECDH_COFACTOR
, -2, 
NULL
)

	)

1399 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ty≥
(
˘x
, 
kdf
) \

1400 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1401 
EVP_PKEY_OP_DERIVE
, \

1402 
EVP_PKEY_CTRL_EC_KDF_TYPE
, 
kdf
, 
NULL
)

	)

1404 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ty≥
(
˘x
) \

1405 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1406 
EVP_PKEY_OP_DERIVE
, \

1407 
EVP_PKEY_CTRL_EC_KDF_TYPE
, -2, 
NULL
)

	)

1409 
	#EVP_PKEY_CTX_£t_ecdh_kdf_md
(
˘x
, 
md
) \

1410 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1411 
EVP_PKEY_OP_DERIVE
, \

1412 
EVP_PKEY_CTRL_EC_KDF_MD
, 0, (*)(
md
))

	)

1414 
	#EVP_PKEY_CTX_gë_ecdh_kdf_md
(
˘x
, 
pmd
) \

1415 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1416 
EVP_PKEY_OP_DERIVE
, \

1417 
EVP_PKEY_CTRL_GET_EC_KDF_MD
, 0, (*)(
pmd
))

	)

1419 
	#EVP_PKEY_CTX_£t_ecdh_kdf_ouéí
(
˘x
, 
Àn
) \

1420 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1421 
EVP_PKEY_OP_DERIVE
, \

1422 
EVP_PKEY_CTRL_EC_KDF_OUTLEN
, 
Àn
, 
NULL
)

	)

1424 
	#EVP_PKEY_CTX_gë_ecdh_kdf_ouéí
(
˘x
, 
∂í
) \

1425 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1426 
EVP_PKEY_OP_DERIVE
, \

1427 
EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
, 0, \

1428 (*)(
∂í
))

	)

1430 
	#EVP_PKEY_CTX_£t0_ecdh_kdf_ukm
(
˘x
, 
p
, 
∂í
) \

1431 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1432 
EVP_PKEY_OP_DERIVE
, \

1433 
EVP_PKEY_CTRL_EC_KDF_UKM
, 
∂í
, (*)(
p
))

	)

1435 
	#EVP_PKEY_CTX_gë0_ecdh_kdf_ukm
(
˘x
, 
p
) \

1436 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, \

1437 
EVP_PKEY_OP_DERIVE
, \

1438 
EVP_PKEY_CTRL_GET_EC_KDF_UKM
, 0, (*)(
p
))

	)

1441 
	#EVP_PKEY_CTX_£t1_id
(
˘x
, 
id
, 
id_Àn
) \

1442 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, -1, \

1443 
EVP_PKEY_CTRL_SET1_ID
, ()
id_Àn
, (*)(
id
))

	)

1445 
	#EVP_PKEY_CTX_gë1_id
(
˘x
, 
id
) \

1446 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, -1, \

1447 
EVP_PKEY_CTRL_GET1_ID
, 0, (*)(
id
))

	)

1449 
	#EVP_PKEY_CTX_gë1_id_Àn
(
˘x
, 
id_Àn
) \

1450 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, -1, \

1451 
EVP_PKEY_CTRL_GET1_ID_LEN
, 0, (*)(
id_Àn
))

	)

1453 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

1454 
	#EVP_PKEY_CTRL_EC_PARAM_ENC
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

1455 
	#EVP_PKEY_CTRL_EC_ECDH_COFACTOR
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

1456 
	#EVP_PKEY_CTRL_EC_KDF_TYPE
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

1457 
	#EVP_PKEY_CTRL_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

1458 
	#EVP_PKEY_CTRL_GET_EC_KDF_MD
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

1459 
	#EVP_PKEY_CTRL_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

1460 
	#EVP_PKEY_CTRL_GET_EC_KDF_OUTLEN
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

1461 
	#EVP_PKEY_CTRL_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 9)

	)

1462 
	#EVP_PKEY_CTRL_GET_EC_KDF_UKM
 (
EVP_PKEY_ALG_CTRL
 + 10)

	)

1463 
	#EVP_PKEY_CTRL_SET1_ID
 (
EVP_PKEY_ALG_CTRL
 + 11)

	)

1464 
	#EVP_PKEY_CTRL_GET1_ID
 (
EVP_PKEY_ALG_CTRL
 + 12)

	)

1465 
	#EVP_PKEY_CTRL_GET1_ID_LEN
 (
EVP_PKEY_ALG_CTRL
 + 13)

	)

1467 
	#EVP_PKEY_ECDH_KDF_NONE
 1

	)

1468 
	#EVP_PKEY_ECDH_KDF_X9_63
 2

	)

1474 
	#EVP_PKEY_ECDH_KDF_X9_62
 
EVP_PKEY_ECDH_KDF_X9_63


	)

1477 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

12 
	#SN_undef
 "UNDEF"

	)

13 
	#LN_undef
 "undeföed"

	)

14 
	#NID_undef
 0

	)

15 
	#OBJ_undef
 0L

	)

17 
	#SN_ôu_t
 "ITU-T"

	)

18 
	#LN_ôu_t
 "ôu-t"

	)

19 
	#NID_ôu_t
 645

	)

20 
	#OBJ_ôu_t
 0L

	)

22 
	#NID_ccôt
 404

	)

23 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

25 
	#SN_iso
 "ISO"

	)

26 
	#LN_iso
 "iso"

	)

27 
	#NID_iso
 181

	)

28 
	#OBJ_iso
 1L

	)

30 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

31 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

32 
	#NID_joöt_iso_ôu_t
 646

	)

33 
	#OBJ_joöt_iso_ôu_t
 2L

	)

35 
	#NID_joöt_iso_ccôt
 393

	)

36 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

38 
	#SN_membî_body
 "membî-body"

	)

39 
	#LN_membî_body
 "ISO Membî Body"

	)

40 
	#NID_membî_body
 182

	)

41 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

43 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

44 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

45 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

47 
	#SN_hmac_md5
 "HMAC-MD5"

	)

48 
	#LN_hmac_md5
 "hmac-md5"

	)

49 
	#NID_hmac_md5
 780

	)

50 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

52 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

53 
	#LN_hmac_sha1
 "hmac-sha1"

	)

54 
	#NID_hmac_sha1
 781

	)

55 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

57 
	#SN_x509ExtAdmissi⁄
 "x509ExtAdmissi⁄"

	)

58 
	#LN_x509ExtAdmissi⁄
 "Pro„ssi⁄Æ Inf‹m©i⁄ o∏basi†f‹ Admissi⁄"

	)

59 
	#NID_x509ExtAdmissi⁄
 1093

	)

60 
	#OBJ_x509ExtAdmissi⁄
 
OBJ_idítifõd_‹g™iz©i⁄
,36L,8L,3L,3L

	)

62 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

63 
	#NID_˚πicom_¨c
 677

	)

64 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

66 
	#SN_õì
 "õì"

	)

67 
	#NID_õì
 1170

	)

68 
	#OBJ_õì
 
OBJ_idítifõd_‹g™iz©i⁄
,111L

	)

70 
	#SN_õì_siswg
 "õì-siswg"

	)

71 
	#LN_õì_siswg
 "IEEE Securôy i¿St‹agêW‹kög Group"

	)

72 
	#NID_õì_siswg
 1171

	)

73 
	#OBJ_õì_siswg
 
OBJ_õì
,2L,1619L

	)

75 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

76 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

77 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

78 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

80 
	#SN_w≠
 "w≠"

	)

81 
	#NID_w≠
 678

	)

82 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

84 
	#SN_w≠_wsg
 "w≠-wsg"

	)

85 
	#NID_w≠_wsg
 679

	)

86 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

88 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

89 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

90 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

91 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

93 
	#SN_˛óøn˚
 "˛óøn˚"

	)

94 
	#NID_˛óøn˚
 395

	)

95 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

97 
	#SN_ISO_US
 "ISO-US"

	)

98 
	#LN_ISO_US
 "ISO US Membî Body"

	)

99 
	#NID_ISO_US
 183

	)

100 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

102 
	#SN_X9_57
 "X9-57"

	)

103 
	#LN_X9_57
 "X9.57"

	)

104 
	#NID_X9_57
 184

	)

105 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

107 
	#SN_X9cm
 "X9cm"

	)

108 
	#LN_X9cm
 "X9.57 CM ?"

	)

109 
	#NID_X9cm
 185

	)

110 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

112 
	#SN_ISO_CN
 "ISO-CN"

	)

113 
	#LN_ISO_CN
 "ISO CN Membî Body"

	)

114 
	#NID_ISO_CN
 1140

	)

115 
	#OBJ_ISO_CN
 
OBJ_membî_body
,156L

	)

117 
	#SN_oscˇ
 "oscˇ"

	)

118 
	#NID_oscˇ
 1141

	)

119 
	#OBJ_oscˇ
 
OBJ_ISO_CN
,10197L

	)

121 
	#SN_sm_scheme
 "sm-scheme"

	)

122 
	#NID_sm_scheme
 1142

	)

123 
	#OBJ_sm_scheme
 
OBJ_oscˇ
,1L

	)

125 
	#SN_dß
 "DSA"

	)

126 
	#LN_dß
 "dßEn¸y±i⁄"

	)

127 
	#NID_dß
 116

	)

128 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

130 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

131 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

132 
	#NID_dßWôhSHA1
 113

	)

133 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

135 
	#SN_™si_X9_62
 "™si-X9-62"

	)

136 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

137 
	#NID_™si_X9_62
 405

	)

138 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

140 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

142 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

143 
	#NID_X9_62_¥ime_fõld
 406

	)

144 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

146 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

147 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

148 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

150 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

151 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

152 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

154 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

155 
	#NID_X9_62_⁄Basis
 681

	)

156 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

158 
	#SN_X9_62_çBasis
 "çBasis"

	)

159 
	#NID_X9_62_çBasis
 682

	)

160 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

162 
	#SN_X9_62_µBasis
 "µBasis"

	)

163 
	#NID_X9_62_µBasis
 683

	)

164 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

166 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

168 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

169 
	#NID_X9_62_id_ecPublicKey
 408

	)

170 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

172 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

174 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

176 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

177 
	#NID_X9_62_c2≤b163v1
 684

	)

178 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

180 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

181 
	#NID_X9_62_c2≤b163v2
 685

	)

182 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

184 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

185 
	#NID_X9_62_c2≤b163v3
 686

	)

186 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

188 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

189 
	#NID_X9_62_c2≤b176v1
 687

	)

190 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

192 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

193 
	#NID_X9_62_c2äb191v1
 688

	)

194 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

196 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

197 
	#NID_X9_62_c2äb191v2
 689

	)

198 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

200 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

201 
	#NID_X9_62_c2äb191v3
 690

	)

202 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

204 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

205 
	#NID_X9_62_c2⁄b191v4
 691

	)

206 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

208 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

209 
	#NID_X9_62_c2⁄b191v5
 692

	)

210 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

212 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

213 
	#NID_X9_62_c2≤b208w1
 693

	)

214 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

216 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

217 
	#NID_X9_62_c2äb239v1
 694

	)

218 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

220 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

221 
	#NID_X9_62_c2äb239v2
 695

	)

222 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

224 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

225 
	#NID_X9_62_c2äb239v3
 696

	)

226 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

228 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

229 
	#NID_X9_62_c2⁄b239v4
 697

	)

230 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

232 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

233 
	#NID_X9_62_c2⁄b239v5
 698

	)

234 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

236 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

237 
	#NID_X9_62_c2≤b272w1
 699

	)

238 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

240 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

241 
	#NID_X9_62_c2≤b304w1
 700

	)

242 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

244 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

245 
	#NID_X9_62_c2äb359v1
 701

	)

246 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

248 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

249 
	#NID_X9_62_c2≤b368w1
 702

	)

250 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

252 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

253 
	#NID_X9_62_c2äb431r1
 703

	)

254 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

256 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

258 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

259 
	#NID_X9_62_¥ime192v1
 409

	)

260 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

262 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

263 
	#NID_X9_62_¥ime192v2
 410

	)

264 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

266 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

267 
	#NID_X9_62_¥ime192v3
 411

	)

268 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

270 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

271 
	#NID_X9_62_¥ime239v1
 412

	)

272 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

274 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

275 
	#NID_X9_62_¥ime239v2
 413

	)

276 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

278 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

279 
	#NID_X9_62_¥ime239v3
 414

	)

280 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

282 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

283 
	#NID_X9_62_¥ime256v1
 415

	)

284 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

286 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

288 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

289 
	#NID_ecdß_wôh_SHA1
 416

	)

290 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

292 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

293 
	#NID_ecdß_wôh_Recommíded
 791

	)

294 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

296 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

297 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

298 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

300 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

301 
	#NID_ecdß_wôh_SHA224
 793

	)

302 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

304 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

305 
	#NID_ecdß_wôh_SHA256
 794

	)

306 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

308 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

309 
	#NID_ecdß_wôh_SHA384
 795

	)

310 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

312 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

313 
	#NID_ecdß_wôh_SHA512
 796

	)

314 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

316 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

318 
	#SN_£˝112r1
 "£˝112r1"

	)

319 
	#NID_£˝112r1
 704

	)

320 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

322 
	#SN_£˝112r2
 "£˝112r2"

	)

323 
	#NID_£˝112r2
 705

	)

324 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

326 
	#SN_£˝128r1
 "£˝128r1"

	)

327 
	#NID_£˝128r1
 706

	)

328 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

330 
	#SN_£˝128r2
 "£˝128r2"

	)

331 
	#NID_£˝128r2
 707

	)

332 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

334 
	#SN_£˝160k1
 "£˝160k1"

	)

335 
	#NID_£˝160k1
 708

	)

336 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

338 
	#SN_£˝160r1
 "£˝160r1"

	)

339 
	#NID_£˝160r1
 709

	)

340 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

342 
	#SN_£˝160r2
 "£˝160r2"

	)

343 
	#NID_£˝160r2
 710

	)

344 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

346 
	#SN_£˝192k1
 "£˝192k1"

	)

347 
	#NID_£˝192k1
 711

	)

348 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

350 
	#SN_£˝224k1
 "£˝224k1"

	)

351 
	#NID_£˝224k1
 712

	)

352 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

354 
	#SN_£˝224r1
 "£˝224r1"

	)

355 
	#NID_£˝224r1
 713

	)

356 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

358 
	#SN_£˝256k1
 "£˝256k1"

	)

359 
	#NID_£˝256k1
 714

	)

360 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

362 
	#SN_£˝384r1
 "£˝384r1"

	)

363 
	#NID_£˝384r1
 715

	)

364 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

366 
	#SN_£˝521r1
 "£˝521r1"

	)

367 
	#NID_£˝521r1
 716

	)

368 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

370 
	#SN_£˘113r1
 "£˘113r1"

	)

371 
	#NID_£˘113r1
 717

	)

372 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

374 
	#SN_£˘113r2
 "£˘113r2"

	)

375 
	#NID_£˘113r2
 718

	)

376 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

378 
	#SN_£˘131r1
 "£˘131r1"

	)

379 
	#NID_£˘131r1
 719

	)

380 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

382 
	#SN_£˘131r2
 "£˘131r2"

	)

383 
	#NID_£˘131r2
 720

	)

384 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

386 
	#SN_£˘163k1
 "£˘163k1"

	)

387 
	#NID_£˘163k1
 721

	)

388 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

390 
	#SN_£˘163r1
 "£˘163r1"

	)

391 
	#NID_£˘163r1
 722

	)

392 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

394 
	#SN_£˘163r2
 "£˘163r2"

	)

395 
	#NID_£˘163r2
 723

	)

396 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

398 
	#SN_£˘193r1
 "£˘193r1"

	)

399 
	#NID_£˘193r1
 724

	)

400 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

402 
	#SN_£˘193r2
 "£˘193r2"

	)

403 
	#NID_£˘193r2
 725

	)

404 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

406 
	#SN_£˘233k1
 "£˘233k1"

	)

407 
	#NID_£˘233k1
 726

	)

408 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

410 
	#SN_£˘233r1
 "£˘233r1"

	)

411 
	#NID_£˘233r1
 727

	)

412 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

414 
	#SN_£˘239k1
 "£˘239k1"

	)

415 
	#NID_£˘239k1
 728

	)

416 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

418 
	#SN_£˘283k1
 "£˘283k1"

	)

419 
	#NID_£˘283k1
 729

	)

420 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

422 
	#SN_£˘283r1
 "£˘283r1"

	)

423 
	#NID_£˘283r1
 730

	)

424 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

426 
	#SN_£˘409k1
 "£˘409k1"

	)

427 
	#NID_£˘409k1
 731

	)

428 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

430 
	#SN_£˘409r1
 "£˘409r1"

	)

431 
	#NID_£˘409r1
 732

	)

432 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

434 
	#SN_£˘571k1
 "£˘571k1"

	)

435 
	#NID_£˘571k1
 733

	)

436 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

438 
	#SN_£˘571r1
 "£˘571r1"

	)

439 
	#NID_£˘571r1
 734

	)

440 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

442 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

444 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

445 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

446 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

448 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

449 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

450 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

452 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

453 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

454 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

456 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

457 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

458 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

460 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

461 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

462 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

464 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

465 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

466 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

468 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

469 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

470 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

472 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

473 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

474 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

476 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

477 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

478 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

480 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

481 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

482 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

484 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

485 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

486 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

488 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

489 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

490 
	#NID_ˇ°5_cbc
 108

	)

491 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

493 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

494 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

495 
	#NID_ˇ°5_ecb
 109

	)

497 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

498 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

499 
	#NID_ˇ°5_cfb64
 110

	)

501 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

502 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

503 
	#NID_ˇ°5_ofb64
 111

	)

505 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

506 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

507 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

509 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

510 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

511 
	#NID_id_Passw‹dBa£dMAC
 782

	)

512 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

514 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

515 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

516 
	#NID_id_DHBa£dMac
 783

	)

517 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

519 
	#SN_rßdsi
 "rßdsi"

	)

520 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

521 
	#NID_rßdsi
 1

	)

522 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

524 
	#SN_pkcs
 "pkcs"

	)

525 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

526 
	#NID_pkcs
 2

	)

527 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

529 
	#SN_pkcs1
 "pkcs1"

	)

530 
	#NID_pkcs1
 186

	)

531 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

533 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

534 
	#NID_rßEn¸y±i⁄
 6

	)

535 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

537 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

538 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

539 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

540 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

542 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

543 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

544 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

545 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

547 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

548 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

549 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

550 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

552 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

553 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

554 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

555 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

557 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

558 
	#LN_rßesO´p
 "rßesO´p"

	)

559 
	#NID_rßesO´p
 919

	)

560 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

562 
	#SN_mgf1
 "MGF1"

	)

563 
	#LN_mgf1
 "mgf1"

	)

564 
	#NID_mgf1
 911

	)

565 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

567 
	#SN_pS≥cifõd
 "PSPECIFIED"

	)

568 
	#LN_pS≥cifõd
 "pS≥cifõd"

	)

569 
	#NID_pS≥cifõd
 935

	)

570 
	#OBJ_pS≥cifõd
 
OBJ_pkcs1
,9L

	)

572 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

573 
	#LN_rßsßPss
 "rßsßPss"

	)

574 
	#NID_rßsßPss
 912

	)

575 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

577 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

578 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

579 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

580 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

582 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

583 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

584 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

585 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

587 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

588 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

589 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

590 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

592 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

593 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

594 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

595 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

597 
	#SN_sha512_224WôhRSAEn¸y±i⁄
 "RSA-SHA512/224"

	)

598 
	#LN_sha512_224WôhRSAEn¸y±i⁄
 "sha512-224WôhRSAEn¸y±i⁄"

	)

599 
	#NID_sha512_224WôhRSAEn¸y±i⁄
 1145

	)

600 
	#OBJ_sha512_224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,15L

	)

602 
	#SN_sha512_256WôhRSAEn¸y±i⁄
 "RSA-SHA512/256"

	)

603 
	#LN_sha512_256WôhRSAEn¸y±i⁄
 "sha512-256WôhRSAEn¸y±i⁄"

	)

604 
	#NID_sha512_256WôhRSAEn¸y±i⁄
 1146

	)

605 
	#OBJ_sha512_256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,16L

	)

607 
	#SN_pkcs3
 "pkcs3"

	)

608 
	#NID_pkcs3
 27

	)

609 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

611 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

612 
	#NID_dhKeyAgªemít
 28

	)

613 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

615 
	#SN_pkcs5
 "pkcs5"

	)

616 
	#NID_pkcs5
 187

	)

617 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

619 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

620 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

621 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

622 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

624 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

625 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

626 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

627 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

629 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

630 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

631 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

632 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

634 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

635 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

636 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

637 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

639 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

640 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

641 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

642 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

644 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

645 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

646 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

647 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

649 
	#LN_id_pbkdf2
 "PBKDF2"

	)

650 
	#NID_id_pbkdf2
 69

	)

651 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

653 
	#LN_pbes2
 "PBES2"

	)

654 
	#NID_pbes2
 161

	)

655 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

657 
	#LN_pbmac1
 "PBMAC1"

	)

658 
	#NID_pbmac1
 162

	)

659 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

661 
	#SN_pkcs7
 "pkcs7"

	)

662 
	#NID_pkcs7
 20

	)

663 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

665 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

666 
	#NID_pkcs7_d©a
 21

	)

667 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

669 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

670 
	#NID_pkcs7_sig√d
 22

	)

671 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

673 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

674 
	#NID_pkcs7_ívñ›ed
 23

	)

675 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

677 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

678 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

679 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

681 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

682 
	#NID_pkcs7_dige°
 25

	)

683 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

685 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

686 
	#NID_pkcs7_í¸y±ed
 26

	)

687 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

689 
	#SN_pkcs9
 "pkcs9"

	)

690 
	#NID_pkcs9
 47

	)

691 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

693 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

694 
	#NID_pkcs9_emaûAddªss
 48

	)

695 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

697 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

698 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

699 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

701 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

702 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

703 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

705 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

706 
	#NID_pkcs9_mesßgeDige°
 51

	)

707 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

709 
	#LN_pkcs9_signögTime
 "signögTime"

	)

710 
	#NID_pkcs9_signögTime
 52

	)

711 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

713 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

714 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

715 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

717 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

718 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

719 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

721 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

722 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

723 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

725 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

726 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

727 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

729 
	#SN_ext_ªq
 "extReq"

	)

730 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

731 
	#NID_ext_ªq
 172

	)

732 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

734 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

735 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

736 
	#NID_SMIMEC≠abûôõs
 167

	)

737 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

739 
	#SN_SMIME
 "SMIME"

	)

740 
	#LN_SMIME
 "S/MIME"

	)

741 
	#NID_SMIME
 188

	)

742 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

744 
	#SN_id_smime_mod
 "id-smime-mod"

	)

745 
	#NID_id_smime_mod
 189

	)

746 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

748 
	#SN_id_smime_˘
 "id-smime-˘"

	)

749 
	#NID_id_smime_˘
 190

	)

750 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

752 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

753 
	#NID_id_smime_Ø
 191

	)

754 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

756 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

757 
	#NID_id_smime_Æg
 192

	)

758 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

760 
	#SN_id_smime_cd
 "id-smime-cd"

	)

761 
	#NID_id_smime_cd
 193

	)

762 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

764 
	#SN_id_smime_•q
 "id-smime-•q"

	)

765 
	#NID_id_smime_•q
 194

	)

766 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

768 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

769 
	#NID_id_smime_˘i
 195

	)

770 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

772 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

773 
	#NID_id_smime_mod_cms
 196

	)

774 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

776 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

777 
	#NID_id_smime_mod_ess
 197

	)

778 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

780 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

781 
	#NID_id_smime_mod_oid
 198

	)

782 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

784 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

785 
	#NID_id_smime_mod_msg_v3
 199

	)

786 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

788 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

789 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

790 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

792 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

793 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

794 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

796 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

797 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

798 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

800 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

801 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

802 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

804 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

805 
	#NID_id_smime_˘_ª˚ùt
 204

	)

806 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

808 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

809 
	#NID_id_smime_˘_authD©a
 205

	)

810 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

812 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

813 
	#NID_id_smime_˘_publishCît
 206

	)

814 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

816 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

817 
	#NID_id_smime_˘_TSTInfo
 207

	)

818 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

820 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

821 
	#NID_id_smime_˘_TDTInfo
 208

	)

822 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

824 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

825 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

826 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

828 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

829 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

830 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

832 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

833 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

834 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

836 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

837 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

838 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

840 
	#SN_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 "id-smime-˘-c⁄ã¡CﬁÀ˘i⁄"

	)

841 
	#NID_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 1058

	)

842 
	#OBJ_id_smime_˘_c⁄ã¡CﬁÀ˘i⁄
 
OBJ_id_smime_˘
,19L

	)

844 
	#SN_id_smime_˘_authEnvñ›edD©a
 "id-smime-˘-authEnvñ›edD©a"

	)

845 
	#NID_id_smime_˘_authEnvñ›edD©a
 1059

	)

846 
	#OBJ_id_smime_˘_authEnvñ›edD©a
 
OBJ_id_smime_˘
,23L

	)

848 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

849 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

850 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

852 
	#SN_id_˘_xml
 "id-˘-xml"

	)

853 
	#NID_id_˘_xml
 1060

	)

854 
	#OBJ_id_˘_xml
 
OBJ_id_smime_˘
,28L

	)

856 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

857 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

858 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

860 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

861 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

862 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

864 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

865 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

866 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

868 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

869 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

870 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

872 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

873 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

874 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

876 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

877 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

878 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

880 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

881 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

882 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

884 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

885 
	#NID_id_smime_Ø_macVÆue
 219

	)

886 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

888 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

889 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

890 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

892 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

893 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

894 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

896 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

897 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

898 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

900 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

901 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

902 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

904 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

905 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

906 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

908 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

909 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

910 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

912 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

913 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

914 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

916 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

917 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

918 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

920 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

921 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

922 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

924 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

925 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

926 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

928 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

929 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

930 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

932 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

933 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

934 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

936 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

937 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

938 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

940 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

941 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

942 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

944 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

945 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

946 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

948 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

949 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

950 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

952 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

953 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

954 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

956 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

957 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

958 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

960 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

961 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

962 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

964 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

965 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

966 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

968 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

969 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

970 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

972 
	#SN_id_smime_Ø_signögCîtifiˇãV2
 "id-smime-Ø-signögCîtifiˇãV2"

	)

973 
	#NID_id_smime_Ø_signögCîtifiˇãV2
 1086

	)

974 
	#OBJ_id_smime_Ø_signögCîtifiˇãV2
 
OBJ_id_smime_Ø
,47L

	)

976 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

977 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

978 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

980 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

981 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

982 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

984 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

985 
	#NID_id_smime_Æg_3DESwøp
 243

	)

986 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

988 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

989 
	#NID_id_smime_Æg_RC2wøp
 244

	)

990 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

992 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

993 
	#NID_id_smime_Æg_ESDH
 245

	)

994 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

996 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

997 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

998 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

1000 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

1001 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

1002 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

1004 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1005 
	#NID_id_Æg_PWRI_KEK
 893

	)

1006 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1008 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1009 
	#NID_id_smime_cd_ld≠
 248

	)

1010 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1012 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1013 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1014 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1016 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1017 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1018 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1020 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1021 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1022 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1024 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1025 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1026 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1028 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1029 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1030 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1032 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1033 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1034 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1036 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1037 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1038 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1040 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1041 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1042 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1044 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1045 
	#NID_‰õndlyName
 156

	)

1046 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1048 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1049 
	#NID_loˇlKeyID
 157

	)

1050 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1052 
	#SN_ms_c•_«me
 "CSPName"

	)

1053 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1054 
	#NID_ms_c•_«me
 417

	)

1055 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1057 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1058 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1059 
	#NID_LoˇlKeySë
 856

	)

1060 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1062 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1064 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1065 
	#NID_x509Cîtifiˇã
 158

	)

1066 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1068 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1069 
	#NID_sdsiCîtifiˇã
 159

	)

1070 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1072 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1074 
	#LN_x509Cæ
 "x509Cæ"

	)

1075 
	#NID_x509Cæ
 160

	)

1076 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1078 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1080 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1082 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1083 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1085 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1087 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1088 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1089 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1090 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1092 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1093 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1095 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1097 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1098 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1100 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1102 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1103 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1105 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1107 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1108 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1109 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1110 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1112 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1114 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1116 
	#LN_keyBag
 "keyBag"

	)

1117 
	#NID_keyBag
 150

	)

1118 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1120 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1121 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1122 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1124 
	#LN_˚πBag
 "˚πBag"

	)

1125 
	#NID_˚πBag
 152

	)

1126 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1128 
	#LN_¸lBag
 "¸lBag"

	)

1129 
	#NID_¸lBag
 153

	)

1130 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1132 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1133 
	#NID_£¸ëBag
 154

	)

1134 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1136 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1137 
	#NID_ß„C⁄ã¡sBag
 155

	)

1138 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1140 
	#SN_md2
 "MD2"

	)

1141 
	#LN_md2
 "md2"

	)

1142 
	#NID_md2
 3

	)

1143 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1145 
	#SN_md4
 "MD4"

	)

1146 
	#LN_md4
 "md4"

	)

1147 
	#NID_md4
 257

	)

1148 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1150 
	#SN_md5
 "MD5"

	)

1151 
	#LN_md5
 "md5"

	)

1152 
	#NID_md5
 4

	)

1153 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1155 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1156 
	#LN_md5_sha1
 "md5-sha1"

	)

1157 
	#NID_md5_sha1
 114

	)

1159 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1160 
	#NID_hmacWôhMD5
 797

	)

1161 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1163 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1164 
	#NID_hmacWôhSHA1
 163

	)

1165 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1167 
	#SN_sm2
 "SM2"

	)

1168 
	#LN_sm2
 "sm2"

	)

1169 
	#NID_sm2
 1172

	)

1170 
	#OBJ_sm2
 
OBJ_sm_scheme
,301L

	)

1172 
	#SN_sm3
 "SM3"

	)

1173 
	#LN_sm3
 "sm3"

	)

1174 
	#NID_sm3
 1143

	)

1175 
	#OBJ_sm3
 
OBJ_sm_scheme
,401L

	)

1177 
	#SN_sm3WôhRSAEn¸y±i⁄
 "RSA-SM3"

	)

1178 
	#LN_sm3WôhRSAEn¸y±i⁄
 "sm3WôhRSAEn¸y±i⁄"

	)

1179 
	#NID_sm3WôhRSAEn¸y±i⁄
 1144

	)

1180 
	#OBJ_sm3WôhRSAEn¸y±i⁄
 
OBJ_sm_scheme
,504L

	)

1182 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1183 
	#NID_hmacWôhSHA224
 798

	)

1184 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1186 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1187 
	#NID_hmacWôhSHA256
 799

	)

1188 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1190 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1191 
	#NID_hmacWôhSHA384
 800

	)

1192 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1194 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1195 
	#NID_hmacWôhSHA512
 801

	)

1196 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1198 
	#LN_hmacWôhSHA512_224
 "hmacWôhSHA512-224"

	)

1199 
	#NID_hmacWôhSHA512_224
 1193

	)

1200 
	#OBJ_hmacWôhSHA512_224
 
OBJ_rßdsi
,2L,12L

	)

1202 
	#LN_hmacWôhSHA512_256
 "hmacWôhSHA512-256"

	)

1203 
	#NID_hmacWôhSHA512_256
 1194

	)

1204 
	#OBJ_hmacWôhSHA512_256
 
OBJ_rßdsi
,2L,13L

	)

1206 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1207 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1208 
	#NID_rc2_cbc
 37

	)

1209 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1211 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1212 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1213 
	#NID_rc2_ecb
 38

	)

1215 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1216 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1217 
	#NID_rc2_cfb64
 39

	)

1219 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1220 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1221 
	#NID_rc2_ofb64
 40

	)

1223 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1224 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1225 
	#NID_rc2_40_cbc
 98

	)

1227 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1228 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1229 
	#NID_rc2_64_cbc
 166

	)

1231 
	#SN_rc4
 "RC4"

	)

1232 
	#LN_rc4
 "rc4"

	)

1233 
	#NID_rc4
 5

	)

1234 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1236 
	#SN_rc4_40
 "RC4-40"

	)

1237 
	#LN_rc4_40
 "rc4-40"

	)

1238 
	#NID_rc4_40
 97

	)

1240 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1241 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1242 
	#NID_des_ede3_cbc
 44

	)

1243 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1245 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1246 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1247 
	#NID_rc5_cbc
 120

	)

1248 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1250 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1251 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1252 
	#NID_rc5_ecb
 121

	)

1254 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1255 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1256 
	#NID_rc5_cfb64
 122

	)

1258 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1259 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1260 
	#NID_rc5_ofb64
 123

	)

1262 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1263 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1264 
	#NID_ms_ext_ªq
 171

	)

1265 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1267 
	#SN_ms_code_öd
 "msCodeInd"

	)

1268 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1269 
	#NID_ms_code_öd
 134

	)

1270 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1272 
	#SN_ms_code_com
 "msCodeCom"

	)

1273 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1274 
	#NID_ms_code_com
 135

	)

1275 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1277 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1278 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1279 
	#NID_ms_˘l_sign
 136

	)

1280 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1282 
	#SN_ms_sgc
 "msSGC"

	)

1283 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1284 
	#NID_ms_sgc
 137

	)

1285 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1287 
	#SN_ms_efs
 "msEFS"

	)

1288 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1289 
	#NID_ms_efs
 138

	)

1290 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1292 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1293 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrd Logö"

	)

1294 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1295 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1297 
	#SN_ms_u≤
 "msUPN"

	)

1298 
	#LN_ms_u≤
 "Mi¸oso· U£∏PröcùÆ Name"

	)

1299 
	#NID_ms_u≤
 649

	)

1300 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1302 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1303 
	#LN_idó_cbc
 "idó-cbc"

	)

1304 
	#NID_idó_cbc
 34

	)

1305 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1307 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1308 
	#LN_idó_ecb
 "idó-ecb"

	)

1309 
	#NID_idó_ecb
 36

	)

1311 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1312 
	#LN_idó_cfb64
 "idó-cfb"

	)

1313 
	#NID_idó_cfb64
 35

	)

1315 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1316 
	#LN_idó_ofb64
 "idó-ofb"

	)

1317 
	#NID_idó_ofb64
 46

	)

1319 
	#SN_bf_cbc
 "BF-CBC"

	)

1320 
	#LN_bf_cbc
 "bf-cbc"

	)

1321 
	#NID_bf_cbc
 91

	)

1322 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1324 
	#SN_bf_ecb
 "BF-ECB"

	)

1325 
	#LN_bf_ecb
 "bf-ecb"

	)

1326 
	#NID_bf_ecb
 92

	)

1328 
	#SN_bf_cfb64
 "BF-CFB"

	)

1329 
	#LN_bf_cfb64
 "bf-cfb"

	)

1330 
	#NID_bf_cfb64
 93

	)

1332 
	#SN_bf_ofb64
 "BF-OFB"

	)

1333 
	#LN_bf_ofb64
 "bf-ofb"

	)

1334 
	#NID_bf_ofb64
 94

	)

1336 
	#SN_id_pkix
 "PKIX"

	)

1337 
	#NID_id_pkix
 127

	)

1338 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1340 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1341 
	#NID_id_pkix_mod
 258

	)

1342 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1344 
	#SN_id_≥
 "id-≥"

	)

1345 
	#NID_id_≥
 175

	)

1346 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1348 
	#SN_id_qt
 "id-qt"

	)

1349 
	#NID_id_qt
 259

	)

1350 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1352 
	#SN_id_kp
 "id-kp"

	)

1353 
	#NID_id_kp
 128

	)

1354 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1356 
	#SN_id_ô
 "id-ô"

	)

1357 
	#NID_id_ô
 260

	)

1358 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1360 
	#SN_id_pkù
 "id-pkù"

	)

1361 
	#NID_id_pkù
 261

	)

1362 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1364 
	#SN_id_Æg
 "id-Æg"

	)

1365 
	#NID_id_Æg
 262

	)

1366 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1368 
	#SN_id_cmc
 "id-cmc"

	)

1369 
	#NID_id_cmc
 263

	)

1370 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1372 
	#SN_id_⁄
 "id-⁄"

	)

1373 
	#NID_id_⁄
 264

	)

1374 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1376 
	#SN_id_pda
 "id-pda"

	)

1377 
	#NID_id_pda
 265

	)

1378 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1380 
	#SN_id_aˇ
 "id-aˇ"

	)

1381 
	#NID_id_aˇ
 266

	)

1382 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1384 
	#SN_id_qcs
 "id-qcs"

	)

1385 
	#NID_id_qcs
 267

	)

1386 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1388 
	#SN_id_c˘
 "id-c˘"

	)

1389 
	#NID_id_c˘
 268

	)

1390 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1392 
	#SN_id_µl
 "id-µl"

	)

1393 
	#NID_id_µl
 662

	)

1394 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1396 
	#SN_id_ad
 "id-ad"

	)

1397 
	#NID_id_ad
 176

	)

1398 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1400 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1401 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1402 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1404 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1405 
	#NID_id_pkix1_im∂icô_88
 270

	)

1406 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1408 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1409 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1410 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1412 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1413 
	#NID_id_pkix1_im∂icô_93
 272

	)

1414 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1416 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1417 
	#NID_id_mod_¸mf
 273

	)

1418 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1420 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1421 
	#NID_id_mod_cmc
 274

	)

1422 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1424 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1425 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1426 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1428 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1429 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1430 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1432 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1433 
	#NID_id_mod_cmp
 277

	)

1434 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1436 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1437 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1438 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1440 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1441 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1442 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1444 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1445 
	#NID_id_mod_©åibuã_˚π
 280

	)

1446 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1448 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1449 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1450 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1452 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1453 
	#NID_id_mod_oc•
 282

	)

1454 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1456 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1457 
	#NID_id_mod_dvcs
 283

	)

1458 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1460 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1461 
	#NID_id_mod_cmp2000
 284

	)

1462 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1464 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1465 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1466 
	#NID_öfo_ac˚ss
 177

	)

1467 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1469 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1470 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1471 
	#NID_biomëricInfo
 285

	)

1472 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1474 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1475 
	#NID_qcSèãmíts
 286

	)

1476 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1478 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1479 
	#NID_ac_audôE¡ôy
 287

	)

1480 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1482 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1483 
	#NID_ac_èrgëög
 288

	)

1484 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1486 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1487 
	#NID_ØC⁄åﬁs
 289

	)

1488 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1490 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1491 
	#NID_sbgp_ùAddrBlock
 290

	)

1492 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1494 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1495 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1496 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1498 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1499 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1500 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1502 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1503 
	#NID_ac_¥oxyög
 397

	)

1504 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1506 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1507 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1508 
	#NID_söfo_ac˚ss
 398

	)

1509 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1511 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1512 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1513 
	#NID_¥oxyCîtInfo
 663

	)

1514 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1516 
	#SN_és„©uª
 "és„©uª"

	)

1517 
	#LN_és„©uª
 "TLS Fótuª"

	)

1518 
	#NID_és„©uª
 1020

	)

1519 
	#OBJ_és„©uª
 
OBJ_id_≥
,24L

	)

1521 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1522 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1523 
	#NID_id_qt_˝s
 164

	)

1524 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1526 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1527 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1528 
	#NID_id_qt_unŸi˚
 165

	)

1529 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1531 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1532 
	#NID_ãxtNŸi˚
 293

	)

1533 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1535 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1536 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1537 
	#NID_£rvî_auth
 129

	)

1538 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1540 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1541 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1542 
	#NID_˛õ¡_auth
 130

	)

1543 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1545 
	#SN_code_sign
 "codeSignög"

	)

1546 
	#LN_code_sign
 "CodêSignög"

	)

1547 
	#NID_code_sign
 131

	)

1548 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1550 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1551 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1552 
	#NID_emaû_¥Ÿe˘
 132

	)

1553 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1555 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1556 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1557 
	#NID_ù£cEndSy°em
 294

	)

1558 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1560 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1561 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1562 
	#NID_ù£cTu¬ñ
 295

	)

1563 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1565 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1566 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1567 
	#NID_ù£cU£r
 296

	)

1568 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1570 
	#SN_time_°amp
 "timeSèmpög"

	)

1571 
	#LN_time_°amp
 "TimêSèmpög"

	)

1572 
	#NID_time_°amp
 133

	)

1573 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1575 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1576 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1577 
	#NID_OCSP_sign
 180

	)

1578 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1580 
	#SN_dvcs
 "DVCS"

	)

1581 
	#LN_dvcs
 "dvcs"

	)

1582 
	#NID_dvcs
 297

	)

1583 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1585 
	#SN_ù£c_IKE
 "ù£cIKE"

	)

1586 
	#LN_ù£c_IKE
 "ù£¯I¡î√àKey Exch™ge"

	)

1587 
	#NID_ù£c_IKE
 1022

	)

1588 
	#OBJ_ù£c_IKE
 
OBJ_id_kp
,17L

	)

1590 
	#SN_ˇpw≠AC
 "ˇpw≠AC"

	)

1591 
	#LN_ˇpw≠AC
 "Cål/¥ovisi⁄ WAP Ac˚ss"

	)

1592 
	#NID_ˇpw≠AC
 1023

	)

1593 
	#OBJ_ˇpw≠AC
 
OBJ_id_kp
,18L

	)

1595 
	#SN_ˇpw≠WTP
 "ˇpw≠WTP"

	)

1596 
	#LN_ˇpw≠WTP
 "Cål/Provisi⁄ WAP Tîmö©i⁄"

	)

1597 
	#NID_ˇpw≠WTP
 1024

	)

1598 
	#OBJ_ˇpw≠WTP
 
OBJ_id_kp
,19L

	)

1600 
	#SN_sshClõ¡
 "£cuªShñlClõ¡"

	)

1601 
	#LN_sshClõ¡
 "SSH Clõ¡"

	)

1602 
	#NID_sshClõ¡
 1025

	)

1603 
	#OBJ_sshClõ¡
 
OBJ_id_kp
,21L

	)

1605 
	#SN_sshSîvî
 "£cuªShñlSîvî"

	)

1606 
	#LN_sshSîvî
 "SSH Sîvî"

	)

1607 
	#NID_sshSîvî
 1026

	)

1608 
	#OBJ_sshSîvî
 
OBJ_id_kp
,22L

	)

1610 
	#SN_£ndRouãr
 "£ndRouãr"

	)

1611 
	#LN_£ndRouãr
 "Síd Rouãr"

	)

1612 
	#NID_£ndRouãr
 1027

	)

1613 
	#OBJ_£ndRouãr
 
OBJ_id_kp
,23L

	)

1615 
	#SN_£ndProxõdRouãr
 "£ndProxõdRouãr"

	)

1616 
	#LN_£ndProxõdRouãr
 "Síd Proxõd Rouãr"

	)

1617 
	#NID_£ndProxõdRouãr
 1028

	)

1618 
	#OBJ_£ndProxõdRouãr
 
OBJ_id_kp
,24L

	)

1620 
	#SN_£ndOw√r
 "£ndOw√r"

	)

1621 
	#LN_£ndOw√r
 "Síd Ow√r"

	)

1622 
	#NID_£ndOw√r
 1029

	)

1623 
	#OBJ_£ndOw√r
 
OBJ_id_kp
,25L

	)

1625 
	#SN_£ndProxõdOw√r
 "£ndProxõdOw√r"

	)

1626 
	#LN_£ndProxõdOw√r
 "Síd Proxõd Ow√r"

	)

1627 
	#NID_£ndProxõdOw√r
 1030

	)

1628 
	#OBJ_£ndProxõdOw√r
 
OBJ_id_kp
,26L

	)

1630 
	#SN_cmcCA
 "cmcCA"

	)

1631 
	#LN_cmcCA
 "CMC Cîtifiˇã Auth‹ôy"

	)

1632 
	#NID_cmcCA
 1131

	)

1633 
	#OBJ_cmcCA
 
OBJ_id_kp
,27L

	)

1635 
	#SN_cmcRA
 "cmcRA"

	)

1636 
	#LN_cmcRA
 "CMC Regi°øti⁄ Auth‹ôy"

	)

1637 
	#NID_cmcRA
 1132

	)

1638 
	#OBJ_cmcRA
 
OBJ_id_kp
,28L

	)

1640 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1641 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1642 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1644 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1645 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1646 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1648 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1649 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1650 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1652 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1653 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1654 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1656 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1657 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1658 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1660 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1661 
	#NID_id_ô_cuºítCRL
 303

	)

1662 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1664 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1665 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1666 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1668 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1669 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1670 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1672 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1673 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1674 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1676 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1677 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1678 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1680 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1681 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1682 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1684 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1685 
	#NID_id_ô_ªvPas•hø£
 309

	)

1686 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1688 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1689 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1690 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1692 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1693 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1694 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1696 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1697 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1698 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1700 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1701 
	#NID_id_ô_suµL™gTags
 784

	)

1702 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1704 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1705 
	#NID_id_ªgCål
 313

	)

1706 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1708 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1709 
	#NID_id_ªgInfo
 314

	)

1710 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1712 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1713 
	#NID_id_ªgCål_ªgTokí
 315

	)

1714 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1716 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1717 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1718 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1720 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1721 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1722 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1724 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1725 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1726 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1728 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1729 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1730 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1732 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1733 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1734 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1736 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1737 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1738 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1740 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1741 
	#NID_id_ªgInfo_˚πReq
 322

	)

1742 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1744 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1745 
	#NID_id_Æg_des40
 323

	)

1746 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1748 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1749 
	#NID_id_Æg_noSig«tuª
 324

	)

1750 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1752 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1753 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1754 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1756 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1757 
	#NID_id_Æg_dh_p›
 326

	)

1758 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1760 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1761 
	#NID_id_cmc_°©usInfo
 327

	)

1762 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1764 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1765 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1766 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1768 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1769 
	#NID_id_cmc_idítôyProof
 329

	)

1770 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1772 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1773 
	#NID_id_cmc_d©aRëu∫
 330

	)

1774 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1776 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1777 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1778 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1780 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1781 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1782 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1784 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1785 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1786 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1788 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1789 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1790 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1792 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1793 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1794 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1796 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1797 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1798 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1800 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1801 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1802 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1804 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1805 
	#NID_id_cmc_gëCît
 338

	)

1806 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1808 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1809 
	#NID_id_cmc_gëCRL
 339

	)

1810 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1812 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1813 
	#NID_id_cmc_ªvokeReque°
 340

	)

1814 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1816 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1817 
	#NID_id_cmc_ªgInfo
 341

	)

1818 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1820 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1821 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1822 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1824 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1825 
	#NID_id_cmc_quîyPídög
 343

	)

1826 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1828 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1829 
	#NID_id_cmc_p›LökR™dom
 344

	)

1830 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1832 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1833 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1834 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1836 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1837 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1838 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1840 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1841 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1842 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1844 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1845 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1846 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1847 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1849 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1850 
	#NID_id_pda_d©eOfBúth
 348

	)

1851 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1853 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1854 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1855 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1857 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1858 
	#NID_id_pda_gídî
 351

	)

1859 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1861 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1862 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1863 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1865 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1866 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1867 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1869 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1870 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1871 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1873 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1874 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1875 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1877 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1878 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1879 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1881 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1882 
	#NID_id_aˇ_group
 357

	)

1883 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1885 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1886 
	#NID_id_aˇ_rﬁe
 358

	)

1887 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1889 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1890 
	#NID_id_aˇ_ícAârs
 399

	)

1891 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1893 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1894 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1895 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1897 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1898 
	#NID_id_c˘_¸s
 360

	)

1899 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1901 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1902 
	#NID_id_c˘_PKID©a
 361

	)

1903 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1905 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1906 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1907 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1909 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1910 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1911 
	#NID_id_µl_™yL™guage
 664

	)

1912 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1914 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1915 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1916 
	#NID_id_µl_öhîôAŒ
 665

	)

1917 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1919 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1920 
	#LN_Indïídít
 "Indïídít"

	)

1921 
	#NID_Indïídít
 667

	)

1922 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1924 
	#SN_ad_OCSP
 "OCSP"

	)

1925 
	#LN_ad_OCSP
 "OCSP"

	)

1926 
	#NID_ad_OCSP
 178

	)

1927 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1929 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1930 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1931 
	#NID_ad_ˇ_issuîs
 179

	)

1932 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1934 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1935 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1936 
	#NID_ad_timeSèmpög
 363

	)

1937 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1939 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1940 
	#LN_ad_dvcs
 "ad dvcs"

	)

1941 
	#NID_ad_dvcs
 364

	)

1942 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1944 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1945 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1946 
	#NID_ˇRïosô‹y
 785

	)

1947 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1949 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1951 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1952 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1953 
	#NID_id_pkix_OCSP_basic
 365

	)

1954 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1956 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1957 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1958 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1959 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1961 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1962 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1963 
	#NID_id_pkix_OCSP_CæID
 367

	)

1964 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1966 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1967 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1968 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1969 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1971 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1972 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1973 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1974 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1976 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1977 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1978 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1979 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1981 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1982 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1983 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1984 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1986 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1987 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1988 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1989 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1991 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1992 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1993 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1995 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1996 
	#NID_id_pkix_OCSP_∑th
 374

	)

1997 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1999 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

2000 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

2001 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

2002 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

2004 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

2005 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

2006 
	#NID_Æg‹ôhm
 376

	)

2007 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

2009 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

2010 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

2011 
	#NID_md5WôhRSA
 104

	)

2012 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

2014 
	#SN_des_ecb
 "DES-ECB"

	)

2015 
	#LN_des_ecb
 "des-ecb"

	)

2016 
	#NID_des_ecb
 29

	)

2017 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

2019 
	#SN_des_cbc
 "DES-CBC"

	)

2020 
	#LN_des_cbc
 "des-cbc"

	)

2021 
	#NID_des_cbc
 31

	)

2022 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

2024 
	#SN_des_ofb64
 "DES-OFB"

	)

2025 
	#LN_des_ofb64
 "des-ofb"

	)

2026 
	#NID_des_ofb64
 45

	)

2027 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

2029 
	#SN_des_cfb64
 "DES-CFB"

	)

2030 
	#LN_des_cfb64
 "des-cfb"

	)

2031 
	#NID_des_cfb64
 30

	)

2032 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

2034 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

2035 
	#NID_rßSig«tuª
 377

	)

2036 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

2038 
	#SN_dß_2
 "DSA-ﬁd"

	)

2039 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

2040 
	#NID_dß_2
 67

	)

2041 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

2043 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

2044 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

2045 
	#NID_dßWôhSHA
 66

	)

2046 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

2048 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

2049 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

2050 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

2051 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

2053 
	#SN_des_ede_ecb
 "DES-EDE"

	)

2054 
	#LN_des_ede_ecb
 "des-ede"

	)

2055 
	#NID_des_ede_ecb
 32

	)

2056 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

2058 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

2059 
	#LN_des_ede3_ecb
 "des-ede3"

	)

2060 
	#NID_des_ede3_ecb
 33

	)

2062 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

2063 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

2064 
	#NID_des_ede_cbc
 43

	)

2066 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

2067 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

2068 
	#NID_des_ede_cfb64
 60

	)

2070 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

2071 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

2072 
	#NID_des_ede3_cfb64
 61

	)

2074 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

2075 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

2076 
	#NID_des_ede_ofb64
 62

	)

2078 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

2079 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

2080 
	#NID_des_ede3_ofb64
 63

	)

2082 
	#SN_desx_cbc
 "DESX-CBC"

	)

2083 
	#LN_desx_cbc
 "desx-cbc"

	)

2084 
	#NID_desx_cbc
 80

	)

2086 
	#SN_sha
 "SHA"

	)

2087 
	#LN_sha
 "sha"

	)

2088 
	#NID_sha
 41

	)

2089 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2091 
	#SN_sha1
 "SHA1"

	)

2092 
	#LN_sha1
 "sha1"

	)

2093 
	#NID_sha1
 64

	)

2094 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2096 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2097 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2098 
	#NID_dßWôhSHA1_2
 70

	)

2099 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2101 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2102 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2103 
	#NID_sha1WôhRSA
 115

	)

2104 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2106 
	#SN_rùemd160
 "RIPEMD160"

	)

2107 
	#LN_rùemd160
 "rùemd160"

	)

2108 
	#NID_rùemd160
 117

	)

2109 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2111 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2112 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2113 
	#NID_rùemd160WôhRSA
 119

	)

2114 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2116 
	#SN_bœke2b512
 "BLAKE2b512"

	)

2117 
	#LN_bœke2b512
 "bœke2b512"

	)

2118 
	#NID_bœke2b512
 1056

	)

2119 
	#OBJ_bœke2b512
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,1L,16L

	)

2121 
	#SN_bœke2s256
 "BLAKE2s256"

	)

2122 
	#LN_bœke2s256
 "bœke2s256"

	)

2123 
	#NID_bœke2s256
 1057

	)

2124 
	#OBJ_bœke2s256
 1L,3L,6L,1L,4L,1L,1722L,12L,2L,2L,8L

	)

2126 
	#SN_sx√t
 "SXNëID"

	)

2127 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2128 
	#NID_sx√t
 143

	)

2129 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2131 
	#SN_X500
 "X500"

	)

2132 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2133 
	#NID_X500
 11

	)

2134 
	#OBJ_X500
 2L,5L

	)

2136 
	#SN_X509
 "X509"

	)

2137 
	#NID_X509
 12

	)

2138 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2140 
	#SN_comm⁄Name
 "CN"

	)

2141 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2142 
	#NID_comm⁄Name
 13

	)

2143 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2145 
	#SN_su∫ame
 "SN"

	)

2146 
	#LN_su∫ame
 "su∫ame"

	)

2147 
	#NID_su∫ame
 100

	)

2148 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2150 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2151 
	#NID_£rülNumbî
 105

	)

2152 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2154 
	#SN_cou¡ryName
 "C"

	)

2155 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2156 
	#NID_cou¡ryName
 14

	)

2157 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2159 
	#SN_loˇlôyName
 "L"

	)

2160 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2161 
	#NID_loˇlôyName
 15

	)

2162 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2164 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2165 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2166 
	#NID_°©eOrProvö˚Name
 16

	)

2167 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2169 
	#SN_°ªëAddªss
 "°ªë"

	)

2170 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2171 
	#NID_°ªëAddªss
 660

	)

2172 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2174 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2175 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2176 
	#NID_‹g™iz©i⁄Name
 17

	)

2177 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2179 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2180 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2181 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2182 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2184 
	#SN_tôÀ
 "tôÀ"

	)

2185 
	#LN_tôÀ
 "tôÀ"

	)

2186 
	#NID_tôÀ
 106

	)

2187 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2189 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2190 
	#NID_des¸ùti⁄
 107

	)

2191 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2193 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2194 
	#NID_£¨chGuide
 859

	)

2195 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2197 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2198 
	#NID_busöessC©eg‹y
 860

	)

2199 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2201 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2202 
	#NID_po°ÆAddªss
 861

	)

2203 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2205 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2206 
	#NID_po°ÆCode
 661

	)

2207 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2209 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2210 
	#NID_po°Offi˚Box
 862

	)

2211 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2213 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2214 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2215 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2217 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2218 
	#NID_ãÀph⁄eNumbî
 864

	)

2219 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2221 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2222 
	#NID_ãÀxNumbî
 865

	)

2223 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2225 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2226 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2227 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2229 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2230 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2231 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2233 
	#LN_x121Addªss
 "x121Addªss"

	)

2234 
	#NID_x121Addªss
 868

	)

2235 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2237 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2238 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2239 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2241 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2242 
	#NID_ªgi°îedAddªss
 870

	)

2243 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2245 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2246 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2247 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2249 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2250 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2251 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2253 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2254 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2255 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2257 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2258 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2259 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2261 
	#SN_membî
 "membî"

	)

2262 
	#NID_membî
 875

	)

2263 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2265 
	#SN_ow√r
 "ow√r"

	)

2266 
	#NID_ow√r
 876

	)

2267 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2269 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2270 
	#NID_rﬁeOccu∑¡
 877

	)

2271 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2273 
	#SN_£eAlso
 "£eAlso"

	)

2274 
	#NID_£eAlso
 878

	)

2275 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2277 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2278 
	#NID_u£rPassw‹d
 879

	)

2279 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2281 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2282 
	#NID_u£rCîtifiˇã
 880

	)

2283 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2285 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2286 
	#NID_cACîtifiˇã
 881

	)

2287 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2289 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2290 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2291 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2293 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2294 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2295 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2297 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2298 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2299 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2301 
	#SN_«me
 "«me"

	)

2302 
	#LN_«me
 "«me"

	)

2303 
	#NID_«me
 173

	)

2304 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2306 
	#SN_givíName
 "GN"

	)

2307 
	#LN_givíName
 "givíName"

	)

2308 
	#NID_givíName
 99

	)

2309 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2311 
	#SN_öôüls
 "öôüls"

	)

2312 
	#LN_öôüls
 "öôüls"

	)

2313 
	#NID_öôüls
 101

	)

2314 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2316 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2317 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2318 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2320 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2321 
	#NID_x500UniqueIdítifõr
 503

	)

2322 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2324 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2325 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2326 
	#NID_dnQuÆifõr
 174

	)

2327 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2329 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2330 
	#NID_íh™˚dSórchGuide
 885

	)

2331 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2333 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2334 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2335 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2337 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2338 
	#NID_di°öguishedName
 887

	)

2339 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2341 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2342 
	#NID_uniqueMembî
 888

	)

2343 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2345 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2346 
	#NID_hou£Idítifõr
 889

	)

2347 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2349 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2350 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2351 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2353 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2354 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2355 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2357 
	#SN_dmdName
 "dmdName"

	)

2358 
	#NID_dmdName
 892

	)

2359 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2361 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2362 
	#NID_p£ud⁄ym
 510

	)

2363 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2365 
	#SN_rﬁe
 "rﬁe"

	)

2366 
	#LN_rﬁe
 "rﬁe"

	)

2367 
	#NID_rﬁe
 400

	)

2368 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2370 
	#LN_‹g™iz©i⁄Idítifõr
 "‹g™iz©i⁄Idítifõr"

	)

2371 
	#NID_‹g™iz©i⁄Idítifõr
 1089

	)

2372 
	#OBJ_‹g™iz©i⁄Idítifõr
 
OBJ_X509
,97L

	)

2374 
	#SN_cou¡ryCode3c
 "c3"

	)

2375 
	#LN_cou¡ryCode3c
 "cou¡ryCode3c"

	)

2376 
	#NID_cou¡ryCode3c
 1090

	)

2377 
	#OBJ_cou¡ryCode3c
 
OBJ_X509
,98L

	)

2379 
	#SN_cou¡ryCode3n
 "n3"

	)

2380 
	#LN_cou¡ryCode3n
 "cou¡ryCode3n"

	)

2381 
	#NID_cou¡ryCode3n
 1091

	)

2382 
	#OBJ_cou¡ryCode3n
 
OBJ_X509
,99L

	)

2384 
	#LN_dnsName
 "dnsName"

	)

2385 
	#NID_dnsName
 1092

	)

2386 
	#OBJ_dnsName
 
OBJ_X509
,100L

	)

2388 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2389 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2390 
	#NID_X500Æg‹ôhms
 378

	)

2391 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2393 
	#SN_rß
 "RSA"

	)

2394 
	#LN_rß
 "rß"

	)

2395 
	#NID_rß
 19

	)

2396 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2398 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2399 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2400 
	#NID_mdc2WôhRSA
 96

	)

2401 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2403 
	#SN_mdc2
 "MDC2"

	)

2404 
	#LN_mdc2
 "mdc2"

	)

2405 
	#NID_mdc2
 95

	)

2406 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2408 
	#SN_id_˚
 "id-˚"

	)

2409 
	#NID_id_˚
 81

	)

2410 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2412 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2413 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2414 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2415 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2417 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2418 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2419 
	#NID_subje˘_key_idítifõr
 82

	)

2420 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2422 
	#SN_key_ußge
 "keyUßge"

	)

2423 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2424 
	#NID_key_ußge
 83

	)

2425 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2427 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2428 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2429 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2430 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2432 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2433 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2434 
	#NID_subje˘_Æt_«me
 85

	)

2435 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2437 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2438 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2439 
	#NID_issuî_Æt_«me
 86

	)

2440 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2442 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2443 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2444 
	#NID_basic_c⁄°øöts
 87

	)

2445 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2447 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2448 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2449 
	#NID_¸l_numbî
 88

	)

2450 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2452 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2453 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2454 
	#NID_¸l_ªas⁄
 141

	)

2455 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2457 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2458 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2459 
	#NID_övÆidôy_d©e
 142

	)

2460 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2462 
	#SN_dñè_¸l
 "dñèCRL"

	)

2463 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2464 
	#NID_dñè_¸l
 140

	)

2465 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2467 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2468 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°ributi⁄ Poöt"

	)

2469 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2470 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2472 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2473 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2474 
	#NID_˚πifiˇã_issuî
 771

	)

2475 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2477 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2478 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2479 
	#NID_«me_c⁄°øöts
 666

	)

2480 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2482 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2483 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2484 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2485 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2487 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2488 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2489 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2490 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2492 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2493 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2494 
	#NID_™y_pﬁicy
 746

	)

2495 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2497 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2498 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2499 
	#NID_pﬁicy_m≠pögs
 747

	)

2500 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2502 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2503 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2504 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2505 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2507 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2508 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2509 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2510 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2512 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2513 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2514 
	#NID_ext_key_ußge
 126

	)

2515 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2517 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2518 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2519 
	#NID_‰eshe°_¸l
 857

	)

2520 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2522 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2523 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2524 
	#NID_öhibô_™y_pﬁicy
 748

	)

2525 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2527 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2528 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2529 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2530 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2532 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2533 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2534 
	#NID_no_ªv_avaû
 403

	)

2535 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2537 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2538 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2539 
	#NID_™yExãndedKeyUßge
 910

	)

2540 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2542 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2543 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2544 
	#NID_√tsˇ≥
 57

	)

2545 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2547 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2548 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2549 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2550 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2552 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2553 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2554 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2555 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2557 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2558 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2559 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2560 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2562 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2563 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2564 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2565 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2567 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2568 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2569 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2570 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2572 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2573 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2574 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2575 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2577 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2578 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2579 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2580 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2582 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2583 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2584 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2585 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2587 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2588 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2589 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2590 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2592 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2593 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2594 
	#NID_√tsˇ≥_commít
 78

	)

2595 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2597 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2598 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2599 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2600 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2602 
	#SN_ns_sgc
 "nsSGC"

	)

2603 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2604 
	#NID_ns_sgc
 139

	)

2605 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2607 
	#SN_‹g
 "ORG"

	)

2608 
	#LN_‹g
 "‹g"

	)

2609 
	#NID_‹g
 379

	)

2610 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2612 
	#SN_dod
 "DOD"

	)

2613 
	#LN_dod
 "dod"

	)

2614 
	#NID_dod
 380

	)

2615 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2617 
	#SN_ü«
 "IANA"

	)

2618 
	#LN_ü«
 "ü«"

	)

2619 
	#NID_ü«
 381

	)

2620 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2622 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2624 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2625 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2626 
	#NID_Dúe˘‹y
 382

	)

2627 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2629 
	#SN_M™agemít
 "mgmt"

	)

2630 
	#LN_M™agemít
 "M™agemít"

	)

2631 
	#NID_M™agemít
 383

	)

2632 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2634 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2635 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2636 
	#NID_Ex≥rimíèl
 384

	)

2637 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2639 
	#SN_Priv©e
 "¥iv©e"

	)

2640 
	#LN_Priv©e
 "Priv©e"

	)

2641 
	#NID_Priv©e
 385

	)

2642 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2644 
	#SN_Securôy
 "£curôy"

	)

2645 
	#LN_Securôy
 "Securôy"

	)

2646 
	#NID_Securôy
 386

	)

2647 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2649 
	#SN_SNMPv2
 "¢mpv2"

	)

2650 
	#LN_SNMPv2
 "SNMPv2"

	)

2651 
	#NID_SNMPv2
 387

	)

2652 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2654 
	#LN_Maû
 "Maû"

	)

2655 
	#NID_Maû
 388

	)

2656 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2658 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2659 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2660 
	#NID_E¡î¥i£s
 389

	)

2661 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2663 
	#SN_dcObje˘
 "dcobje˘"

	)

2664 
	#LN_dcObje˘
 "dcObje˘"

	)

2665 
	#NID_dcObje˘
 390

	)

2666 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2668 
	#SN_mime_mhs
 "mime-mhs"

	)

2669 
	#LN_mime_mhs
 "MIME MHS"

	)

2670 
	#NID_mime_mhs
 504

	)

2671 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2673 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2674 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2675 
	#NID_mime_mhs_hódögs
 505

	)

2676 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2678 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2679 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2680 
	#NID_mime_mhs_bodõs
 506

	)

2681 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2683 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2684 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2685 
	#NID_id_hex_∑πül_mesßge
 507

	)

2686 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2688 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2689 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2690 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2691 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2693 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2694 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2695 
	#NID_zlib_com¥essi⁄
 125

	)

2696 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2698 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2700 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2702 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2704 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2705 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2706 
	#NID_´s_128_ecb
 418

	)

2707 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2709 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2710 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2711 
	#NID_´s_128_cbc
 419

	)

2712 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2714 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2715 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2716 
	#NID_´s_128_ofb128
 420

	)

2717 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2719 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2720 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2721 
	#NID_´s_128_cfb128
 421

	)

2722 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2724 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2725 
	#NID_id_´s128_wøp
 788

	)

2726 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2728 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2729 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2730 
	#NID_´s_128_gcm
 895

	)

2731 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2733 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2734 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2735 
	#NID_´s_128_ccm
 896

	)

2736 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2738 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2739 
	#NID_id_´s128_wøp_∑d
 897

	)

2740 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2742 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2743 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2744 
	#NID_´s_192_ecb
 422

	)

2745 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2747 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2748 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2749 
	#NID_´s_192_cbc
 423

	)

2750 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2752 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2753 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2754 
	#NID_´s_192_ofb128
 424

	)

2755 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2757 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2758 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2759 
	#NID_´s_192_cfb128
 425

	)

2760 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2762 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2763 
	#NID_id_´s192_wøp
 789

	)

2764 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2766 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2767 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2768 
	#NID_´s_192_gcm
 898

	)

2769 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2771 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2772 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2773 
	#NID_´s_192_ccm
 899

	)

2774 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2776 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2777 
	#NID_id_´s192_wøp_∑d
 900

	)

2778 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2780 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2781 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2782 
	#NID_´s_256_ecb
 426

	)

2783 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2785 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2786 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2787 
	#NID_´s_256_cbc
 427

	)

2788 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2790 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2791 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2792 
	#NID_´s_256_ofb128
 428

	)

2793 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2795 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2796 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2797 
	#NID_´s_256_cfb128
 429

	)

2798 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2800 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2801 
	#NID_id_´s256_wøp
 790

	)

2802 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2804 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2805 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2806 
	#NID_´s_256_gcm
 901

	)

2807 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2809 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2810 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2811 
	#NID_´s_256_ccm
 902

	)

2812 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2814 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2815 
	#NID_id_´s256_wøp_∑d
 903

	)

2816 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2818 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2819 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2820 
	#NID_´s_128_xts
 913

	)

2821 
	#OBJ_´s_128_xts
 
OBJ_õì_siswg
,0L,1L,1L

	)

2823 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2824 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2825 
	#NID_´s_256_xts
 914

	)

2826 
	#OBJ_´s_256_xts
 
OBJ_õì_siswg
,0L,1L,2L

	)

2828 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2829 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2830 
	#NID_´s_128_cfb1
 650

	)

2832 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2833 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2834 
	#NID_´s_192_cfb1
 651

	)

2836 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2837 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2838 
	#NID_´s_256_cfb1
 652

	)

2840 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2841 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2842 
	#NID_´s_128_cfb8
 653

	)

2844 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2845 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2846 
	#NID_´s_192_cfb8
 654

	)

2848 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2849 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2850 
	#NID_´s_256_cfb8
 655

	)

2852 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2853 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2854 
	#NID_´s_128_˘r
 904

	)

2856 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2857 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2858 
	#NID_´s_192_˘r
 905

	)

2860 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2861 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2862 
	#NID_´s_256_˘r
 906

	)

2864 
	#SN_´s_128_ocb
 "AES-128-OCB"

	)

2865 
	#LN_´s_128_ocb
 "´s-128-ocb"

	)

2866 
	#NID_´s_128_ocb
 958

	)

2868 
	#SN_´s_192_ocb
 "AES-192-OCB"

	)

2869 
	#LN_´s_192_ocb
 "´s-192-ocb"

	)

2870 
	#NID_´s_192_ocb
 959

	)

2872 
	#SN_´s_256_ocb
 "AES-256-OCB"

	)

2873 
	#LN_´s_256_ocb
 "´s-256-ocb"

	)

2874 
	#NID_´s_256_ocb
 960

	)

2876 
	#SN_des_cfb1
 "DES-CFB1"

	)

2877 
	#LN_des_cfb1
 "des-cfb1"

	)

2878 
	#NID_des_cfb1
 656

	)

2880 
	#SN_des_cfb8
 "DES-CFB8"

	)

2881 
	#LN_des_cfb8
 "des-cfb8"

	)

2882 
	#NID_des_cfb8
 657

	)

2884 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2885 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2886 
	#NID_des_ede3_cfb1
 658

	)

2888 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2889 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2890 
	#NID_des_ede3_cfb8
 659

	)

2892 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2894 
	#SN_sha256
 "SHA256"

	)

2895 
	#LN_sha256
 "sha256"

	)

2896 
	#NID_sha256
 672

	)

2897 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2899 
	#SN_sha384
 "SHA384"

	)

2900 
	#LN_sha384
 "sha384"

	)

2901 
	#NID_sha384
 673

	)

2902 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2904 
	#SN_sha512
 "SHA512"

	)

2905 
	#LN_sha512
 "sha512"

	)

2906 
	#NID_sha512
 674

	)

2907 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2909 
	#SN_sha224
 "SHA224"

	)

2910 
	#LN_sha224
 "sha224"

	)

2911 
	#NID_sha224
 675

	)

2912 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2914 
	#SN_sha512_224
 "SHA512-224"

	)

2915 
	#LN_sha512_224
 "sha512-224"

	)

2916 
	#NID_sha512_224
 1094

	)

2917 
	#OBJ_sha512_224
 
OBJ_ni°_hashÆgs
,5L

	)

2919 
	#SN_sha512_256
 "SHA512-256"

	)

2920 
	#LN_sha512_256
 "sha512-256"

	)

2921 
	#NID_sha512_256
 1095

	)

2922 
	#OBJ_sha512_256
 
OBJ_ni°_hashÆgs
,6L

	)

2924 
	#SN_sha3_224
 "SHA3-224"

	)

2925 
	#LN_sha3_224
 "sha3-224"

	)

2926 
	#NID_sha3_224
 1096

	)

2927 
	#OBJ_sha3_224
 
OBJ_ni°_hashÆgs
,7L

	)

2929 
	#SN_sha3_256
 "SHA3-256"

	)

2930 
	#LN_sha3_256
 "sha3-256"

	)

2931 
	#NID_sha3_256
 1097

	)

2932 
	#OBJ_sha3_256
 
OBJ_ni°_hashÆgs
,8L

	)

2934 
	#SN_sha3_384
 "SHA3-384"

	)

2935 
	#LN_sha3_384
 "sha3-384"

	)

2936 
	#NID_sha3_384
 1098

	)

2937 
	#OBJ_sha3_384
 
OBJ_ni°_hashÆgs
,9L

	)

2939 
	#SN_sha3_512
 "SHA3-512"

	)

2940 
	#LN_sha3_512
 "sha3-512"

	)

2941 
	#NID_sha3_512
 1099

	)

2942 
	#OBJ_sha3_512
 
OBJ_ni°_hashÆgs
,10L

	)

2944 
	#SN_shake128
 "SHAKE128"

	)

2945 
	#LN_shake128
 "shake128"

	)

2946 
	#NID_shake128
 1100

	)

2947 
	#OBJ_shake128
 
OBJ_ni°_hashÆgs
,11L

	)

2949 
	#SN_shake256
 "SHAKE256"

	)

2950 
	#LN_shake256
 "shake256"

	)

2951 
	#NID_shake256
 1101

	)

2952 
	#OBJ_shake256
 
OBJ_ni°_hashÆgs
,12L

	)

2954 
	#SN_hmac_sha3_224
 "id-hmacWôhSHA3-224"

	)

2955 
	#LN_hmac_sha3_224
 "hmac-sha3-224"

	)

2956 
	#NID_hmac_sha3_224
 1102

	)

2957 
	#OBJ_hmac_sha3_224
 
OBJ_ni°_hashÆgs
,13L

	)

2959 
	#SN_hmac_sha3_256
 "id-hmacWôhSHA3-256"

	)

2960 
	#LN_hmac_sha3_256
 "hmac-sha3-256"

	)

2961 
	#NID_hmac_sha3_256
 1103

	)

2962 
	#OBJ_hmac_sha3_256
 
OBJ_ni°_hashÆgs
,14L

	)

2964 
	#SN_hmac_sha3_384
 "id-hmacWôhSHA3-384"

	)

2965 
	#LN_hmac_sha3_384
 "hmac-sha3-384"

	)

2966 
	#NID_hmac_sha3_384
 1104

	)

2967 
	#OBJ_hmac_sha3_384
 
OBJ_ni°_hashÆgs
,15L

	)

2969 
	#SN_hmac_sha3_512
 "id-hmacWôhSHA3-512"

	)

2970 
	#LN_hmac_sha3_512
 "hmac-sha3-512"

	)

2971 
	#NID_hmac_sha3_512
 1105

	)

2972 
	#OBJ_hmac_sha3_512
 
OBJ_ni°_hashÆgs
,16L

	)

2974 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2976 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2977 
	#NID_dß_wôh_SHA224
 802

	)

2978 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2980 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2981 
	#NID_dß_wôh_SHA256
 803

	)

2982 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2984 
	#OBJ_sigAlgs
 
OBJ_ni°Alg‹ôhms
,3L

	)

2986 
	#SN_dß_wôh_SHA384
 "id-dß-wôh-sha384"

	)

2987 
	#LN_dß_wôh_SHA384
 "dß_wôh_SHA384"

	)

2988 
	#NID_dß_wôh_SHA384
 1106

	)

2989 
	#OBJ_dß_wôh_SHA384
 
OBJ_sigAlgs
,3L

	)

2991 
	#SN_dß_wôh_SHA512
 "id-dß-wôh-sha512"

	)

2992 
	#LN_dß_wôh_SHA512
 "dß_wôh_SHA512"

	)

2993 
	#NID_dß_wôh_SHA512
 1107

	)

2994 
	#OBJ_dß_wôh_SHA512
 
OBJ_sigAlgs
,4L

	)

2996 
	#SN_dß_wôh_SHA3_224
 "id-dß-wôh-sha3-224"

	)

2997 
	#LN_dß_wôh_SHA3_224
 "dß_wôh_SHA3-224"

	)

2998 
	#NID_dß_wôh_SHA3_224
 1108

	)

2999 
	#OBJ_dß_wôh_SHA3_224
 
OBJ_sigAlgs
,5L

	)

3001 
	#SN_dß_wôh_SHA3_256
 "id-dß-wôh-sha3-256"

	)

3002 
	#LN_dß_wôh_SHA3_256
 "dß_wôh_SHA3-256"

	)

3003 
	#NID_dß_wôh_SHA3_256
 1109

	)

3004 
	#OBJ_dß_wôh_SHA3_256
 
OBJ_sigAlgs
,6L

	)

3006 
	#SN_dß_wôh_SHA3_384
 "id-dß-wôh-sha3-384"

	)

3007 
	#LN_dß_wôh_SHA3_384
 "dß_wôh_SHA3-384"

	)

3008 
	#NID_dß_wôh_SHA3_384
 1110

	)

3009 
	#OBJ_dß_wôh_SHA3_384
 
OBJ_sigAlgs
,7L

	)

3011 
	#SN_dß_wôh_SHA3_512
 "id-dß-wôh-sha3-512"

	)

3012 
	#LN_dß_wôh_SHA3_512
 "dß_wôh_SHA3-512"

	)

3013 
	#NID_dß_wôh_SHA3_512
 1111

	)

3014 
	#OBJ_dß_wôh_SHA3_512
 
OBJ_sigAlgs
,8L

	)

3016 
	#SN_ecdß_wôh_SHA3_224
 "id-ecdß-wôh-sha3-224"

	)

3017 
	#LN_ecdß_wôh_SHA3_224
 "ecdß_wôh_SHA3-224"

	)

3018 
	#NID_ecdß_wôh_SHA3_224
 1112

	)

3019 
	#OBJ_ecdß_wôh_SHA3_224
 
OBJ_sigAlgs
,9L

	)

3021 
	#SN_ecdß_wôh_SHA3_256
 "id-ecdß-wôh-sha3-256"

	)

3022 
	#LN_ecdß_wôh_SHA3_256
 "ecdß_wôh_SHA3-256"

	)

3023 
	#NID_ecdß_wôh_SHA3_256
 1113

	)

3024 
	#OBJ_ecdß_wôh_SHA3_256
 
OBJ_sigAlgs
,10L

	)

3026 
	#SN_ecdß_wôh_SHA3_384
 "id-ecdß-wôh-sha3-384"

	)

3027 
	#LN_ecdß_wôh_SHA3_384
 "ecdß_wôh_SHA3-384"

	)

3028 
	#NID_ecdß_wôh_SHA3_384
 1114

	)

3029 
	#OBJ_ecdß_wôh_SHA3_384
 
OBJ_sigAlgs
,11L

	)

3031 
	#SN_ecdß_wôh_SHA3_512
 "id-ecdß-wôh-sha3-512"

	)

3032 
	#LN_ecdß_wôh_SHA3_512
 "ecdß_wôh_SHA3-512"

	)

3033 
	#NID_ecdß_wôh_SHA3_512
 1115

	)

3034 
	#OBJ_ecdß_wôh_SHA3_512
 
OBJ_sigAlgs
,12L

	)

3036 
	#SN_RSA_SHA3_224
 "id-rßsß-pkcs1-v1_5-wôh-sha3-224"

	)

3037 
	#LN_RSA_SHA3_224
 "RSA-SHA3-224"

	)

3038 
	#NID_RSA_SHA3_224
 1116

	)

3039 
	#OBJ_RSA_SHA3_224
 
OBJ_sigAlgs
,13L

	)

3041 
	#SN_RSA_SHA3_256
 "id-rßsß-pkcs1-v1_5-wôh-sha3-256"

	)

3042 
	#LN_RSA_SHA3_256
 "RSA-SHA3-256"

	)

3043 
	#NID_RSA_SHA3_256
 1117

	)

3044 
	#OBJ_RSA_SHA3_256
 
OBJ_sigAlgs
,14L

	)

3046 
	#SN_RSA_SHA3_384
 "id-rßsß-pkcs1-v1_5-wôh-sha3-384"

	)

3047 
	#LN_RSA_SHA3_384
 "RSA-SHA3-384"

	)

3048 
	#NID_RSA_SHA3_384
 1118

	)

3049 
	#OBJ_RSA_SHA3_384
 
OBJ_sigAlgs
,15L

	)

3051 
	#SN_RSA_SHA3_512
 "id-rßsß-pkcs1-v1_5-wôh-sha3-512"

	)

3052 
	#LN_RSA_SHA3_512
 "RSA-SHA3-512"

	)

3053 
	#NID_RSA_SHA3_512
 1119

	)

3054 
	#OBJ_RSA_SHA3_512
 
OBJ_sigAlgs
,16L

	)

3056 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

3057 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

3058 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

3059 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

3061 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

3063 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

3064 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

3065 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

3066 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

3068 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

3069 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

3070 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

3071 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

3073 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

3074 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

3075 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

3076 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

3078 
	#SN_d©a
 "d©a"

	)

3079 
	#NID_d©a
 434

	)

3080 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

3082 
	#SN_pss
 "pss"

	)

3083 
	#NID_pss
 435

	)

3084 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

3086 
	#SN_u˛
 "u˛"

	)

3087 
	#NID_u˛
 436

	)

3088 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

3090 
	#SN_pûŸ
 "pûŸ"

	)

3091 
	#NID_pûŸ
 437

	)

3092 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

3094 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

3095 
	#NID_pûŸAâribuãTy≥
 438

	)

3096 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

3098 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

3099 
	#NID_pûŸAâribuãSy¡ax
 439

	)

3100 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

3102 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

3103 
	#NID_pûŸObje˘Cœss
 440

	)

3104 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

3106 
	#LN_pûŸGroups
 "pûŸGroups"

	)

3107 
	#NID_pûŸGroups
 441

	)

3108 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

3110 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

3111 
	#NID_iA5SåögSy¡ax
 442

	)

3112 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

3114 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

3115 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

3116 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

3118 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

3119 
	#NID_pûŸObje˘
 444

	)

3120 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

3122 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

3123 
	#NID_pûŸPîs⁄
 445

	)

3124 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

3126 
	#SN_accou¡
 "accou¡"

	)

3127 
	#NID_accou¡
 446

	)

3128 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

3130 
	#SN_documít
 "documít"

	)

3131 
	#NID_documít
 447

	)

3132 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

3134 
	#SN_room
 "room"

	)

3135 
	#NID_room
 448

	)

3136 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

3138 
	#LN_documítSîõs
 "documítSîõs"

	)

3139 
	#NID_documítSîõs
 449

	)

3140 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

3142 
	#SN_Domaö
 "domaö"

	)

3143 
	#LN_Domaö
 "Domaö"

	)

3144 
	#NID_Domaö
 392

	)

3145 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

3147 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

3148 
	#NID_rFC822loˇlP¨t
 450

	)

3149 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

3151 
	#LN_dNSDomaö
 "dNSDomaö"

	)

3152 
	#NID_dNSDomaö
 451

	)

3153 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

3155 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

3156 
	#NID_domaöRñ©edObje˘
 452

	)

3157 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

3159 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

3160 
	#NID_‰õndlyCou¡ry
 453

	)

3161 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

3163 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

3164 
	#NID_sim∂eSecurôyObje˘
 454

	)

3165 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

3167 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

3168 
	#NID_pûŸOrg™iz©i⁄
 455

	)

3169 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

3171 
	#LN_pûŸDSA
 "pûŸDSA"

	)

3172 
	#NID_pûŸDSA
 456

	)

3173 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

3175 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

3176 
	#NID_quÆôyLabñÀdD©a
 457

	)

3177 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

3179 
	#SN_u£rId
 "UID"

	)

3180 
	#LN_u£rId
 "u£rId"

	)

3181 
	#NID_u£rId
 458

	)

3182 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

3184 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

3185 
	#NID_ãxtEncodedORAddªss
 459

	)

3186 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

3188 
	#SN_rfc822Maûbox
 "maû"

	)

3189 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

3190 
	#NID_rfc822Maûbox
 460

	)

3191 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

3193 
	#SN_öfo
 "öfo"

	)

3194 
	#NID_öfo
 461

	)

3195 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

3197 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

3198 
	#NID_ÁvourôeDrök
 462

	)

3199 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

3201 
	#LN_roomNumbî
 "roomNumbî"

	)

3202 
	#NID_roomNumbî
 463

	)

3203 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

3205 
	#SN_phŸo
 "phŸo"

	)

3206 
	#NID_phŸo
 464

	)

3207 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

3209 
	#LN_u£rCœss
 "u£rCœss"

	)

3210 
	#NID_u£rCœss
 465

	)

3211 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

3213 
	#SN_ho°
 "ho°"

	)

3214 
	#NID_ho°
 466

	)

3215 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

3217 
	#SN_m™agî
 "m™agî"

	)

3218 
	#NID_m™agî
 467

	)

3219 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

3221 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

3222 
	#NID_documítIdítifõr
 468

	)

3223 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

3225 
	#LN_documítTôÀ
 "documítTôÀ"

	)

3226 
	#NID_documítTôÀ
 469

	)

3227 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

3229 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

3230 
	#NID_documítVîsi⁄
 470

	)

3231 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

3233 
	#LN_documítAuth‹
 "documítAuth‹"

	)

3234 
	#NID_documítAuth‹
 471

	)

3235 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

3237 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

3238 
	#NID_documítLoˇti⁄
 472

	)

3239 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

3241 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

3242 
	#NID_homeTñïh⁄eNumbî
 473

	)

3243 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

3245 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

3246 
	#NID_£¸ë¨y
 474

	)

3247 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

3249 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

3250 
	#NID_ŸhîMaûbox
 475

	)

3251 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

3253 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

3254 
	#NID_œ°ModifõdTime
 476

	)

3255 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3257 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3258 
	#NID_œ°ModifõdBy
 477

	)

3259 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3261 
	#SN_domaöComp⁄ít
 "DC"

	)

3262 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3263 
	#NID_domaöComp⁄ít
 391

	)

3264 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3266 
	#LN_aRec‹d
 "aRec‹d"

	)

3267 
	#NID_aRec‹d
 478

	)

3268 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3270 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3271 
	#NID_pûŸAâribuãTy≥27
 479

	)

3272 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3274 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3275 
	#NID_mXRec‹d
 480

	)

3276 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3278 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3279 
	#NID_nSRec‹d
 481

	)

3280 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3282 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3283 
	#NID_sOARec‹d
 482

	)

3284 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3286 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3287 
	#NID_cNAMERec‹d
 483

	)

3288 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3290 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3291 
	#NID_assocüãdDomaö
 484

	)

3292 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3294 
	#LN_assocüãdName
 "assocüãdName"

	)

3295 
	#NID_assocüãdName
 485

	)

3296 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3298 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3299 
	#NID_homePo°ÆAddªss
 486

	)

3300 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3302 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3303 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3304 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3306 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3307 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3308 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3310 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3311 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3312 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3314 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3315 
	#NID_‰õndlyCou¡ryName
 490

	)

3316 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3318 
	#SN_uniqueIdítifõr
 "uid"

	)

3319 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

3320 
	#NID_uniqueIdítifõr
 102

	)

3321 
	#OBJ_uniqueIdítifõr
 
OBJ_pûŸAâribuãTy≥
,44L

	)

3323 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3324 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3325 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3327 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3328 
	#NID_j™ëMaûbox
 492

	)

3329 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3331 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3332 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3333 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3335 
	#LN_buûdögName
 "buûdögName"

	)

3336 
	#NID_buûdögName
 494

	)

3337 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3339 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3340 
	#NID_dSAQuÆôy
 495

	)

3341 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3343 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3344 
	#NID_sögÀLevñQuÆôy
 496

	)

3345 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3347 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3348 
	#NID_subåìMöimumQuÆôy
 497

	)

3349 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3351 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3352 
	#NID_subåìMaximumQuÆôy
 498

	)

3353 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3355 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3356 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3357 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3359 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3360 
	#NID_dITRedúe˘
 500

	)

3361 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3363 
	#SN_audio
 "audio"

	)

3364 
	#NID_audio
 501

	)

3365 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3367 
	#LN_documítPublishî
 "documítPublishî"

	)

3368 
	#NID_documítPublishî
 502

	)

3369 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3371 
	#SN_id_£t
 "id-£t"

	)

3372 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3373 
	#NID_id_£t
 512

	)

3374 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3376 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3377 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3378 
	#NID_£t_˘y≥
 513

	)

3379 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3381 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3382 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3383 
	#NID_£t_msgExt
 514

	)

3384 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3386 
	#SN_£t_©å
 "£t-©å"

	)

3387 
	#NID_£t_©å
 515

	)

3388 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3390 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3391 
	#NID_£t_pﬁicy
 516

	)

3392 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3394 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3395 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3396 
	#NID_£t_˚πExt
 517

	)

3397 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3399 
	#SN_£t_bønd
 "£t-bønd"

	)

3400 
	#NID_£t_bønd
 518

	)

3401 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3403 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3404 
	#NID_£t˘_PAND©a
 519

	)

3405 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3407 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3408 
	#NID_£t˘_PANTokí
 520

	)

3409 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3411 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3412 
	#NID_£t˘_PANO∆y
 521

	)

3413 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3415 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3416 
	#NID_£t˘_OID©a
 522

	)

3417 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3419 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3420 
	#NID_£t˘_PI
 523

	)

3421 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3423 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3424 
	#NID_£t˘_PID©a
 524

	)

3425 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3427 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3428 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3429 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3431 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3432 
	#NID_£t˘_HODI≈ut
 526

	)

3433 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3435 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3436 
	#NID_£t˘_AuthResBaggage
 527

	)

3437 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3439 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3440 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3441 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3443 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3444 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3445 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3447 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3448 
	#NID_£t˘_C≠TokíSeq
 530

	)

3449 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3451 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3452 
	#NID_£t˘_PInôResD©a
 531

	)

3453 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3455 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3456 
	#NID_£t˘_PI_TBS
 532

	)

3457 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3459 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3460 
	#NID_£t˘_PResD©a
 533

	)

3461 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3463 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3464 
	#NID_£t˘_AuthReqTBS
 534

	)

3465 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3467 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3468 
	#NID_£t˘_AuthResTBS
 535

	)

3469 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3471 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3472 
	#NID_£t˘_AuthResTBSX
 536

	)

3473 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3475 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3476 
	#NID_£t˘_AuthTokíTBS
 537

	)

3477 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3479 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3480 
	#NID_£t˘_C≠TokíD©a
 538

	)

3481 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3483 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3484 
	#NID_£t˘_C≠TokíTBS
 539

	)

3485 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3487 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3488 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3489 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3491 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3492 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3493 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3495 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3496 
	#NID_£t˘_AuthRevResD©a
 542

	)

3497 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3499 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3500 
	#NID_£t˘_AuthRevResTBS
 543

	)

3501 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3503 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3504 
	#NID_£t˘_C≠ReqTBS
 544

	)

3505 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3507 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3508 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3509 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3511 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3512 
	#NID_£t˘_C≠ResD©a
 546

	)

3513 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3515 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3516 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3517 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3519 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3520 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3521 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3523 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3524 
	#NID_£t˘_C≠RevResD©a
 549

	)

3525 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3527 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3528 
	#NID_£t˘_CªdReqTBS
 550

	)

3529 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3531 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3532 
	#NID_£t˘_CªdReqTBSX
 551

	)

3533 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3535 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3536 
	#NID_£t˘_CªdResD©a
 552

	)

3537 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3539 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3540 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3541 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3543 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3544 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3545 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3547 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3548 
	#NID_£t˘_CªdRevResD©a
 555

	)

3549 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3551 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3552 
	#NID_£t˘_PCîtReqD©a
 556

	)

3553 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3555 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3556 
	#NID_£t˘_PCîtResTBS
 557

	)

3557 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3559 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3560 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3561 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3563 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3564 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3565 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3567 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3568 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3569 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3571 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3572 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3573 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3575 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3576 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3577 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3579 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3580 
	#NID_£t˘_CîtReqD©a
 563

	)

3581 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3583 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3584 
	#NID_£t˘_CîtReqTBS
 564

	)

3585 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3587 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3588 
	#NID_£t˘_CîtResD©a
 565

	)

3589 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3591 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3592 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3593 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3595 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3596 
	#NID_£t˘_Eº‹TBS
 567

	)

3597 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3599 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3600 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3601 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3603 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3604 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3605 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3607 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3608 
	#NID_£t˘_AuthReqTBE
 570

	)

3609 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3611 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3612 
	#NID_£t˘_AuthResTBE
 571

	)

3613 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3615 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3616 
	#NID_£t˘_AuthResTBEX
 572

	)

3617 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3619 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3620 
	#NID_£t˘_AuthTokíTBE
 573

	)

3621 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3623 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3624 
	#NID_£t˘_C≠TokíTBE
 574

	)

3625 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3627 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3628 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3629 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3631 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3632 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3633 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3635 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3636 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3637 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3639 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3640 
	#NID_£t˘_AuthRevResTBE
 578

	)

3641 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3643 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3644 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3645 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3647 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3648 
	#NID_£t˘_C≠ReqTBE
 580

	)

3649 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3651 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3652 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3653 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3655 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3656 
	#NID_£t˘_C≠ResTBE
 582

	)

3657 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3659 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3660 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3661 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3663 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3664 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3665 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3667 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3668 
	#NID_£t˘_C≠RevResTBE
 585

	)

3669 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3671 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3672 
	#NID_£t˘_CªdReqTBE
 586

	)

3673 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3675 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3676 
	#NID_£t˘_CªdReqTBEX
 587

	)

3677 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3679 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3680 
	#NID_£t˘_CªdResTBE
 588

	)

3681 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3683 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3684 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3685 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3687 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3688 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3689 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3691 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3692 
	#NID_£t˘_CªdRevResTBE
 591

	)

3693 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3695 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3696 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3697 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3699 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3700 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3701 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3703 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3704 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3705 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3707 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3708 
	#NID_£t˘_CîtReqTBE
 595

	)

3709 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3711 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3712 
	#NID_£t˘_CîtReqTBEX
 596

	)

3713 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3715 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3716 
	#NID_£t˘_CîtResTBE
 597

	)

3717 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3719 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3720 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3721 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3723 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3724 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3725 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3727 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3728 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3729 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3731 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3732 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3733 
	#NID_£ãxt_gíCry±
 601

	)

3734 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3736 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3737 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3738 
	#NID_£ãxt_miAuth
 602

	)

3739 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3741 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3742 
	#NID_£ãxt_pöSecuª
 603

	)

3743 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3745 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3746 
	#NID_£ãxt_pöAny
 604

	)

3747 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3749 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3750 
	#NID_£ãxt_åack2
 605

	)

3751 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3753 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3754 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3755 
	#NID_£ãxt_cv
 606

	)

3756 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3758 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3759 
	#NID_£t_pﬁicy_roŸ
 607

	)

3760 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3762 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3763 
	#NID_£tCext_hashedRoŸ
 608

	)

3764 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3766 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3767 
	#NID_£tCext_˚πTy≥
 609

	)

3768 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3770 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3771 
	#NID_£tCext_mîchD©a
 610

	)

3772 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3774 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3775 
	#NID_£tCext_cCîtRequúed
 611

	)

3776 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3778 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3779 
	#NID_£tCext_tu¬ñög
 612

	)

3780 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3782 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3783 
	#NID_£tCext_£tExt
 613

	)

3784 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3786 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3787 
	#NID_£tCext_£tQuÆf
 614

	)

3788 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3790 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3791 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3792 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3794 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3795 
	#NID_£tCext_TokíIdítifõr
 616

	)

3796 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3798 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3799 
	#NID_£tCext_Tøck2D©a
 617

	)

3800 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3802 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3803 
	#NID_£tCext_TokíTy≥
 618

	)

3804 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3806 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3807 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3808 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3810 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3811 
	#NID_£tAâr_Cît
 620

	)

3812 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3814 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3815 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3816 
	#NID_£tAâr_PGWYˇp
 621

	)

3817 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3819 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3820 
	#NID_£tAâr_TokíTy≥
 622

	)

3821 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3823 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3824 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3825 
	#NID_£tAâr_IssC≠
 623

	)

3826 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3828 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3829 
	#NID_£t_roŸKeyThumb
 624

	)

3830 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3832 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3833 
	#NID_£t_addPﬁicy
 625

	)

3834 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3836 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3837 
	#NID_£tAâr_Tokí_EMV
 626

	)

3838 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3840 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3841 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3842 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3844 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3845 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3846 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3848 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3849 
	#NID_£tAâr_IssC≠_T2
 629

	)

3850 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3852 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3853 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3854 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3856 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3857 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3858 
	#NID_£tAâr_GíCry±grm
 631

	)

3859 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3861 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3862 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3863 
	#NID_£tAâr_T2Enc
 632

	)

3864 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3866 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3867 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3868 
	#NID_£tAâr_T2˛óπxt
 633

	)

3869 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3871 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3872 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3873 
	#NID_£tAâr_TokICCsig
 634

	)

3874 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3876 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3877 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3878 
	#NID_£tAâr_SecDevSig
 635

	)

3879 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3881 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3882 
	#NID_£t_bønd_IATA_ATA
 636

	)

3883 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3885 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3886 
	#NID_£t_bønd_Döîs
 637

	)

3887 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3889 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3890 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3891 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3893 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3894 
	#NID_£t_bønd_JCB
 639

	)

3895 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3897 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3898 
	#NID_£t_bønd_Viß
 640

	)

3899 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3901 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3902 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3903 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3905 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3906 
	#NID_£t_bønd_Novus
 642

	)

3907 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3909 
	#SN_des_cdmf
 "DES-CDMF"

	)

3910 
	#LN_des_cdmf
 "des-cdmf"

	)

3911 
	#NID_des_cdmf
 643

	)

3912 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3914 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3915 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3916 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3918 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3919 
	#LN_ù£c3
 "ù£c3"

	)

3920 
	#NID_ù£c3
 749

	)

3922 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3923 
	#LN_ù£c4
 "ù£c4"

	)

3924 
	#NID_ù£c4
 750

	)

3926 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3927 
	#NID_whúÕoﬁ
 804

	)

3928 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3930 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3931 
	#NID_¸y±›ro
 805

	)

3932 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3934 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3935 
	#NID_¸y±ocom
 806

	)

3936 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3938 
	#SN_id_tc26
 "id-tc26"

	)

3939 
	#NID_id_tc26
 974

	)

3940 
	#OBJ_id_tc26
 
OBJ_membî_body
,643L,7L,1L

	)

3942 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3943 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3944 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3945 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3947 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3948 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3949 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3950 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3952 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3953 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3954 
	#NID_id_Go°R3411_94
 809

	)

3955 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3957 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3958 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3959 
	#NID_id_HMACGo°R3411_94
 810

	)

3960 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3962 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3963 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3964 
	#NID_id_Go°R3410_2001
 811

	)

3965 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3967 
	#SN_id_Go°R3410_94
 "go°94"

	)

3968 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3969 
	#NID_id_Go°R3410_94
 812

	)

3970 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3972 
	#SN_id_Go°28147_89
 "go°89"

	)

3973 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3974 
	#NID_id_Go°28147_89
 813

	)

3975 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3977 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3978 
	#NID_go°89_˙t
 814

	)

3980 
	#SN_go°89_˙t_12
 "go°89-˙t-12"

	)

3981 
	#NID_go°89_˙t_12
 975

	)

3983 
	#SN_go°89_cbc
 "go°89-cbc"

	)

3984 
	#NID_go°89_cbc
 1009

	)

3986 
	#SN_go°89_ecb
 "go°89-ecb"

	)

3987 
	#NID_go°89_ecb
 1010

	)

3989 
	#SN_go°89_˘r
 "go°89-˘r"

	)

3990 
	#NID_go°89_˘r
 1011

	)

3992 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3993 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3994 
	#NID_id_Go°28147_89_MAC
 815

	)

3995 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3997 
	#SN_go°_mac_12
 "go°-mac-12"

	)

3998 
	#NID_go°_mac_12
 976

	)

4000 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

4001 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

4002 
	#NID_id_Go°R3411_94_¥f
 816

	)

4003 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

4005 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

4006 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

4007 
	#NID_id_Go°R3410_2001DH
 817

	)

4008 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

4010 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

4011 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

4012 
	#NID_id_Go°R3410_94DH
 818

	)

4013 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

4015 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

4016 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

4017 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

4019 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

4020 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

4021 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

4023 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

4024 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

4025 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

4027 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

4028 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

4029 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

4031 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

4032 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

4033 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

4035 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

4036 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

4037 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

4039 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

4040 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

4041 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

4043 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

4044 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

4045 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

4047 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

4048 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

4049 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

4051 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

4052 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

4053 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

4055 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

4056 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

4057 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

4059 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

4060 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

4061 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

4063 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

4064 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

4065 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

4067 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

4068 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

4069 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

4071 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

4072 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

4073 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

4075 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

4076 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

4077 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

4079 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

4080 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

4081 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

4083 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

4084 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

4085 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

4087 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

4088 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

4089 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

4091 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

4092 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

4093 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

4095 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

4096 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

4097 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

4099 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

4100 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

4101 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

4103 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

4104 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

4105 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

4107 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

4108 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

4109 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

4111 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

4112 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

4113 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

4115 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

4116 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

4117 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

4119 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

4120 
	#NID_id_Go°R3410_94_a
 845

	)

4121 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

4123 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

4124 
	#NID_id_Go°R3410_94_aBis
 846

	)

4125 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

4127 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

4128 
	#NID_id_Go°R3410_94_b
 847

	)

4129 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

4131 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

4132 
	#NID_id_Go°R3410_94_bBis
 848

	)

4133 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

4135 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

4136 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

4137 
	#NID_id_Go°28147_89_cc
 849

	)

4138 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

4140 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

4141 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

4142 
	#NID_id_Go°R3410_94_cc
 850

	)

4143 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

4145 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

4146 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

4147 
	#NID_id_Go°R3410_2001_cc
 851

	)

4148 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

4150 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

4151 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

4152 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

4153 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

4155 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

4156 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

4157 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

4158 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

4160 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

4161 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

4162 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

4163 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

4165 
	#SN_id_tc26_Æg‹ôhms
 "id-tc26-Æg‹ôhms"

	)

4166 
	#NID_id_tc26_Æg‹ôhms
 977

	)

4167 
	#OBJ_id_tc26_Æg‹ôhms
 
OBJ_id_tc26
,1L

	)

4169 
	#SN_id_tc26_sign
 "id-tc26-sign"

	)

4170 
	#NID_id_tc26_sign
 978

	)

4171 
	#OBJ_id_tc26_sign
 
OBJ_id_tc26_Æg‹ôhms
,1L

	)

4173 
	#SN_id_Go°R3410_2012_256
 "go°2012_256"

	)

4174 
	#LN_id_Go°R3410_2012_256
 "GOST R 34.10-2012 wôh 256 bô modulus"

	)

4175 
	#NID_id_Go°R3410_2012_256
 979

	)

4176 
	#OBJ_id_Go°R3410_2012_256
 
OBJ_id_tc26_sign
,1L

	)

4178 
	#SN_id_Go°R3410_2012_512
 "go°2012_512"

	)

4179 
	#LN_id_Go°R3410_2012_512
 "GOST R 34.10-2012 wôh 512 bô modulus"

	)

4180 
	#NID_id_Go°R3410_2012_512
 980

	)

4181 
	#OBJ_id_Go°R3410_2012_512
 
OBJ_id_tc26_sign
,2L

	)

4183 
	#SN_id_tc26_dige°
 "id-tc26-dige°"

	)

4184 
	#NID_id_tc26_dige°
 981

	)

4185 
	#OBJ_id_tc26_dige°
 
OBJ_id_tc26_Æg‹ôhms
,2L

	)

4187 
	#SN_id_Go°R3411_2012_256
 "md_go°12_256"

	)

4188 
	#LN_id_Go°R3411_2012_256
 "GOST R 34.11-2012 wôh 256 bô hash"

	)

4189 
	#NID_id_Go°R3411_2012_256
 982

	)

4190 
	#OBJ_id_Go°R3411_2012_256
 
OBJ_id_tc26_dige°
,2L

	)

4192 
	#SN_id_Go°R3411_2012_512
 "md_go°12_512"

	)

4193 
	#LN_id_Go°R3411_2012_512
 "GOST R 34.11-2012 wôh 512 bô hash"

	)

4194 
	#NID_id_Go°R3411_2012_512
 983

	)

4195 
	#OBJ_id_Go°R3411_2012_512
 
OBJ_id_tc26_dige°
,3L

	)

4197 
	#SN_id_tc26_signwôhdige°
 "id-tc26-signwôhdige°"

	)

4198 
	#NID_id_tc26_signwôhdige°
 984

	)

4199 
	#OBJ_id_tc26_signwôhdige°
 
OBJ_id_tc26_Æg‹ôhms
,3L

	)

4201 
	#SN_id_tc26_signwôhdige°_go°3410_2012_256
 "id-tc26-signwôhdige°-go°3410-2012-256"

	)

4202 
	#LN_id_tc26_signwôhdige°_go°3410_2012_256
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (256 bô)"

	)

4203 
	#NID_id_tc26_signwôhdige°_go°3410_2012_256
 985

	)

4204 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_256
 
OBJ_id_tc26_signwôhdige°
,2L

	)

4206 
	#SN_id_tc26_signwôhdige°_go°3410_2012_512
 "id-tc26-signwôhdige°-go°3410-2012-512"

	)

4207 
	#LN_id_tc26_signwôhdige°_go°3410_2012_512
 "GOST R 34.10-2012 wôh GOST R 34.11-2012 (512 bô)"

	)

4208 
	#NID_id_tc26_signwôhdige°_go°3410_2012_512
 986

	)

4209 
	#OBJ_id_tc26_signwôhdige°_go°3410_2012_512
 
OBJ_id_tc26_signwôhdige°
,3L

	)

4211 
	#SN_id_tc26_mac
 "id-tc26-mac"

	)

4212 
	#NID_id_tc26_mac
 987

	)

4213 
	#OBJ_id_tc26_mac
 
OBJ_id_tc26_Æg‹ôhms
,4L

	)

4215 
	#SN_id_tc26_hmac_go°_3411_2012_256
 "id-tc26-hmac-go°-3411-2012-256"

	)

4216 
	#LN_id_tc26_hmac_go°_3411_2012_256
 "HMAC GOST 34.11-2012 256 bô"

	)

4217 
	#NID_id_tc26_hmac_go°_3411_2012_256
 988

	)

4218 
	#OBJ_id_tc26_hmac_go°_3411_2012_256
 
OBJ_id_tc26_mac
,1L

	)

4220 
	#SN_id_tc26_hmac_go°_3411_2012_512
 "id-tc26-hmac-go°-3411-2012-512"

	)

4221 
	#LN_id_tc26_hmac_go°_3411_2012_512
 "HMAC GOST 34.11-2012 512 bô"

	)

4222 
	#NID_id_tc26_hmac_go°_3411_2012_512
 989

	)

4223 
	#OBJ_id_tc26_hmac_go°_3411_2012_512
 
OBJ_id_tc26_mac
,2L

	)

4225 
	#SN_id_tc26_cùhî
 "id-tc26-cùhî"

	)

4226 
	#NID_id_tc26_cùhî
 990

	)

4227 
	#OBJ_id_tc26_cùhî
 
OBJ_id_tc26_Æg‹ôhms
,5L

	)

4229 
	#SN_id_tc26_cùhî_go°r3412_2015_magma
 "id-tc26-cùhî-go°r3412-2015-magma"

	)

4230 
	#NID_id_tc26_cùhî_go°r3412_2015_magma
 1173

	)

4231 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma
 
OBJ_id_tc26_cùhî
,1L

	)

4233 
	#SN_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 "id-tc26-cùhî-go°r3412-2015-magma-˘ø˝km"

	)

4234 
	#NID_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 1174

	)

4235 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km
 
OBJ_id_tc26_cùhî_go°r3412_2015_magma
,1L

	)

4237 
	#SN_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 "id-tc26-cùhî-go°r3412-2015-magma-˘ø˝km-omac"

	)

4238 
	#NID_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 1175

	)

4239 
	#OBJ_id_tc26_cùhî_go°r3412_2015_magma_˘ø˝km_omac
 
OBJ_id_tc26_cùhî_go°r3412_2015_magma
,2L

	)

4241 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik
 "id-tc26-cùhî-go°r3412-2015-kuznyechik"

	)

4242 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik
 1176

	)

4243 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
 
OBJ_id_tc26_cùhî
,2L

	)

4245 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 "id-tc26-cùhî-go°r3412-2015-kuznyechik-˘ø˝km"

	)

4246 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 1177

	)

4247 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km
 
OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
,1L

	)

4249 
	#SN_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 "id-tc26-cùhî-go°r3412-2015-kuznyechik-˘ø˝km-omac"

	)

4250 
	#NID_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 1178

	)

4251 
	#OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik_˘ø˝km_omac
 
OBJ_id_tc26_cùhî_go°r3412_2015_kuznyechik
,2L

	)

4253 
	#SN_id_tc26_agªemít
 "id-tc26-agªemít"

	)

4254 
	#NID_id_tc26_agªemít
 991

	)

4255 
	#OBJ_id_tc26_agªemít
 
OBJ_id_tc26_Æg‹ôhms
,6L

	)

4257 
	#SN_id_tc26_agªemít_go°_3410_2012_256
 "id-tc26-agªemít-go°-3410-2012-256"

	)

4258 
	#NID_id_tc26_agªemít_go°_3410_2012_256
 992

	)

4259 
	#OBJ_id_tc26_agªemít_go°_3410_2012_256
 
OBJ_id_tc26_agªemít
,1L

	)

4261 
	#SN_id_tc26_agªemít_go°_3410_2012_512
 "id-tc26-agªemít-go°-3410-2012-512"

	)

4262 
	#NID_id_tc26_agªemít_go°_3410_2012_512
 993

	)

4263 
	#OBJ_id_tc26_agªemít_go°_3410_2012_512
 
OBJ_id_tc26_agªemít
,2L

	)

4265 
	#SN_id_tc26_wøp
 "id-tc26-wøp"

	)

4266 
	#NID_id_tc26_wøp
 1179

	)

4267 
	#OBJ_id_tc26_wøp
 
OBJ_id_tc26_Æg‹ôhms
,7L

	)

4269 
	#SN_id_tc26_wøp_go°r3412_2015_magma
 "id-tc26-wøp-go°r3412-2015-magma"

	)

4270 
	#NID_id_tc26_wøp_go°r3412_2015_magma
 1180

	)

4271 
	#OBJ_id_tc26_wøp_go°r3412_2015_magma
 
OBJ_id_tc26_wøp
,1L

	)

4273 
	#SN_id_tc26_wøp_go°r3412_2015_magma_kexp15
 "id-tc26-wøp-go°r3412-2015-magma-kexp15"

	)

4274 
	#NID_id_tc26_wøp_go°r3412_2015_magma_kexp15
 1181

	)

4275 
	#OBJ_id_tc26_wøp_go°r3412_2015_magma_kexp15
 
OBJ_id_tc26_wøp_go°r3412_2015_magma
,1L

	)

4277 
	#SN_id_tc26_wøp_go°r3412_2015_kuznyechik
 "id-tc26-wøp-go°r3412-2015-kuznyechik"

	)

4278 
	#NID_id_tc26_wøp_go°r3412_2015_kuznyechik
 1182

	)

4279 
	#OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik
 
OBJ_id_tc26_wøp
,2L

	)

4281 
	#SN_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 "id-tc26-wøp-go°r3412-2015-kuznyechik-kexp15"

	)

4282 
	#NID_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 1183

	)

4283 
	#OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik_kexp15
 
OBJ_id_tc26_wøp_go°r3412_2015_kuznyechik
,1L

	)

4285 
	#SN_id_tc26_c⁄°™ts
 "id-tc26-c⁄°™ts"

	)

4286 
	#NID_id_tc26_c⁄°™ts
 994

	)

4287 
	#OBJ_id_tc26_c⁄°™ts
 
OBJ_id_tc26
,2L

	)

4289 
	#SN_id_tc26_sign_c⁄°™ts
 "id-tc26-sign-c⁄°™ts"

	)

4290 
	#NID_id_tc26_sign_c⁄°™ts
 995

	)

4291 
	#OBJ_id_tc26_sign_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,1L

	)

4293 
	#SN_id_tc26_go°_3410_2012_256_c⁄°™ts
 "id-tc26-go°-3410-2012-256-c⁄°™ts"

	)

4294 
	#NID_id_tc26_go°_3410_2012_256_c⁄°™ts
 1147

	)

4295 
	#OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,1L

	)

4297 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëA
 "id-tc26-go°-3410-2012-256-∑ømSëA"

	)

4298 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëA
 "GOST R 34.10-2012 (256 bôËP¨amSë A"

	)

4299 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëA
 1148

	)

4300 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,1L

	)

4302 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëB
 "id-tc26-go°-3410-2012-256-∑ømSëB"

	)

4303 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëB
 "GOST R 34.10-2012 (256 bôËP¨amSë B"

	)

4304 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëB
 1184

	)

4305 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,2L

	)

4307 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëC
 "id-tc26-go°-3410-2012-256-∑ømSëC"

	)

4308 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëC
 "GOST R 34.10-2012 (256 bôËP¨amSë C"

	)

4309 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëC
 1185

	)

4310 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëC
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,3L

	)

4312 
	#SN_id_tc26_go°_3410_2012_256_∑ømSëD
 "id-tc26-go°-3410-2012-256-∑ømSëD"

	)

4313 
	#LN_id_tc26_go°_3410_2012_256_∑ømSëD
 "GOST R 34.10-2012 (256 bôËP¨amSë D"

	)

4314 
	#NID_id_tc26_go°_3410_2012_256_∑ømSëD
 1186

	)

4315 
	#OBJ_id_tc26_go°_3410_2012_256_∑ømSëD
 
OBJ_id_tc26_go°_3410_2012_256_c⁄°™ts
,4L

	)

4317 
	#SN_id_tc26_go°_3410_2012_512_c⁄°™ts
 "id-tc26-go°-3410-2012-512-c⁄°™ts"

	)

4318 
	#NID_id_tc26_go°_3410_2012_512_c⁄°™ts
 996

	)

4319 
	#OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
 
OBJ_id_tc26_sign_c⁄°™ts
,2L

	)

4321 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "id-tc26-go°-3410-2012-512-∑ømSëTe°"

	)

4322 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëTe°
 "GOST R 34.10-2012 (512 bôËã°ögÖ¨amëî së"

	)

4323 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëTe°
 997

	)

4324 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëTe°
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,0L

	)

4326 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëA
 "id-tc26-go°-3410-2012-512-∑ømSëA"

	)

4327 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëA
 "GOST R 34.10-2012 (512 bôËP¨amSë A"

	)

4328 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëA
 998

	)

4329 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëA
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,1L

	)

4331 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëB
 "id-tc26-go°-3410-2012-512-∑ømSëB"

	)

4332 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëB
 "GOST R 34.10-2012 (512 bôËP¨amSë B"

	)

4333 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëB
 999

	)

4334 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëB
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,2L

	)

4336 
	#SN_id_tc26_go°_3410_2012_512_∑ømSëC
 "id-tc26-go°-3410-2012-512-∑ømSëC"

	)

4337 
	#LN_id_tc26_go°_3410_2012_512_∑ømSëC
 "GOST R 34.10-2012 (512 bôËP¨amSë C"

	)

4338 
	#NID_id_tc26_go°_3410_2012_512_∑ømSëC
 1149

	)

4339 
	#OBJ_id_tc26_go°_3410_2012_512_∑ømSëC
 
OBJ_id_tc26_go°_3410_2012_512_c⁄°™ts
,3L

	)

4341 
	#SN_id_tc26_dige°_c⁄°™ts
 "id-tc26-dige°-c⁄°™ts"

	)

4342 
	#NID_id_tc26_dige°_c⁄°™ts
 1000

	)

4343 
	#OBJ_id_tc26_dige°_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,2L

	)

4345 
	#SN_id_tc26_cùhî_c⁄°™ts
 "id-tc26-cùhî-c⁄°™ts"

	)

4346 
	#NID_id_tc26_cùhî_c⁄°™ts
 1001

	)

4347 
	#OBJ_id_tc26_cùhî_c⁄°™ts
 
OBJ_id_tc26_c⁄°™ts
,5L

	)

4349 
	#SN_id_tc26_go°_28147_c⁄°™ts
 "id-tc26-go°-28147-c⁄°™ts"

	)

4350 
	#NID_id_tc26_go°_28147_c⁄°™ts
 1002

	)

4351 
	#OBJ_id_tc26_go°_28147_c⁄°™ts
 
OBJ_id_tc26_cùhî_c⁄°™ts
,1L

	)

4353 
	#SN_id_tc26_go°_28147_∑øm_Z
 "id-tc26-go°-28147-∑øm-Z"

	)

4354 
	#LN_id_tc26_go°_28147_∑øm_Z
 "GOST 28147-89 TC26Ö¨amëî së"

	)

4355 
	#NID_id_tc26_go°_28147_∑øm_Z
 1003

	)

4356 
	#OBJ_id_tc26_go°_28147_∑øm_Z
 
OBJ_id_tc26_go°_28147_c⁄°™ts
,1L

	)

4358 
	#SN_INN
 "INN"

	)

4359 
	#LN_INN
 "INN"

	)

4360 
	#NID_INN
 1004

	)

4361 
	#OBJ_INN
 
OBJ_membî_body
,643L,3L,131L,1L,1L

	)

4363 
	#SN_OGRN
 "OGRN"

	)

4364 
	#LN_OGRN
 "OGRN"

	)

4365 
	#NID_OGRN
 1005

	)

4366 
	#OBJ_OGRN
 
OBJ_membî_body
,643L,100L,1L

	)

4368 
	#SN_SNILS
 "SNILS"

	)

4369 
	#LN_SNILS
 "SNILS"

	)

4370 
	#NID_SNILS
 1006

	)

4371 
	#OBJ_SNILS
 
OBJ_membî_body
,643L,100L,3L

	)

4373 
	#SN_subje˘SignToﬁ
 "subje˘SignToﬁ"

	)

4374 
	#LN_subje˘SignToﬁ
 "Signög Toﬁ o‡Subje˘"

	)

4375 
	#NID_subje˘SignToﬁ
 1007

	)

4376 
	#OBJ_subje˘SignToﬁ
 
OBJ_membî_body
,643L,100L,111L

	)

4378 
	#SN_issuîSignToﬁ
 "issuîSignToﬁ"

	)

4379 
	#LN_issuîSignToﬁ
 "Signög Toﬁ o‡Issuî"

	)

4380 
	#NID_issuîSignToﬁ
 1008

	)

4381 
	#OBJ_issuîSignToﬁ
 
OBJ_membî_body
,643L,100L,112L

	)

4383 
	#SN_gøssh›≥r_ecb
 "gøssh›≥r-ecb"

	)

4384 
	#NID_gøssh›≥r_ecb
 1012

	)

4386 
	#SN_gøssh›≥r_˘r
 "gøssh›≥r-˘r"

	)

4387 
	#NID_gøssh›≥r_˘r
 1013

	)

4389 
	#SN_gøssh›≥r_ofb
 "gøssh›≥r-ofb"

	)

4390 
	#NID_gøssh›≥r_ofb
 1014

	)

4392 
	#SN_gøssh›≥r_cbc
 "gøssh›≥r-cbc"

	)

4393 
	#NID_gøssh›≥r_cbc
 1015

	)

4395 
	#SN_gøssh›≥r_cfb
 "gøssh›≥r-cfb"

	)

4396 
	#NID_gøssh›≥r_cfb
 1016

	)

4398 
	#SN_gøssh›≥r_mac
 "gøssh›≥r-mac"

	)

4399 
	#NID_gøssh›≥r_mac
 1017

	)

4401 
	#SN_magma_ecb
 "magma-ecb"

	)

4402 
	#NID_magma_ecb
 1187

	)

4404 
	#SN_magma_˘r
 "magma-˘r"

	)

4405 
	#NID_magma_˘r
 1188

	)

4407 
	#SN_magma_ofb
 "magma-ofb"

	)

4408 
	#NID_magma_ofb
 1189

	)

4410 
	#SN_magma_cbc
 "magma-cbc"

	)

4411 
	#NID_magma_cbc
 1190

	)

4413 
	#SN_magma_cfb
 "magma-cfb"

	)

4414 
	#NID_magma_cfb
 1191

	)

4416 
	#SN_magma_mac
 "magma-mac"

	)

4417 
	#NID_magma_mac
 1192

	)

4419 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

4420 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

4421 
	#NID_ˇmñlü_128_cbc
 751

	)

4422 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

4424 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

4425 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

4426 
	#NID_ˇmñlü_192_cbc
 752

	)

4427 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

4429 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

4430 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

4431 
	#NID_ˇmñlü_256_cbc
 753

	)

4432 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

4434 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

4435 
	#NID_id_ˇmñlü128_wøp
 907

	)

4436 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

4438 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

4439 
	#NID_id_ˇmñlü192_wøp
 908

	)

4440 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

4442 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

4443 
	#NID_id_ˇmñlü256_wøp
 909

	)

4444 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

4446 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

4448 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

4450 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

4451 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

4452 
	#NID_ˇmñlü_128_ecb
 754

	)

4453 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

4455 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

4456 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

4457 
	#NID_ˇmñlü_128_ofb128
 766

	)

4458 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

4460 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

4461 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

4462 
	#NID_ˇmñlü_128_cfb128
 757

	)

4463 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

4465 
	#SN_ˇmñlü_128_gcm
 "CAMELLIA-128-GCM"

	)

4466 
	#LN_ˇmñlü_128_gcm
 "ˇmñlü-128-gcm"

	)

4467 
	#NID_ˇmñlü_128_gcm
 961

	)

4468 
	#OBJ_ˇmñlü_128_gcm
 
OBJ_ˇmñlü
,6L

	)

4470 
	#SN_ˇmñlü_128_ccm
 "CAMELLIA-128-CCM"

	)

4471 
	#LN_ˇmñlü_128_ccm
 "ˇmñlü-128-ccm"

	)

4472 
	#NID_ˇmñlü_128_ccm
 962

	)

4473 
	#OBJ_ˇmñlü_128_ccm
 
OBJ_ˇmñlü
,7L

	)

4475 
	#SN_ˇmñlü_128_˘r
 "CAMELLIA-128-CTR"

	)

4476 
	#LN_ˇmñlü_128_˘r
 "ˇmñlü-128-˘r"

	)

4477 
	#NID_ˇmñlü_128_˘r
 963

	)

4478 
	#OBJ_ˇmñlü_128_˘r
 
OBJ_ˇmñlü
,9L

	)

4480 
	#SN_ˇmñlü_128_cmac
 "CAMELLIA-128-CMAC"

	)

4481 
	#LN_ˇmñlü_128_cmac
 "ˇmñlü-128-cmac"

	)

4482 
	#NID_ˇmñlü_128_cmac
 964

	)

4483 
	#OBJ_ˇmñlü_128_cmac
 
OBJ_ˇmñlü
,10L

	)

4485 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

4486 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

4487 
	#NID_ˇmñlü_192_ecb
 755

	)

4488 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

4490 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

4491 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

4492 
	#NID_ˇmñlü_192_ofb128
 767

	)

4493 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

4495 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

4496 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

4497 
	#NID_ˇmñlü_192_cfb128
 758

	)

4498 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

4500 
	#SN_ˇmñlü_192_gcm
 "CAMELLIA-192-GCM"

	)

4501 
	#LN_ˇmñlü_192_gcm
 "ˇmñlü-192-gcm"

	)

4502 
	#NID_ˇmñlü_192_gcm
 965

	)

4503 
	#OBJ_ˇmñlü_192_gcm
 
OBJ_ˇmñlü
,26L

	)

4505 
	#SN_ˇmñlü_192_ccm
 "CAMELLIA-192-CCM"

	)

4506 
	#LN_ˇmñlü_192_ccm
 "ˇmñlü-192-ccm"

	)

4507 
	#NID_ˇmñlü_192_ccm
 966

	)

4508 
	#OBJ_ˇmñlü_192_ccm
 
OBJ_ˇmñlü
,27L

	)

4510 
	#SN_ˇmñlü_192_˘r
 "CAMELLIA-192-CTR"

	)

4511 
	#LN_ˇmñlü_192_˘r
 "ˇmñlü-192-˘r"

	)

4512 
	#NID_ˇmñlü_192_˘r
 967

	)

4513 
	#OBJ_ˇmñlü_192_˘r
 
OBJ_ˇmñlü
,29L

	)

4515 
	#SN_ˇmñlü_192_cmac
 "CAMELLIA-192-CMAC"

	)

4516 
	#LN_ˇmñlü_192_cmac
 "ˇmñlü-192-cmac"

	)

4517 
	#NID_ˇmñlü_192_cmac
 968

	)

4518 
	#OBJ_ˇmñlü_192_cmac
 
OBJ_ˇmñlü
,30L

	)

4520 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

4521 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

4522 
	#NID_ˇmñlü_256_ecb
 756

	)

4523 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

4525 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

4526 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

4527 
	#NID_ˇmñlü_256_ofb128
 768

	)

4528 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

4530 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

4531 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

4532 
	#NID_ˇmñlü_256_cfb128
 759

	)

4533 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

4535 
	#SN_ˇmñlü_256_gcm
 "CAMELLIA-256-GCM"

	)

4536 
	#LN_ˇmñlü_256_gcm
 "ˇmñlü-256-gcm"

	)

4537 
	#NID_ˇmñlü_256_gcm
 969

	)

4538 
	#OBJ_ˇmñlü_256_gcm
 
OBJ_ˇmñlü
,46L

	)

4540 
	#SN_ˇmñlü_256_ccm
 "CAMELLIA-256-CCM"

	)

4541 
	#LN_ˇmñlü_256_ccm
 "ˇmñlü-256-ccm"

	)

4542 
	#NID_ˇmñlü_256_ccm
 970

	)

4543 
	#OBJ_ˇmñlü_256_ccm
 
OBJ_ˇmñlü
,47L

	)

4545 
	#SN_ˇmñlü_256_˘r
 "CAMELLIA-256-CTR"

	)

4546 
	#LN_ˇmñlü_256_˘r
 "ˇmñlü-256-˘r"

	)

4547 
	#NID_ˇmñlü_256_˘r
 971

	)

4548 
	#OBJ_ˇmñlü_256_˘r
 
OBJ_ˇmñlü
,49L

	)

4550 
	#SN_ˇmñlü_256_cmac
 "CAMELLIA-256-CMAC"

	)

4551 
	#LN_ˇmñlü_256_cmac
 "ˇmñlü-256-cmac"

	)

4552 
	#NID_ˇmñlü_256_cmac
 972

	)

4553 
	#OBJ_ˇmñlü_256_cmac
 
OBJ_ˇmñlü
,50L

	)

4555 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

4556 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

4557 
	#NID_ˇmñlü_128_cfb1
 760

	)

4559 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

4560 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

4561 
	#NID_ˇmñlü_192_cfb1
 761

	)

4563 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

4564 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

4565 
	#NID_ˇmñlü_256_cfb1
 762

	)

4567 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

4568 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

4569 
	#NID_ˇmñlü_128_cfb8
 763

	)

4571 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

4572 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

4573 
	#NID_ˇmñlü_192_cfb8
 764

	)

4575 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

4576 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

4577 
	#NID_ˇmñlü_256_cfb8
 765

	)

4579 
	#OBJ_¨ü
 1L,2L,410L,200046L,1L,1L

	)

4581 
	#SN_¨ü_128_ecb
 "ARIA-128-ECB"

	)

4582 
	#LN_¨ü_128_ecb
 "¨ü-128-ecb"

	)

4583 
	#NID_¨ü_128_ecb
 1065

	)

4584 
	#OBJ_¨ü_128_ecb
 
OBJ_¨ü
,1L

	)

4586 
	#SN_¨ü_128_cbc
 "ARIA-128-CBC"

	)

4587 
	#LN_¨ü_128_cbc
 "¨ü-128-cbc"

	)

4588 
	#NID_¨ü_128_cbc
 1066

	)

4589 
	#OBJ_¨ü_128_cbc
 
OBJ_¨ü
,2L

	)

4591 
	#SN_¨ü_128_cfb128
 "ARIA-128-CFB"

	)

4592 
	#LN_¨ü_128_cfb128
 "¨ü-128-cfb"

	)

4593 
	#NID_¨ü_128_cfb128
 1067

	)

4594 
	#OBJ_¨ü_128_cfb128
 
OBJ_¨ü
,3L

	)

4596 
	#SN_¨ü_128_ofb128
 "ARIA-128-OFB"

	)

4597 
	#LN_¨ü_128_ofb128
 "¨ü-128-ofb"

	)

4598 
	#NID_¨ü_128_ofb128
 1068

	)

4599 
	#OBJ_¨ü_128_ofb128
 
OBJ_¨ü
,4L

	)

4601 
	#SN_¨ü_128_˘r
 "ARIA-128-CTR"

	)

4602 
	#LN_¨ü_128_˘r
 "¨ü-128-˘r"

	)

4603 
	#NID_¨ü_128_˘r
 1069

	)

4604 
	#OBJ_¨ü_128_˘r
 
OBJ_¨ü
,5L

	)

4606 
	#SN_¨ü_192_ecb
 "ARIA-192-ECB"

	)

4607 
	#LN_¨ü_192_ecb
 "¨ü-192-ecb"

	)

4608 
	#NID_¨ü_192_ecb
 1070

	)

4609 
	#OBJ_¨ü_192_ecb
 
OBJ_¨ü
,6L

	)

4611 
	#SN_¨ü_192_cbc
 "ARIA-192-CBC"

	)

4612 
	#LN_¨ü_192_cbc
 "¨ü-192-cbc"

	)

4613 
	#NID_¨ü_192_cbc
 1071

	)

4614 
	#OBJ_¨ü_192_cbc
 
OBJ_¨ü
,7L

	)

4616 
	#SN_¨ü_192_cfb128
 "ARIA-192-CFB"

	)

4617 
	#LN_¨ü_192_cfb128
 "¨ü-192-cfb"

	)

4618 
	#NID_¨ü_192_cfb128
 1072

	)

4619 
	#OBJ_¨ü_192_cfb128
 
OBJ_¨ü
,8L

	)

4621 
	#SN_¨ü_192_ofb128
 "ARIA-192-OFB"

	)

4622 
	#LN_¨ü_192_ofb128
 "¨ü-192-ofb"

	)

4623 
	#NID_¨ü_192_ofb128
 1073

	)

4624 
	#OBJ_¨ü_192_ofb128
 
OBJ_¨ü
,9L

	)

4626 
	#SN_¨ü_192_˘r
 "ARIA-192-CTR"

	)

4627 
	#LN_¨ü_192_˘r
 "¨ü-192-˘r"

	)

4628 
	#NID_¨ü_192_˘r
 1074

	)

4629 
	#OBJ_¨ü_192_˘r
 
OBJ_¨ü
,10L

	)

4631 
	#SN_¨ü_256_ecb
 "ARIA-256-ECB"

	)

4632 
	#LN_¨ü_256_ecb
 "¨ü-256-ecb"

	)

4633 
	#NID_¨ü_256_ecb
 1075

	)

4634 
	#OBJ_¨ü_256_ecb
 
OBJ_¨ü
,11L

	)

4636 
	#SN_¨ü_256_cbc
 "ARIA-256-CBC"

	)

4637 
	#LN_¨ü_256_cbc
 "¨ü-256-cbc"

	)

4638 
	#NID_¨ü_256_cbc
 1076

	)

4639 
	#OBJ_¨ü_256_cbc
 
OBJ_¨ü
,12L

	)

4641 
	#SN_¨ü_256_cfb128
 "ARIA-256-CFB"

	)

4642 
	#LN_¨ü_256_cfb128
 "¨ü-256-cfb"

	)

4643 
	#NID_¨ü_256_cfb128
 1077

	)

4644 
	#OBJ_¨ü_256_cfb128
 
OBJ_¨ü
,13L

	)

4646 
	#SN_¨ü_256_ofb128
 "ARIA-256-OFB"

	)

4647 
	#LN_¨ü_256_ofb128
 "¨ü-256-ofb"

	)

4648 
	#NID_¨ü_256_ofb128
 1078

	)

4649 
	#OBJ_¨ü_256_ofb128
 
OBJ_¨ü
,14L

	)

4651 
	#SN_¨ü_256_˘r
 "ARIA-256-CTR"

	)

4652 
	#LN_¨ü_256_˘r
 "¨ü-256-˘r"

	)

4653 
	#NID_¨ü_256_˘r
 1079

	)

4654 
	#OBJ_¨ü_256_˘r
 
OBJ_¨ü
,15L

	)

4656 
	#SN_¨ü_128_cfb1
 "ARIA-128-CFB1"

	)

4657 
	#LN_¨ü_128_cfb1
 "¨ü-128-cfb1"

	)

4658 
	#NID_¨ü_128_cfb1
 1080

	)

4660 
	#SN_¨ü_192_cfb1
 "ARIA-192-CFB1"

	)

4661 
	#LN_¨ü_192_cfb1
 "¨ü-192-cfb1"

	)

4662 
	#NID_¨ü_192_cfb1
 1081

	)

4664 
	#SN_¨ü_256_cfb1
 "ARIA-256-CFB1"

	)

4665 
	#LN_¨ü_256_cfb1
 "¨ü-256-cfb1"

	)

4666 
	#NID_¨ü_256_cfb1
 1082

	)

4668 
	#SN_¨ü_128_cfb8
 "ARIA-128-CFB8"

	)

4669 
	#LN_¨ü_128_cfb8
 "¨ü-128-cfb8"

	)

4670 
	#NID_¨ü_128_cfb8
 1083

	)

4672 
	#SN_¨ü_192_cfb8
 "ARIA-192-CFB8"

	)

4673 
	#LN_¨ü_192_cfb8
 "¨ü-192-cfb8"

	)

4674 
	#NID_¨ü_192_cfb8
 1084

	)

4676 
	#SN_¨ü_256_cfb8
 "ARIA-256-CFB8"

	)

4677 
	#LN_¨ü_256_cfb8
 "¨ü-256-cfb8"

	)

4678 
	#NID_¨ü_256_cfb8
 1085

	)

4680 
	#SN_¨ü_128_ccm
 "ARIA-128-CCM"

	)

4681 
	#LN_¨ü_128_ccm
 "¨ü-128-ccm"

	)

4682 
	#NID_¨ü_128_ccm
 1120

	)

4683 
	#OBJ_¨ü_128_ccm
 
OBJ_¨ü
,37L

	)

4685 
	#SN_¨ü_192_ccm
 "ARIA-192-CCM"

	)

4686 
	#LN_¨ü_192_ccm
 "¨ü-192-ccm"

	)

4687 
	#NID_¨ü_192_ccm
 1121

	)

4688 
	#OBJ_¨ü_192_ccm
 
OBJ_¨ü
,38L

	)

4690 
	#SN_¨ü_256_ccm
 "ARIA-256-CCM"

	)

4691 
	#LN_¨ü_256_ccm
 "¨ü-256-ccm"

	)

4692 
	#NID_¨ü_256_ccm
 1122

	)

4693 
	#OBJ_¨ü_256_ccm
 
OBJ_¨ü
,39L

	)

4695 
	#SN_¨ü_128_gcm
 "ARIA-128-GCM"

	)

4696 
	#LN_¨ü_128_gcm
 "¨ü-128-gcm"

	)

4697 
	#NID_¨ü_128_gcm
 1123

	)

4698 
	#OBJ_¨ü_128_gcm
 
OBJ_¨ü
,34L

	)

4700 
	#SN_¨ü_192_gcm
 "ARIA-192-GCM"

	)

4701 
	#LN_¨ü_192_gcm
 "¨ü-192-gcm"

	)

4702 
	#NID_¨ü_192_gcm
 1124

	)

4703 
	#OBJ_¨ü_192_gcm
 
OBJ_¨ü
,35L

	)

4705 
	#SN_¨ü_256_gcm
 "ARIA-256-GCM"

	)

4706 
	#LN_¨ü_256_gcm
 "¨ü-256-gcm"

	)

4707 
	#NID_¨ü_256_gcm
 1125

	)

4708 
	#OBJ_¨ü_256_gcm
 
OBJ_¨ü
,36L

	)

4710 
	#SN_kiß
 "KISA"

	)

4711 
	#LN_kiß
 "kiß"

	)

4712 
	#NID_kiß
 773

	)

4713 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

4715 
	#SN_£ed_ecb
 "SEED-ECB"

	)

4716 
	#LN_£ed_ecb
 "£ed-ecb"

	)

4717 
	#NID_£ed_ecb
 776

	)

4718 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

4720 
	#SN_£ed_cbc
 "SEED-CBC"

	)

4721 
	#LN_£ed_cbc
 "£ed-cbc"

	)

4722 
	#NID_£ed_cbc
 777

	)

4723 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

4725 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4726 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4727 
	#NID_£ed_cfb128
 779

	)

4728 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4730 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4731 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4732 
	#NID_£ed_ofb128
 778

	)

4733 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4735 
	#SN_sm4_ecb
 "SM4-ECB"

	)

4736 
	#LN_sm4_ecb
 "sm4-ecb"

	)

4737 
	#NID_sm4_ecb
 1133

	)

4738 
	#OBJ_sm4_ecb
 
OBJ_sm_scheme
,104L,1L

	)

4740 
	#SN_sm4_cbc
 "SM4-CBC"

	)

4741 
	#LN_sm4_cbc
 "sm4-cbc"

	)

4742 
	#NID_sm4_cbc
 1134

	)

4743 
	#OBJ_sm4_cbc
 
OBJ_sm_scheme
,104L,2L

	)

4745 
	#SN_sm4_ofb128
 "SM4-OFB"

	)

4746 
	#LN_sm4_ofb128
 "sm4-ofb"

	)

4747 
	#NID_sm4_ofb128
 1135

	)

4748 
	#OBJ_sm4_ofb128
 
OBJ_sm_scheme
,104L,3L

	)

4750 
	#SN_sm4_cfb128
 "SM4-CFB"

	)

4751 
	#LN_sm4_cfb128
 "sm4-cfb"

	)

4752 
	#NID_sm4_cfb128
 1137

	)

4753 
	#OBJ_sm4_cfb128
 
OBJ_sm_scheme
,104L,4L

	)

4755 
	#SN_sm4_cfb1
 "SM4-CFB1"

	)

4756 
	#LN_sm4_cfb1
 "sm4-cfb1"

	)

4757 
	#NID_sm4_cfb1
 1136

	)

4758 
	#OBJ_sm4_cfb1
 
OBJ_sm_scheme
,104L,5L

	)

4760 
	#SN_sm4_cfb8
 "SM4-CFB8"

	)

4761 
	#LN_sm4_cfb8
 "sm4-cfb8"

	)

4762 
	#NID_sm4_cfb8
 1138

	)

4763 
	#OBJ_sm4_cfb8
 
OBJ_sm_scheme
,104L,6L

	)

4765 
	#SN_sm4_˘r
 "SM4-CTR"

	)

4766 
	#LN_sm4_˘r
 "sm4-˘r"

	)

4767 
	#NID_sm4_˘r
 1139

	)

4768 
	#OBJ_sm4_˘r
 
OBJ_sm_scheme
,104L,7L

	)

4770 
	#SN_hmac
 "HMAC"

	)

4771 
	#LN_hmac
 "hmac"

	)

4772 
	#NID_hmac
 855

	)

4774 
	#SN_cmac
 "CMAC"

	)

4775 
	#LN_cmac
 "cmac"

	)

4776 
	#NID_cmac
 894

	)

4778 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4779 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4780 
	#NID_rc4_hmac_md5
 915

	)

4782 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4783 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4784 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4786 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4787 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4788 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4790 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4791 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4792 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

4794 
	#SN_´s_128_cbc_hmac_sha256
 "AES-128-CBC-HMAC-SHA256"

	)

4795 
	#LN_´s_128_cbc_hmac_sha256
 "´s-128-cbc-hmac-sha256"

	)

4796 
	#NID_´s_128_cbc_hmac_sha256
 948

	)

4798 
	#SN_´s_192_cbc_hmac_sha256
 "AES-192-CBC-HMAC-SHA256"

	)

4799 
	#LN_´s_192_cbc_hmac_sha256
 "´s-192-cbc-hmac-sha256"

	)

4800 
	#NID_´s_192_cbc_hmac_sha256
 949

	)

4802 
	#SN_´s_256_cbc_hmac_sha256
 "AES-256-CBC-HMAC-SHA256"

	)

4803 
	#LN_´s_256_cbc_hmac_sha256
 "´s-256-cbc-hmac-sha256"

	)

4804 
	#NID_´s_256_cbc_hmac_sha256
 950

	)

4806 
	#SN_chacha20_pﬁy1305
 "ChaCha20-Pﬁy1305"

	)

4807 
	#LN_chacha20_pﬁy1305
 "chacha20-pﬁy1305"

	)

4808 
	#NID_chacha20_pﬁy1305
 1018

	)

4810 
	#SN_chacha20
 "ChaCha20"

	)

4811 
	#LN_chacha20
 "chacha20"

	)

4812 
	#NID_chacha20
 1019

	)

4814 
	#SN_dhpubli˙umbî
 "dhpubli˙umbî"

	)

4815 
	#LN_dhpubli˙umbî
 "X9.42 DH"

	)

4816 
	#NID_dhpubli˙umbî
 920

	)

4817 
	#OBJ_dhpubli˙umbî
 
OBJ_ISO_US
,10046L,2L,1L

	)

4819 
	#SN_bøöpoﬁP160r1
 "bøöpoﬁP160r1"

	)

4820 
	#NID_bøöpoﬁP160r1
 921

	)

4821 
	#OBJ_bøöpoﬁP160r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,1L

	)

4823 
	#SN_bøöpoﬁP160t1
 "bøöpoﬁP160t1"

	)

4824 
	#NID_bøöpoﬁP160t1
 922

	)

4825 
	#OBJ_bøöpoﬁP160t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,2L

	)

4827 
	#SN_bøöpoﬁP192r1
 "bøöpoﬁP192r1"

	)

4828 
	#NID_bøöpoﬁP192r1
 923

	)

4829 
	#OBJ_bøöpoﬁP192r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,3L

	)

4831 
	#SN_bøöpoﬁP192t1
 "bøöpoﬁP192t1"

	)

4832 
	#NID_bøöpoﬁP192t1
 924

	)

4833 
	#OBJ_bøöpoﬁP192t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,4L

	)

4835 
	#SN_bøöpoﬁP224r1
 "bøöpoﬁP224r1"

	)

4836 
	#NID_bøöpoﬁP224r1
 925

	)

4837 
	#OBJ_bøöpoﬁP224r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,5L

	)

4839 
	#SN_bøöpoﬁP224t1
 "bøöpoﬁP224t1"

	)

4840 
	#NID_bøöpoﬁP224t1
 926

	)

4841 
	#OBJ_bøöpoﬁP224t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,6L

	)

4843 
	#SN_bøöpoﬁP256r1
 "bøöpoﬁP256r1"

	)

4844 
	#NID_bøöpoﬁP256r1
 927

	)

4845 
	#OBJ_bøöpoﬁP256r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,7L

	)

4847 
	#SN_bøöpoﬁP256t1
 "bøöpoﬁP256t1"

	)

4848 
	#NID_bøöpoﬁP256t1
 928

	)

4849 
	#OBJ_bøöpoﬁP256t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,8L

	)

4851 
	#SN_bøöpoﬁP320r1
 "bøöpoﬁP320r1"

	)

4852 
	#NID_bøöpoﬁP320r1
 929

	)

4853 
	#OBJ_bøöpoﬁP320r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,9L

	)

4855 
	#SN_bøöpoﬁP320t1
 "bøöpoﬁP320t1"

	)

4856 
	#NID_bøöpoﬁP320t1
 930

	)

4857 
	#OBJ_bøöpoﬁP320t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,10L

	)

4859 
	#SN_bøöpoﬁP384r1
 "bøöpoﬁP384r1"

	)

4860 
	#NID_bøöpoﬁP384r1
 931

	)

4861 
	#OBJ_bøöpoﬁP384r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,11L

	)

4863 
	#SN_bøöpoﬁP384t1
 "bøöpoﬁP384t1"

	)

4864 
	#NID_bøöpoﬁP384t1
 932

	)

4865 
	#OBJ_bøöpoﬁP384t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,12L

	)

4867 
	#SN_bøöpoﬁP512r1
 "bøöpoﬁP512r1"

	)

4868 
	#NID_bøöpoﬁP512r1
 933

	)

4869 
	#OBJ_bøöpoﬁP512r1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,13L

	)

4871 
	#SN_bøöpoﬁP512t1
 "bøöpoﬁP512t1"

	)

4872 
	#NID_bøöpoﬁP512t1
 934

	)

4873 
	#OBJ_bøöpoﬁP512t1
 1L,3L,36L,3L,3L,2L,8L,1L,1L,14L

	)

4875 
	#OBJ_x9_63_scheme
 1L,3L,133L,16L,840L,63L,0L

	)

4877 
	#OBJ_£cg_scheme
 
OBJ_˚πicom_¨c
,1L

	)

4879 
	#SN_dhSögÀPass_°dDH_sha1kdf_scheme
 "dhSögÀPass-°dDH-sha1kdf-scheme"

	)

4880 
	#NID_dhSögÀPass_°dDH_sha1kdf_scheme
 936

	)

4881 
	#OBJ_dhSögÀPass_°dDH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,2L

	)

4883 
	#SN_dhSögÀPass_°dDH_sha224kdf_scheme
 "dhSögÀPass-°dDH-sha224kdf-scheme"

	)

4884 
	#NID_dhSögÀPass_°dDH_sha224kdf_scheme
 937

	)

4885 
	#OBJ_dhSögÀPass_°dDH_sha224kdf_scheme
 
OBJ_£cg_scheme
,11L,0L

	)

4887 
	#SN_dhSögÀPass_°dDH_sha256kdf_scheme
 "dhSögÀPass-°dDH-sha256kdf-scheme"

	)

4888 
	#NID_dhSögÀPass_°dDH_sha256kdf_scheme
 938

	)

4889 
	#OBJ_dhSögÀPass_°dDH_sha256kdf_scheme
 
OBJ_£cg_scheme
,11L,1L

	)

4891 
	#SN_dhSögÀPass_°dDH_sha384kdf_scheme
 "dhSögÀPass-°dDH-sha384kdf-scheme"

	)

4892 
	#NID_dhSögÀPass_°dDH_sha384kdf_scheme
 939

	)

4893 
	#OBJ_dhSögÀPass_°dDH_sha384kdf_scheme
 
OBJ_£cg_scheme
,11L,2L

	)

4895 
	#SN_dhSögÀPass_°dDH_sha512kdf_scheme
 "dhSögÀPass-°dDH-sha512kdf-scheme"

	)

4896 
	#NID_dhSögÀPass_°dDH_sha512kdf_scheme
 940

	)

4897 
	#OBJ_dhSögÀPass_°dDH_sha512kdf_scheme
 
OBJ_£cg_scheme
,11L,3L

	)

4899 
	#SN_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha1kdf-scheme"

	)

4900 
	#NID_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 941

	)

4901 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha1kdf_scheme
 
OBJ_x9_63_scheme
,3L

	)

4903 
	#SN_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha224kdf-scheme"

	)

4904 
	#NID_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 942

	)

4905 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha224kdf_scheme
 
OBJ_£cg_scheme
,14L,0L

	)

4907 
	#SN_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha256kdf-scheme"

	)

4908 
	#NID_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 943

	)

4909 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha256kdf_scheme
 
OBJ_£cg_scheme
,14L,1L

	)

4911 
	#SN_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha384kdf-scheme"

	)

4912 
	#NID_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 944

	)

4913 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha384kdf_scheme
 
OBJ_£cg_scheme
,14L,2L

	)

4915 
	#SN_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 "dhSögÀPass-coÁ˘‹DH-sha512kdf-scheme"

	)

4916 
	#NID_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 945

	)

4917 
	#OBJ_dhSögÀPass_coÁ˘‹DH_sha512kdf_scheme
 
OBJ_£cg_scheme
,14L,3L

	)

4919 
	#SN_dh_°d_kdf
 "dh-°d-kdf"

	)

4920 
	#NID_dh_°d_kdf
 946

	)

4922 
	#SN_dh_coÁ˘‹_kdf
 "dh-coÁ˘‹-kdf"

	)

4923 
	#NID_dh_coÁ˘‹_kdf
 947

	)

4925 
	#SN_˘_¥e˚π_s˘s
 "˘_¥e˚π_s˘s"

	)

4926 
	#LN_˘_¥e˚π_s˘s
 "CT Pª˚πifiˇã SCTs"

	)

4927 
	#NID_˘_¥e˚π_s˘s
 951

	)

4928 
	#OBJ_˘_¥e˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,2L

	)

4930 
	#SN_˘_¥e˚π_pois⁄
 "˘_¥e˚π_pois⁄"

	)

4931 
	#LN_˘_¥e˚π_pois⁄
 "CT Pª˚πifiˇã Pois⁄"

	)

4932 
	#NID_˘_¥e˚π_pois⁄
 952

	)

4933 
	#OBJ_˘_¥e˚π_pois⁄
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,3L

	)

4935 
	#SN_˘_¥e˚π_sig√r
 "˘_¥e˚π_sig√r"

	)

4936 
	#LN_˘_¥e˚π_sig√r
 "CT Pª˚πifiˇã Sig√r"

	)

4937 
	#NID_˘_¥e˚π_sig√r
 953

	)

4938 
	#OBJ_˘_¥e˚π_sig√r
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,4L

	)

4940 
	#SN_˘_˚π_s˘s
 "˘_˚π_s˘s"

	)

4941 
	#LN_˘_˚π_s˘s
 "CT Cîtifiˇã SCTs"

	)

4942 
	#NID_˘_˚π_s˘s
 954

	)

4943 
	#OBJ_˘_˚π_s˘s
 1L,3L,6L,1L,4L,1L,11129L,2L,4L,5L

	)

4945 
	#SN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄L"

	)

4946 
	#LN_jurisdi˘i⁄LoˇlôyName
 "jurisdi˘i⁄LoˇlôyName"

	)

4947 
	#NID_jurisdi˘i⁄LoˇlôyName
 955

	)

4948 
	#OBJ_jurisdi˘i⁄LoˇlôyName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,1L

	)

4950 
	#SN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄ST"

	)

4951 
	#LN_jurisdi˘i⁄SèãOrProvö˚Name
 "jurisdi˘i⁄SèãOrProvö˚Name"

	)

4952 
	#NID_jurisdi˘i⁄SèãOrProvö˚Name
 956

	)

4953 
	#OBJ_jurisdi˘i⁄SèãOrProvö˚Name
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,2L

	)

4955 
	#SN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄C"

	)

4956 
	#LN_jurisdi˘i⁄Cou¡ryName
 "jurisdi˘i⁄Cou¡ryName"

	)

4957 
	#NID_jurisdi˘i⁄Cou¡ryName
 957

	)

4958 
	#OBJ_jurisdi˘i⁄Cou¡ryName
 1L,3L,6L,1L,4L,1L,311L,60L,2L,1L,3L

	)

4960 
	#SN_id_s¸y±
 "id-s¸y±"

	)

4961 
	#LN_id_s¸y±
 "s¸y±"

	)

4962 
	#NID_id_s¸y±
 973

	)

4963 
	#OBJ_id_s¸y±
 1L,3L,6L,1L,4L,1L,11591L,4L,11L

	)

4965 
	#SN_és1_¥f
 "TLS1-PRF"

	)

4966 
	#LN_és1_¥f
 "és1-¥f"

	)

4967 
	#NID_és1_¥f
 1021

	)

4969 
	#SN_hkdf
 "HKDF"

	)

4970 
	#LN_hkdf
 "hkdf"

	)

4971 
	#NID_hkdf
 1036

	)

4973 
	#SN_sshkdf
 "SSHKDF"

	)

4974 
	#LN_sshkdf
 "sshkdf"

	)

4975 
	#NID_sshkdf
 1203

	)

4977 
	#SN_kbkdf
 "KBKDF"

	)

4978 
	#LN_kbkdf
 "kbkdf"

	)

4979 
	#NID_kbkdf
 1204

	)

4981 
	#SN_krb5kdf
 "KRB5KDF"

	)

4982 
	#LN_krb5kdf
 "krb5kdf"

	)

4983 
	#NID_krb5kdf
 1205

	)

4985 
	#SN_sskdf
 "SSKDF"

	)

4986 
	#LN_sskdf
 "sskdf"

	)

4987 
	#NID_sskdf
 1206

	)

4989 
	#SN_id_pköô
 "id-pköô"

	)

4990 
	#NID_id_pköô
 1031

	)

4991 
	#OBJ_id_pköô
 1L,3L,6L,1L,5L,2L,3L

	)

4993 
	#SN_pkInôClõ¡Auth
 "pkInôClõ¡Auth"

	)

4994 
	#LN_pkInôClõ¡Auth
 "PKINIT Clõ¡ Auth"

	)

4995 
	#NID_pkInôClõ¡Auth
 1032

	)

4996 
	#OBJ_pkInôClõ¡Auth
 
OBJ_id_pköô
,4L

	)

4998 
	#SN_pkInôKDC
 "pkInôKDC"

	)

4999 
	#LN_pkInôKDC
 "Signög KDC Re•⁄£"

	)

5000 
	#NID_pkInôKDC
 1033

	)

5001 
	#OBJ_pkInôKDC
 
OBJ_id_pköô
,5L

	)

5003 
	#SN_X25519
 "X25519"

	)

5004 
	#NID_X25519
 1034

	)

5005 
	#OBJ_X25519
 1L,3L,101L,110L

	)

5007 
	#SN_X448
 "X448"

	)

5008 
	#NID_X448
 1035

	)

5009 
	#OBJ_X448
 1L,3L,101L,111L

	)

5011 
	#SN_ED25519
 "ED25519"

	)

5012 
	#NID_ED25519
 1087

	)

5013 
	#OBJ_ED25519
 1L,3L,101L,112L

	)

5015 
	#SN_ED448
 "ED448"

	)

5016 
	#NID_ED448
 1088

	)

5017 
	#OBJ_ED448
 1L,3L,101L,113L

	)

5019 
	#SN_kx_rß
 "KxRSA"

	)

5020 
	#LN_kx_rß
 "kx-rß"

	)

5021 
	#NID_kx_rß
 1037

	)

5023 
	#SN_kx_ecdhe
 "KxECDHE"

	)

5024 
	#LN_kx_ecdhe
 "kx-ecdhe"

	)

5025 
	#NID_kx_ecdhe
 1038

	)

5027 
	#SN_kx_dhe
 "KxDHE"

	)

5028 
	#LN_kx_dhe
 "kx-dhe"

	)

5029 
	#NID_kx_dhe
 1039

	)

5031 
	#SN_kx_ecdhe_psk
 "KxECDHE-PSK"

	)

5032 
	#LN_kx_ecdhe_psk
 "kx-ecdhe-psk"

	)

5033 
	#NID_kx_ecdhe_psk
 1040

	)

5035 
	#SN_kx_dhe_psk
 "KxDHE-PSK"

	)

5036 
	#LN_kx_dhe_psk
 "kx-dhe-psk"

	)

5037 
	#NID_kx_dhe_psk
 1041

	)

5039 
	#SN_kx_rß_psk
 "KxRSA_PSK"

	)

5040 
	#LN_kx_rß_psk
 "kx-rß-psk"

	)

5041 
	#NID_kx_rß_psk
 1042

	)

5043 
	#SN_kx_psk
 "KxPSK"

	)

5044 
	#LN_kx_psk
 "kx-psk"

	)

5045 
	#NID_kx_psk
 1043

	)

5047 
	#SN_kx_§p
 "KxSRP"

	)

5048 
	#LN_kx_§p
 "kx-§p"

	)

5049 
	#NID_kx_§p
 1044

	)

5051 
	#SN_kx_go°
 "KxGOST"

	)

5052 
	#LN_kx_go°
 "kx-go°"

	)

5053 
	#NID_kx_go°
 1045

	)

5055 
	#SN_kx_™y
 "KxANY"

	)

5056 
	#LN_kx_™y
 "kx-™y"

	)

5057 
	#NID_kx_™y
 1063

	)

5059 
	#SN_auth_rß
 "AuthRSA"

	)

5060 
	#LN_auth_rß
 "auth-rß"

	)

5061 
	#NID_auth_rß
 1046

	)

5063 
	#SN_auth_ecdß
 "AuthECDSA"

	)

5064 
	#LN_auth_ecdß
 "auth-ecdß"

	)

5065 
	#NID_auth_ecdß
 1047

	)

5067 
	#SN_auth_psk
 "AuthPSK"

	)

5068 
	#LN_auth_psk
 "auth-psk"

	)

5069 
	#NID_auth_psk
 1048

	)

5071 
	#SN_auth_dss
 "AuthDSS"

	)

5072 
	#LN_auth_dss
 "auth-dss"

	)

5073 
	#NID_auth_dss
 1049

	)

5075 
	#SN_auth_go°01
 "AuthGOST01"

	)

5076 
	#LN_auth_go°01
 "auth-go°01"

	)

5077 
	#NID_auth_go°01
 1050

	)

5079 
	#SN_auth_go°12
 "AuthGOST12"

	)

5080 
	#LN_auth_go°12
 "auth-go°12"

	)

5081 
	#NID_auth_go°12
 1051

	)

5083 
	#SN_auth_§p
 "AuthSRP"

	)

5084 
	#LN_auth_§p
 "auth-§p"

	)

5085 
	#NID_auth_§p
 1052

	)

5087 
	#SN_auth_nuŒ
 "AuthNULL"

	)

5088 
	#LN_auth_nuŒ
 "auth-nuŒ"

	)

5089 
	#NID_auth_nuŒ
 1053

	)

5091 
	#SN_auth_™y
 "AuthANY"

	)

5092 
	#LN_auth_™y
 "auth-™y"

	)

5093 
	#NID_auth_™y
 1064

	)

5095 
	#SN_pﬁy1305
 "Pﬁy1305"

	)

5096 
	#LN_pﬁy1305
 "pﬁy1305"

	)

5097 
	#NID_pﬁy1305
 1061

	)

5099 
	#SN_sùhash
 "SùHash"

	)

5100 
	#LN_sùhash
 "sùhash"

	)

5101 
	#NID_sùhash
 1062

	)

5103 
	#SN_ffdhe2048
 "ffdhe2048"

	)

5104 
	#NID_ffdhe2048
 1126

	)

5106 
	#SN_ffdhe3072
 "ffdhe3072"

	)

5107 
	#NID_ffdhe3072
 1127

	)

5109 
	#SN_ffdhe4096
 "ffdhe4096"

	)

5110 
	#NID_ffdhe4096
 1128

	)

5112 
	#SN_ffdhe6144
 "ffdhe6144"

	)

5113 
	#NID_ffdhe6144
 1129

	)

5115 
	#SN_ffdhe8192
 "ffdhe8192"

	)

5116 
	#NID_ffdhe8192
 1130

	)

5118 
	#SN_modp_1536
 "modp_1536"

	)

5119 
	#NID_modp_1536
 1199

	)

5121 
	#SN_modp_2048
 "modp_2048"

	)

5122 
	#NID_modp_2048
 1200

	)

5124 
	#SN_modp_3072
 "modp_3072"

	)

5125 
	#NID_modp_3072
 1201

	)

5127 
	#SN_modp_4096
 "modp_4096"

	)

5128 
	#NID_modp_4096
 1202

	)

5130 
	#SN_modp_6144
 "modp_6144"

	)

5131 
	#NID_modp_6144
 1203

	)

5133 
	#SN_modp_8192
 "modp_8192"

	)

5134 
	#NID_modp_8192
 1204

	)

5136 
	#SN_ISO_UA
 "ISO-UA"

	)

5137 
	#NID_ISO_UA
 1150

	)

5138 
	#OBJ_ISO_UA
 
OBJ_membî_body
,804L

	)

5140 
	#SN_ua_pki
 "ua-pki"

	)

5141 
	#NID_ua_pki
 1151

	)

5142 
	#OBJ_ua_pki
 
OBJ_ISO_UA
,2L,1L,1L,1L

	)

5144 
	#SN_d°u28147
 "d°u28147"

	)

5145 
	#LN_d°u28147
 "DSTU Go° 28147-2009"

	)

5146 
	#NID_d°u28147
 1152

	)

5147 
	#OBJ_d°u28147
 
OBJ_ua_pki
,1L,1L,1L

	)

5149 
	#SN_d°u28147_ofb
 "d°u28147-ofb"

	)

5150 
	#LN_d°u28147_ofb
 "DSTU Go° 28147-2009 OFB mode"

	)

5151 
	#NID_d°u28147_ofb
 1153

	)

5152 
	#OBJ_d°u28147_ofb
 
OBJ_d°u28147
,2L

	)

5154 
	#SN_d°u28147_cfb
 "d°u28147-cfb"

	)

5155 
	#LN_d°u28147_cfb
 "DSTU Go° 28147-2009 CFB mode"

	)

5156 
	#NID_d°u28147_cfb
 1154

	)

5157 
	#OBJ_d°u28147_cfb
 
OBJ_d°u28147
,3L

	)

5159 
	#SN_d°u28147_wøp
 "d°u28147-wøp"

	)

5160 
	#LN_d°u28147_wøp
 "DSTU Go° 28147-2009 key wøp"

	)

5161 
	#NID_d°u28147_wøp
 1155

	)

5162 
	#OBJ_d°u28147_wøp
 
OBJ_d°u28147
,5L

	)

5164 
	#SN_hmacWôhD°u34311
 "hmacWôhD°u34311"

	)

5165 
	#LN_hmacWôhD°u34311
 "HMAC DSTU Go° 34311-95"

	)

5166 
	#NID_hmacWôhD°u34311
 1156

	)

5167 
	#OBJ_hmacWôhD°u34311
 
OBJ_ua_pki
,1L,1L,2L

	)

5169 
	#SN_d°u34311
 "d°u34311"

	)

5170 
	#LN_d°u34311
 "DSTU Go° 34311-95"

	)

5171 
	#NID_d°u34311
 1157

	)

5172 
	#OBJ_d°u34311
 
OBJ_ua_pki
,1L,2L,1L

	)

5174 
	#SN_d°u4145À
 "d°u4145À"

	)

5175 
	#LN_d°u4145À
 "DSTU 4145-2002Üôéêídün"

	)

5176 
	#NID_d°u4145À
 1158

	)

5177 
	#OBJ_d°u4145À
 
OBJ_ua_pki
,1L,3L,1L,1L

	)

5179 
	#SN_d°u4145be
 "d°u4145be"

	)

5180 
	#LN_d°u4145be
 "DSTU 4145-2002 bigÉndün"

	)

5181 
	#NID_d°u4145be
 1159

	)

5182 
	#OBJ_d°u4145be
 
OBJ_d°u4145À
,1L,1L

	)

5184 
	#SN_uacurve0
 "uacurve0"

	)

5185 
	#LN_uacurve0
 "DSTU curvê0"

	)

5186 
	#NID_uacurve0
 1160

	)

5187 
	#OBJ_uacurve0
 
OBJ_d°u4145À
,2L,0L

	)

5189 
	#SN_uacurve1
 "uacurve1"

	)

5190 
	#LN_uacurve1
 "DSTU curvê1"

	)

5191 
	#NID_uacurve1
 1161

	)

5192 
	#OBJ_uacurve1
 
OBJ_d°u4145À
,2L,1L

	)

5194 
	#SN_uacurve2
 "uacurve2"

	)

5195 
	#LN_uacurve2
 "DSTU curvê2"

	)

5196 
	#NID_uacurve2
 1162

	)

5197 
	#OBJ_uacurve2
 
OBJ_d°u4145À
,2L,2L

	)

5199 
	#SN_uacurve3
 "uacurve3"

	)

5200 
	#LN_uacurve3
 "DSTU curvê3"

	)

5201 
	#NID_uacurve3
 1163

	)

5202 
	#OBJ_uacurve3
 
OBJ_d°u4145À
,2L,3L

	)

5204 
	#SN_uacurve4
 "uacurve4"

	)

5205 
	#LN_uacurve4
 "DSTU curvê4"

	)

5206 
	#NID_uacurve4
 1164

	)

5207 
	#OBJ_uacurve4
 
OBJ_d°u4145À
,2L,4L

	)

5209 
	#SN_uacurve5
 "uacurve5"

	)

5210 
	#LN_uacurve5
 "DSTU curvê5"

	)

5211 
	#NID_uacurve5
 1165

	)

5212 
	#OBJ_uacurve5
 
OBJ_d°u4145À
,2L,5L

	)

5214 
	#SN_uacurve6
 "uacurve6"

	)

5215 
	#LN_uacurve6
 "DSTU curvê6"

	)

5216 
	#NID_uacurve6
 1166

	)

5217 
	#OBJ_uacurve6
 
OBJ_d°u4145À
,2L,6L

	)

5219 
	#SN_uacurve7
 "uacurve7"

	)

5220 
	#LN_uacurve7
 "DSTU curvê7"

	)

5221 
	#NID_uacurve7
 1167

	)

5222 
	#OBJ_uacurve7
 
OBJ_d°u4145À
,2L,7L

	)

5224 
	#SN_uacurve8
 "uacurve8"

	)

5225 
	#LN_uacurve8
 "DSTU curvê8"

	)

5226 
	#NID_uacurve8
 1168

	)

5227 
	#OBJ_uacurve8
 
OBJ_d°u4145À
,2L,8L

	)

5229 
	#SN_uacurve9
 "uacurve9"

	)

5230 
	#LN_uacurve9
 "DSTU curvê9"

	)

5231 
	#NID_uacurve9
 1169

	)

5232 
	#OBJ_uacurve9
 
OBJ_d°u4145À
,2L,9L

	)

	@/usr/include/openssl/objectserr.h

11 #i‚de‡
HEADER_OBJERR_H


12 
	#HEADER_OBJERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_OBJ_°rögs
();

26 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

27 
	#OBJ_F_OBJ_ADD_SIGID
 107

	)

28 
	#OBJ_F_OBJ_CREATE
 100

	)

29 
	#OBJ_F_OBJ_DUP
 101

	)

30 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

31 
	#OBJ_F_OBJ_NID2LN
 102

	)

32 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

33 
	#OBJ_F_OBJ_NID2SN
 104

	)

34 
	#OBJ_F_OBJ_TXT2OBJ
 108

	)

39 
	#OBJ_R_OID_EXISTS
 102

	)

40 
	#OBJ_R_UNKNOWN_NID
 101

	)

	@/usr/include/openssl/opensslv.h

10 #i‚de‡
HEADER_OPENSSLV_H


11 
	#HEADER_OPENSSLV_H


	)

13 #ifde‡ 
__˝lu•lus


42 
	#OPENSSL_VERSION_NUMBER
 0x101010bfL

	)

43 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.1.1k FIPS 25 M¨ 2021"

	)

94 
	#SHLIB_VERSION_HISTORY
 ""

	)

95 
	#SHLIB_VERSION_NUMBER
 "1.1"

	)

98 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

10 #i‚de‡
HEADER_PKCS7_H


11 
	#HEADER_PKCS7_H


	)

13 
	~<›ís¶/a¢1.h
>

14 
	~<›ís¶/bio.h
>

15 
	~<›ís¶/e_os2.h
>

17 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/os¶_typ.h
>

19 
	~<›ís¶/pkcs7îr.h
>

21 #ifde‡ 
__˝lu•lus


32 
	spkcs7_issuî_™d_£rül_°
 {

33 
X509_NAME
 *
issuî
;

34 
ASN1_INTEGER
 *
£rül
;

35 } 
	tPKCS7_ISSUER_AND_SERIAL
;

37 
	spkcs7_sig√r_öfo_°
 {

38 
ASN1_INTEGER
 *
vîsi⁄
;

39 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

40 
X509_ALGOR
 *
dige°_Æg
;

41 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

42 
X509_ALGOR
 *
dige°_íc_Æg
;

43 
ASN1_OCTET_STRING
 *
íc_dige°
;

44 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

46 
EVP_PKEY
 *
pkey
;

47 } 
	tPKCS7_SIGNER_INFO
;

49 
DEFINE_STACK_OF
(
PKCS7_SIGNER_INFO
)

51 
	spkcs7_ªcù_öfo_°
 {

52 
ASN1_INTEGER
 *
vîsi⁄
;

53 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

54 
X509_ALGOR
 *
key_íc_Æg‹
;

55 
ASN1_OCTET_STRING
 *
íc_key
;

56 
X509
 *
˚π
;

57 } 
	tPKCS7_RECIP_INFO
;

59 
DEFINE_STACK_OF
(
PKCS7_RECIP_INFO
)

61 
	spkcs7_sig√d_°
 {

62 
ASN1_INTEGER
 *
vîsi⁄
;

63 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

64 
STACK_OF
(
X509
Ë*
˚π
;

65 
STACK_OF
(
X509_CRL
Ë*
¸l
;

66 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

67 
pkcs7_°
 *
c⁄ã¡s
;

68 } 
	tPKCS7_SIGNED
;

74 
	spkcs7_íc_c⁄ã¡_°
 {

75 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

76 
X509_ALGOR
 *
Æg‹ôhm
;

77 
ASN1_OCTET_STRING
 *
íc_d©a
;

78 c⁄° 
EVP_CIPHER
 *
cùhî
;

79 } 
	tPKCS7_ENC_CONTENT
;

81 
	spkcs7_ívñ›ed_°
 {

82 
ASN1_INTEGER
 *
vîsi⁄
;

83 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

84 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

85 } 
	tPKCS7_ENVELOPE
;

87 
	spkcs7_sig√d™dívñ›ed_°
 {

88 
ASN1_INTEGER
 *
vîsi⁄
;

89 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

90 
STACK_OF
(
X509
Ë*
˚π
;

91 
STACK_OF
(
X509_CRL
Ë*
¸l
;

92 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

93 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

94 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

95 } 
	tPKCS7_SIGN_ENVELOPE
;

97 
	spkcs7_dige°_°
 {

98 
ASN1_INTEGER
 *
vîsi⁄
;

99 
X509_ALGOR
 *
md
;

100 
pkcs7_°
 *
c⁄ã¡s
;

101 
ASN1_OCTET_STRING
 *
dige°
;

102 } 
	tPKCS7_DIGEST
;

104 
	spkcs7_í¸y±ed_°
 {

105 
ASN1_INTEGER
 *
vîsi⁄
;

106 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

107 } 
	tPKCS7_ENCRYPT
;

109 
	spkcs7_°
 {

114 *
a¢1
;

115 
Àngth
;

116 
	#PKCS7_S_HEADER
 0

	)

117 
	#PKCS7_S_BODY
 1

	)

118 
	#PKCS7_S_TAIL
 2

	)

119 
°©e
;

120 
dëached
;

121 
ASN1_OBJECT
 *
ty≥
;

128 *
±r
;

130 
ASN1_OCTET_STRING
 *
d©a
;

132 
PKCS7_SIGNED
 *
sign
;

134 
PKCS7_ENVELOPE
 *
ívñ›ed
;

136 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

138 
PKCS7_DIGEST
 *
dige°
;

140 
PKCS7_ENCRYPT
 *
í¸y±ed
;

142 
ASN1_TYPE
 *
Ÿhî
;

143 } 
d
;

144 } 
	tPKCS7
;

146 
DEFINE_STACK_OF
(
PKCS7
)

148 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

149 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

151 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

152 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

154 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

155 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

156 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

157 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

158 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

159 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

160 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

162 
	#PKCS7_£t_dëached
(
p
,
v
) \

163 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

164 
	#PKCS7_gë_dëached
(
p
) \

165 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

167 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

171 
	#PKCS7_TEXT
 0x1

	)

172 
	#PKCS7_NOCERTS
 0x2

	)

173 
	#PKCS7_NOSIGS
 0x4

	)

174 
	#PKCS7_NOCHAIN
 0x8

	)

175 
	#PKCS7_NOINTERN
 0x10

	)

176 
	#PKCS7_NOVERIFY
 0x20

	)

177 
	#PKCS7_DETACHED
 0x40

	)

178 
	#PKCS7_BINARY
 0x80

	)

179 
	#PKCS7_NOATTR
 0x100

	)

180 
	#PKCS7_NOSMIMECAP
 0x200

	)

181 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

182 
	#PKCS7_CRLFEOL
 0x800

	)

183 
	#PKCS7_STREAM
 0x1000

	)

184 
	#PKCS7_NOCRL
 0x2000

	)

185 
	#PKCS7_PARTIAL
 0x4000

	)

186 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

187 
	#PKCS7_NO_DUAL_CONTENT
 0x10000

	)

191 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

192 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

193 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

194 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

195 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

196 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

197 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

198 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

199 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

202 
	#SMIME_ASCIICRLF
 0x80000

	)

204 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

206 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,

207 c⁄° 
EVP_MD
 *
ty≥
, *
md
,

208 *
Àn
);

209 #i‚de‡
OPENSSL_NO_STDIO


210 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
, PKCS7 **
p7
);

211 
i2d_PKCS7_Â
(
FILE
 *
Â
, 
PKCS7
 *
p7
);

213 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

214 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
, PKCS7 **
p7
);

215 
i2d_PKCS7_bio
(
BIO
 *
bp
, 
PKCS7
 *
p7
);

216 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

217 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

219 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

220 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

221 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

222 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

223 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

224 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

225 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

226 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

227 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

229 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

230 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

232 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

233 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

235 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

237 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

238 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

239 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

240 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

241 c⁄° 
EVP_MD
 *
dg°
);

242 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

243 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

244 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

245 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

246 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

247 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

248 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

249 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

250 
X509
 *
x509
);

252 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

253 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

254 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

256 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

257 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

258 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

259 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

260 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

262 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

263 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

264 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

265 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

266 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

267 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

268 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

269 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

271 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

272 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

273 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
ty≥
,

274 *
d©a
);

275 
PKCS7_add_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

276 *
vÆue
);

277 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

278 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

279 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

280 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

281 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

282 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

284 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

285 
BIO
 *
d©a
, 
Êags
);

287 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

288 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
,

289 c⁄° 
EVP_MD
 *
md
, 
Êags
);

291 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

292 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

293 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

294 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
,

295 
Êags
);

296 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

297 
Êags
);

298 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
,

299 
Êags
);

301 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

302 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

303 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

304 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

306 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

307 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

308 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

309 c⁄° *
md
, 
mdÀn
);

311 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

312 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

314 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

316 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

10 #i‚de‡
HEADER_SHA_H


11 
	#HEADER_SHA_H


	)

13 
	~<›ís¶/e_os2.h
>

14 
	~<°ddef.h
>

16 #ifde‡ 
__˝lu•lus


25 
	#SHA_LONG
 

	)

27 
	#SHA_LBLOCK
 16

	)

28 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4)

	)

31 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

32 
	#SHA_DIGEST_LENGTH
 20

	)

34 
	sSHA°©e_°
 {

35 
SHA_LONG
 
h0
, 
h1
, 
h2
, 
h3
, 
h4
;

36 
SHA_LONG
 
Nl
, 
Nh
;

37 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

38 
num
;

39 } 
	tSHA_CTX
;

41 
SHA1_Inô
(
SHA_CTX
 *
c
);

42 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

43 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

44 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

45 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

47 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4)

	)

51 
	sSHA256°©e_°
 {

52 
SHA_LONG
 
h
[8];

53 
SHA_LONG
 
Nl
, 
Nh
;

54 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

55 
num
, 
md_Àn
;

56 } 
	tSHA256_CTX
;

58 
SHA224_Inô
(
SHA256_CTX
 *
c
);

59 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

60 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

61 *
SHA224
(c⁄° *
d
, 
size_t
 
n
, *
md
);

62 
SHA256_Inô
(
SHA256_CTX
 *
c
);

63 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

64 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

65 *
SHA256
(c⁄° *
d
, 
size_t
 
n
, *
md
);

66 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

68 
	#SHA224_DIGEST_LENGTH
 28

	)

69 
	#SHA256_DIGEST_LENGTH
 32

	)

70 
	#SHA384_DIGEST_LENGTH
 48

	)

71 
	#SHA512_DIGEST_LENGTH
 64

	)

83 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8)

	)

84 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

85 
	#SHA_LONG64
 
__öt64


	)

86 
	#U64
(
C
ËC##
UI64


	)

87 #ñi‡
deföed
(
__¨ch64__
)

88 
	#SHA_LONG64
 

	)

89 
	#U64
(
C
ËC##
UL


	)

91 
	#SHA_LONG64
 

	)

92 
	#U64
(
C
ËC##
ULL


	)

95 
	sSHA512°©e_°
 {

96 
SHA_LONG64
 
h
[8];

97 
SHA_LONG64
 
Nl
, 
Nh
;

99 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

100 
p
[
SHA512_CBLOCK
];

101 } 
u
;

102 
num
, 
md_Àn
;

103 } 
	tSHA512_CTX
;

105 
SHA384_Inô
(
SHA512_CTX
 *
c
);

106 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

107 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

108 *
SHA384
(c⁄° *
d
, 
size_t
 
n
, *
md
);

109 
SHA512_Inô
(
SHA512_CTX
 *
c
);

110 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

111 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

112 *
SHA512
(c⁄° *
d
, 
size_t
 
n
, *
md
);

113 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

115 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

10 #i‚de‡
HEADER_STACK_H


11 
	#HEADER_STACK_H


	)

13 #ifde‡ 
__˝lu•lus


17 
°ack_°
 
	tOPENSSL_STACK
;

19 (*
OPENSSL_sk_compfunc
)(const *, const *);

20 (*
OPENSSL_sk_‰ìfunc
)(*);

21 *(*
	tOPENSSL_sk_c›yfunc
)(const *);

23 
OPENSSL_sk_num
(c⁄° 
OPENSSL_STACK
 *);

24 *
OPENSSL_sk_vÆue
(c⁄° 
OPENSSL_STACK
 *, );

26 *
OPENSSL_sk_£t
(
OPENSSL_STACK
 *
°
, 
i
, c⁄° *
d©a
);

28 
OPENSSL_STACK
 *
OPENSSL_sk_√w
(
OPENSSL_sk_compfunc
 
cmp
);

29 
OPENSSL_STACK
 *
OPENSSL_sk_√w_nuŒ
();

30 
OPENSSL_STACK
 *
OPENSSL_sk_√w_ª£rve
(
OPENSSL_sk_compfunc
 
c
, 
n
);

31 
OPENSSL_sk_ª£rve
(
OPENSSL_STACK
 *
°
, 
n
);

32 
OPENSSL_sk_‰ì
(
OPENSSL_STACK
 *);

33 
OPENSSL_sk_p›_‰ì
(
OPENSSL_STACK
 *
°
, (*
func
) (*));

34 
OPENSSL_STACK
 *
OPENSSL_sk_dìp_c›y
(const OPENSSL_STACK *,

35 
OPENSSL_sk_c›yfunc
 
c
,

36 
OPENSSL_sk_‰ìfunc
 
f
);

37 
OPENSSL_sk_ö£π
(
OPENSSL_STACK
 *
sk
, c⁄° *
d©a
, 
whîe
);

38 *
OPENSSL_sk_dñëe
(
OPENSSL_STACK
 *
°
, 
loc
);

39 *
OPENSSL_sk_dñëe_±r
(
OPENSSL_STACK
 *
°
, c⁄° *
p
);

40 
OPENSSL_sk_föd
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

41 
OPENSSL_sk_föd_ex
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

42 
OPENSSL_sk_push
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

43 
OPENSSL_sk_unshi·
(
OPENSSL_STACK
 *
°
, c⁄° *
d©a
);

44 *
OPENSSL_sk_shi·
(
OPENSSL_STACK
 *
°
);

45 *
OPENSSL_sk_p›
(
OPENSSL_STACK
 *
°
);

46 
OPENSSL_sk_zîo
(
OPENSSL_STACK
 *
°
);

47 
OPENSSL_sk_compfunc
 
OPENSSL_sk_£t_cmp_func
(
OPENSSL_STACK
 *
sk
,

48 
OPENSSL_sk_compfunc
 
cmp
);

49 
OPENSSL_STACK
 *
OPENSSL_sk_dup
(c⁄° OPENSSL_STACK *
°
);

50 
OPENSSL_sk_s‹t
(
OPENSSL_STACK
 *
°
);

51 
OPENSSL_sk_is_s‹ãd
(c⁄° 
OPENSSL_STACK
 *
°
);

53 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

54 
	#_STACK
 
OPENSSL_STACK


	)

55 
	#sk_num
 
OPENSSL_sk_num


	)

56 
	#sk_vÆue
 
OPENSSL_sk_vÆue


	)

57 
	#sk_£t
 
OPENSSL_sk_£t


	)

58 
	#sk_√w
 
OPENSSL_sk_√w


	)

59 
	#sk_√w_nuŒ
 
OPENSSL_sk_√w_nuŒ


	)

60 
	#sk_‰ì
 
OPENSSL_sk_‰ì


	)

61 
	#sk_p›_‰ì
 
OPENSSL_sk_p›_‰ì


	)

62 
	#sk_dìp_c›y
 
OPENSSL_sk_dìp_c›y


	)

63 
	#sk_ö£π
 
OPENSSL_sk_ö£π


	)

64 
	#sk_dñëe
 
OPENSSL_sk_dñëe


	)

65 
	#sk_dñëe_±r
 
OPENSSL_sk_dñëe_±r


	)

66 
	#sk_föd
 
OPENSSL_sk_föd


	)

67 
	#sk_föd_ex
 
OPENSSL_sk_föd_ex


	)

68 
	#sk_push
 
OPENSSL_sk_push


	)

69 
	#sk_unshi·
 
OPENSSL_sk_unshi·


	)

70 
	#sk_shi·
 
OPENSSL_sk_shi·


	)

71 
	#sk_p›
 
OPENSSL_sk_p›


	)

72 
	#sk_zîo
 
OPENSSL_sk_zîo


	)

73 
	#sk_£t_cmp_func
 
OPENSSL_sk_£t_cmp_func


	)

74 
	#sk_dup
 
OPENSSL_sk_dup


	)

75 
	#sk_s‹t
 
OPENSSL_sk_s‹t


	)

76 
	#sk_is_s‹ãd
 
OPENSSL_sk_is_s‹ãd


	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509_vfy.h

10 #i‚de‡
HEADER_X509_VFY_H


11 
	#HEADER_X509_VFY_H


	)

16 #i‚de‡
HEADER_X509_H


17 
	~<›ís¶/x509.h
>

20 
	~<›ís¶/›ís¶c⁄f.h
>

21 
	~<›ís¶/lhash.h
>

22 
	~<›ís¶/bio.h
>

23 
	~<›ís¶/¸y±o.h
>

24 
	~<›ís¶/symhacks.h
>

26 #ifde‡ 
__˝lu•lus


48 
X509_LU_NONE
 = 0,

49 
X509_LU_X509
, 
X509_LU_CRL


50 } 
	tX509_LOOKUP_TYPE
;

52 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

53 
	#X509_LU_RETRY
 -1

	)

54 
	#X509_LU_FAIL
 0

	)

57 
DEFINE_STACK_OF
(
X509_LOOKUP
)

58 
DEFINE_STACK_OF
(
X509_OBJECT
)

59 
DEFINE_STACK_OF
(
X509_VERIFY_PARAM
)

61 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

63 (*
X509_STORE_CTX_vîify_cb
)(, 
	tX509_STORE_CTX
 *);

64 (*
X509_STORE_CTX_vîify_‚
)(
	tX509_STORE_CTX
 *);

65 (*
X509_STORE_CTX_gë_issuî_‚
)(
	tX509
 **
	tissuî
,

66 
	tX509_STORE_CTX
 *
	t˘x
, 
	tX509
 *
	tx
);

67 (*
X509_STORE_CTX_check_issued_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

68 
	tX509
 *
	tx
, X509 *
	tissuî
);

69 (*
X509_STORE_CTX_check_ªvoˇti⁄_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

70 (*
X509_STORE_CTX_gë_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

71 
	tX509_CRL
 **
	t¸l
, 
	tX509
 *
	tx
);

72 (*
X509_STORE_CTX_check_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
, 
	tX509_CRL
 *
	t¸l
);

73 (*
X509_STORE_CTX_˚π_¸l_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

74 
	tX509_CRL
 *
	t¸l
, 
	tX509
 *
	tx
);

75 (*
X509_STORE_CTX_check_pﬁicy_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

76 
STACK_OF
(
	tX509
Ë*(*
	tX509_STORE_CTX_lookup_˚πs_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

77 
	tX509_NAME
 *
	tnm
);

78 
STACK_OF
(
	tX509_CRL
Ë*(*
	tX509_STORE_CTX_lookup_¸ls_‚
)(
	tX509_STORE_CTX
 *
	t˘x
,

79 
	tX509_NAME
 *
	tnm
);

80 (*
X509_STORE_CTX_˛ónup_‚
)(
	tX509_STORE_CTX
 *
	t˘x
);

83 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

85 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

86 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

87 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

88 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

90 
	#X509_L_FILE_LOAD
 1

	)

91 
	#X509_L_ADD_DIR
 2

	)

93 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

94 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

96 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

97 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

99 
	#X509_V_OK
 0

	)

100 
	#X509_V_ERR_UNSPECIFIED
 1

	)

101 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

102 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

103 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

104 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

105 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

106 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

107 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

108 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

109 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

110 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

111 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

112 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

113 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

114 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

115 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

116 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

117 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

118 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

119 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

120 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

121 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

122 
	#X509_V_ERR_CERT_REVOKED
 23

	)

123 
	#X509_V_ERR_INVALID_CA
 24

	)

124 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

125 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

126 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

127 
	#X509_V_ERR_CERT_REJECTED
 28

	)

129 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

130 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

131 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

132 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

133 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

134 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

135 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

136 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

137 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

138 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

139 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

140 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

141 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

142 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

143 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

144 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

145 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

146 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

147 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

148 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

149 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

151 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

152 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

153 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

154 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

155 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

157 
	#X509_V_ERR_PATH_LOOP
 55

	)

159 
	#X509_V_ERR_SUITE_B_INVALID_VERSION
 56

	)

160 
	#X509_V_ERR_SUITE_B_INVALID_ALGORITHM
 57

	)

161 
	#X509_V_ERR_SUITE_B_INVALID_CURVE
 58

	)

162 
	#X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM
 59

	)

163 
	#X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED
 60

	)

164 
	#X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256
 61

	)

166 
	#X509_V_ERR_HOSTNAME_MISMATCH
 62

	)

167 
	#X509_V_ERR_EMAIL_MISMATCH
 63

	)

168 
	#X509_V_ERR_IP_ADDRESS_MISMATCH
 64

	)

170 
	#X509_V_ERR_DANE_NO_MATCH
 65

	)

172 
	#X509_V_ERR_EE_KEY_TOO_SMALL
 66

	)

173 
	#X509_V_ERR_CA_KEY_TOO_SMALL
 67

	)

174 
	#X509_V_ERR_CA_MD_TOO_WEAK
 68

	)

176 
	#X509_V_ERR_INVALID_CALL
 69

	)

178 
	#X509_V_ERR_STORE_LOOKUP
 70

	)

180 
	#X509_V_ERR_NO_VALID_SCTS
 71

	)

182 
	#X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION
 72

	)

184 
	#X509_V_ERR_OCSP_VERIFY_NEEDED
 73

	)

185 
	#X509_V_ERR_OCSP_VERIFY_FAILED
 74

	)

186 
	#X509_V_ERR_OCSP_CERT_UNKNOWN
 75

	)

187 
	#X509_V_ERR_SIGNATURE_ALGORITHM_MISMATCH
 76

	)

188 
	#X509_V_ERR_NO_ISSUER_PUBLIC_KEY
 77

	)

189 
	#X509_V_ERR_UNSUPPORTED_SIGNATURE_ALGORITHM
 78

	)

190 
	#X509_V_ERR_EC_KEY_EXPLICIT_PARAMS
 79

	)

194 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

195 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x0

	)

198 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

200 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

202 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

204 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

206 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

208 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

210 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

212 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

214 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

216 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

218 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

220 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

222 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

224 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

226 
	#X509_V_FLAG_TRUSTED_FIRST
 0x8000

	)

228 
	#X509_V_FLAG_SUITEB_128_LOS_ONLY
 0x10000

	)

230 
	#X509_V_FLAG_SUITEB_192_LOS
 0x20000

	)

232 
	#X509_V_FLAG_SUITEB_128_LOS
 0x30000

	)

234 
	#X509_V_FLAG_PARTIAL_CHAIN
 0x80000

	)

240 
	#X509_V_FLAG_NO_ALT_CHAINS
 0x100000

	)

242 
	#X509_V_FLAG_NO_CHECK_TIME
 0x200000

	)

244 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

245 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

246 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

247 
	#X509_VP_FLAG_LOCKED
 0x8

	)

248 
	#X509_VP_FLAG_ONCE
 0x10

	)

251 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

252 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

253 | 
X509_V_FLAG_INHIBIT_ANY
 \

254 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

256 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
X509_LOOKUP_TYPE
 
ty≥
,

257 
X509_NAME
 *
«me
);

258 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,

259 
X509_LOOKUP_TYPE
 
ty≥
,

260 
X509_NAME
 *
«me
);

261 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
,

262 
X509_OBJECT
 *
x
);

263 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

264 
X509_OBJECT
 *
X509_OBJECT_√w
();

265 
X509_OBJECT_‰ì
(
X509_OBJECT
 *
a
);

266 
X509_LOOKUP_TYPE
 
X509_OBJECT_gë_ty≥
(c⁄° 
X509_OBJECT
 *
a
);

267 
X509
 *
X509_OBJECT_gë0_X509
(c⁄° 
X509_OBJECT
 *
a
);

268 
X509_OBJECT_£t1_X509
(
X509_OBJECT
 *
a
, 
X509
 *
obj
);

269 
X509_CRL
 *
X509_OBJECT_gë0_X509_CRL
(
X509_OBJECT
 *
a
);

270 
X509_OBJECT_£t1_X509_CRL
(
X509_OBJECT
 *
a
, 
X509_CRL
 *
obj
);

271 
X509_STORE
 *
X509_STORE_√w
();

272 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

273 
X509_STORE_lock
(
X509_STORE
 *
˘x
);

274 
X509_STORE_u∆ock
(
X509_STORE
 *
˘x
);

275 
X509_STORE_up_ªf
(
X509_STORE
 *
v
);

276 
STACK_OF
(
X509_OBJECT
Ë*
X509_STORE_gë0_obje˘s
(
X509_STORE
 *
v
);

278 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

279 
STACK_OF
(
X509_CRL
Ë*
X509_STORE_CTX_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

280 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

281 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

282 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

283 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

284 
X509_VERIFY_PARAM
 *
X509_STORE_gë0_∑øm
(
X509_STORE
 *
˘x
);

286 
X509_STORE_£t_vîify
(
X509_STORE
 *
˘x
, 
X509_STORE_CTX_vîify_‚
 
vîify
);

287 
	#X509_STORE_£t_vîify_func
(
˘x
, 
func
) \

288 
	`X509_STORE_£t_vîify
((
˘x
),(
func
))

	)

289 
X509_STORE_CTX_£t_vîify
(
X509_STORE_CTX
 *
˘x
,

290 
X509_STORE_CTX_vîify_‚
 
vîify
);

291 
X509_STORE_CTX_vîify_‚
 
X509_STORE_gë_vîify
(
X509_STORE
 *
˘x
);

292 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

293 
X509_STORE_CTX_vîify_cb
 
vîify_cb
);

294 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
) \

295 
	`X509_STORE_£t_vîify_cb
((
˘x
),(
func
))

	)

296 
X509_STORE_CTX_vîify_cb
 
X509_STORE_gë_vîify_cb
(
X509_STORE
 *
˘x
);

297 
X509_STORE_£t_gë_issuî
(
X509_STORE
 *
˘x
,

298 
X509_STORE_CTX_gë_issuî_‚
 
gë_issuî
);

299 
X509_STORE_CTX_gë_issuî_‚
 
X509_STORE_gë_gë_issuî
(
X509_STORE
 *
˘x
);

300 
X509_STORE_£t_check_issued
(
X509_STORE
 *
˘x
,

301 
X509_STORE_CTX_check_issued_‚
 
check_issued
);

302 
X509_STORE_CTX_check_issued_‚
 
X509_STORE_gë_check_issued
(
X509_STORE
 *
˘x
);

303 
X509_STORE_£t_check_ªvoˇti⁄
(
X509_STORE
 *
˘x
,

304 
X509_STORE_CTX_check_ªvoˇti⁄_‚
 
check_ªvoˇti⁄
);

305 
X509_STORE_CTX_check_ªvoˇti⁄_‚
 
X509_STORE_gë_check_ªvoˇti⁄
(
X509_STORE
 *
˘x
);

306 
X509_STORE_£t_gë_¸l
(
X509_STORE
 *
˘x
,

307 
X509_STORE_CTX_gë_¸l_‚
 
gë_¸l
);

308 
X509_STORE_CTX_gë_¸l_‚
 
X509_STORE_gë_gë_¸l
(
X509_STORE
 *
˘x
);

309 
X509_STORE_£t_check_¸l
(
X509_STORE
 *
˘x
,

310 
X509_STORE_CTX_check_¸l_‚
 
check_¸l
);

311 
X509_STORE_CTX_check_¸l_‚
 
X509_STORE_gë_check_¸l
(
X509_STORE
 *
˘x
);

312 
X509_STORE_£t_˚π_¸l
(
X509_STORE
 *
˘x
,

313 
X509_STORE_CTX_˚π_¸l_‚
 
˚π_¸l
);

314 
X509_STORE_CTX_˚π_¸l_‚
 
X509_STORE_gë_˚π_¸l
(
X509_STORE
 *
˘x
);

315 
X509_STORE_£t_check_pﬁicy
(
X509_STORE
 *
˘x
,

316 
X509_STORE_CTX_check_pﬁicy_‚
 
check_pﬁicy
);

317 
X509_STORE_CTX_check_pﬁicy_‚
 
X509_STORE_gë_check_pﬁicy
(
X509_STORE
 *
˘x
);

318 
X509_STORE_£t_lookup_˚πs
(
X509_STORE
 *
˘x
,

319 
X509_STORE_CTX_lookup_˚πs_‚
 
lookup_˚πs
);

320 
X509_STORE_CTX_lookup_˚πs_‚
 
X509_STORE_gë_lookup_˚πs
(
X509_STORE
 *
˘x
);

321 
X509_STORE_£t_lookup_¸ls
(
X509_STORE
 *
˘x
,

322 
X509_STORE_CTX_lookup_¸ls_‚
 
lookup_¸ls
);

323 
	#X509_STORE_£t_lookup_¸ls_cb
(
˘x
, 
func
) \

324 
	`X509_STORE_£t_lookup_¸ls
((
˘x
), (
func
))

	)

325 
X509_STORE_CTX_lookup_¸ls_‚
 
X509_STORE_gë_lookup_¸ls
(
X509_STORE
 *
˘x
);

326 
X509_STORE_£t_˛ónup
(
X509_STORE
 *
˘x
,

327 
X509_STORE_CTX_˛ónup_‚
 
˛ónup
);

328 
X509_STORE_CTX_˛ónup_‚
 
X509_STORE_gë_˛ónup
(
X509_STORE
 *
˘x
);

330 
	#X509_STORE_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

331 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509_STORE
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

332 
X509_STORE_£t_ex_d©a
(
X509_STORE
 *
˘x
, 
idx
, *
d©a
);

333 *
X509_STORE_gë_ex_d©a
(
X509_STORE
 *
˘x
, 
idx
);

335 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

337 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

339 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

340 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

341 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

342 
X509_STORE_CTX_£t0_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

343 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

345 
X509_STORE
 *
X509_STORE_CTX_gë0_°‹e
(
X509_STORE_CTX
 *
˘x
);

346 
X509
 *
X509_STORE_CTX_gë0_˚π
(
X509_STORE_CTX
 *
˘x
);

347 
STACK_OF
(
X509
)* 
X509_STORE_CTX_gë0_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
);

348 
X509_STORE_CTX_£t0_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

349 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

350 
X509_STORE_CTX_vîify_cb
 
vîify
);

351 
X509_STORE_CTX_vîify_cb
 
X509_STORE_CTX_gë_vîify_cb
(
X509_STORE_CTX
 *
˘x
);

352 
X509_STORE_CTX_vîify_‚
 
X509_STORE_CTX_gë_vîify
(
X509_STORE_CTX
 *
˘x
);

353 
X509_STORE_CTX_gë_issuî_‚
 
X509_STORE_CTX_gë_gë_issuî
(
X509_STORE_CTX
 *
˘x
);

354 
X509_STORE_CTX_check_issued_‚
 
X509_STORE_CTX_gë_check_issued
(
X509_STORE_CTX
 *
˘x
);

355 
X509_STORE_CTX_check_ªvoˇti⁄_‚
 
X509_STORE_CTX_gë_check_ªvoˇti⁄
(
X509_STORE_CTX
 *
˘x
);

356 
X509_STORE_CTX_gë_¸l_‚
 
X509_STORE_CTX_gë_gë_¸l
(
X509_STORE_CTX
 *
˘x
);

357 
X509_STORE_CTX_check_¸l_‚
 
X509_STORE_CTX_gë_check_¸l
(
X509_STORE_CTX
 *
˘x
);

358 
X509_STORE_CTX_˚π_¸l_‚
 
X509_STORE_CTX_gë_˚π_¸l
(
X509_STORE_CTX
 *
˘x
);

359 
X509_STORE_CTX_check_pﬁicy_‚
 
X509_STORE_CTX_gë_check_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

360 
X509_STORE_CTX_lookup_˚πs_‚
 
X509_STORE_CTX_gë_lookup_˚πs
(
X509_STORE_CTX
 *
˘x
);

361 
X509_STORE_CTX_lookup_¸ls_‚
 
X509_STORE_CTX_gë_lookup_¸ls
(
X509_STORE_CTX
 *
˘x
);

362 
X509_STORE_CTX_˛ónup_‚
 
X509_STORE_CTX_gë_˛ónup
(
X509_STORE_CTX
 *
˘x
);

364 #i‡
OPENSSL_API_COMPAT
 < 0x10100000L

365 
	#X509_STORE_CTX_gë_chaö
 
X509_STORE_CTX_gë0_chaö


	)

366 
	#X509_STORE_CTX_£t_chaö
 
X509_STORE_CTX_£t0_u¡ru°ed


	)

367 
	#X509_STORE_CTX_åu°ed_°ack
 
X509_STORE_CTX_£t0_åu°ed_°ack


	)

368 
	#X509_STORE_gë_by_subje˘
 
X509_STORE_CTX_gë_by_subje˘


	)

369 
	#X509_STORE_gë1_˚πs
 
X509_STORE_CTX_gë1_˚πs


	)

370 
	#X509_STORE_gë1_¸ls
 
X509_STORE_CTX_gë1_¸ls


	)

372 
	#X509_STORE_gë1_˚π
 
X509_STORE_CTX_gë1_˚πs


	)

374 
	#X509_STORE_gë1_¸l
 
X509_STORE_CTX_gë1_¸ls


	)

377 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

378 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

379 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

381 (*
X509_LOOKUP_˘æ_‚
)(
	tX509_LOOKUP
 *
	t˘x
, 
	tcmd
, c⁄° *
	t¨gc
,

382 
	t¨gl
, **
	tªt
);

383 (*
X509_LOOKUP_gë_by_subje˘_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

384 
	tX509_LOOKUP_TYPE
 
	tty≥
,

385 
	tX509_NAME
 *
	t«me
,

386 
	tX509_OBJECT
 *
	tªt
);

387 (*
X509_LOOKUP_gë_by_issuî_£rül_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

388 
	tX509_LOOKUP_TYPE
 
	tty≥
,

389 
	tX509_NAME
 *
	t«me
,

390 
	tASN1_INTEGER
 *
	t£rül
,

391 
	tX509_OBJECT
 *
	tªt
);

392 (*
X509_LOOKUP_gë_by_fögî¥öt_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

393 
	tX509_LOOKUP_TYPE
 
	tty≥
,

394 c⁄° * 
	tbyãs
,

395 
	tÀn
,

396 
	tX509_OBJECT
 *
	tªt
);

397 (*
X509_LOOKUP_gë_by_Æüs_‚
)(
	tX509_LOOKUP
 *
	t˘x
,

398 
	tX509_LOOKUP_TYPE
 
	tty≥
,

399 c⁄° *
	t°r
,

400 
	tÀn
,

401 
	tX509_OBJECT
 *
	tªt
);

403 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_mëh_√w
(c⁄° *
«me
);

404 
X509_LOOKUP_mëh_‰ì
(
X509_LOOKUP_METHOD
 *
mëhod
);

406 
X509_LOOKUP_mëh_£t_√w_ôem
(
X509_LOOKUP_METHOD
 *
mëhod
,

407 (*
√w_ôem
Ë(
X509_LOOKUP
 *
˘x
));

408 (*
X509_LOOKUP_mëh_gë_√w_ôem
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

409 (
X509_LOOKUP
 *
˘x
);

411 
X509_LOOKUP_mëh_£t_‰ì
(
X509_LOOKUP_METHOD
 *
mëhod
,

412 (*
‰ì_‚
Ë(
X509_LOOKUP
 *
˘x
));

413 (*
X509_LOOKUP_mëh_gë_‰ì
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

414 (
X509_LOOKUP
 *
˘x
);

416 
X509_LOOKUP_mëh_£t_öô
(
X509_LOOKUP_METHOD
 *
mëhod
,

417 (*
öô
Ë(
X509_LOOKUP
 *
˘x
));

418 (*
X509_LOOKUP_mëh_gë_öô
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

419 (
X509_LOOKUP
 *
˘x
);

421 
X509_LOOKUP_mëh_£t_shutdown
(
X509_LOOKUP_METHOD
 *
mëhod
,

422 (*
shutdown
Ë(
X509_LOOKUP
 *
˘x
));

423 (*
X509_LOOKUP_mëh_gë_shutdown
(c⁄° 
X509_LOOKUP_METHOD
* 
mëhod
))

424 (
X509_LOOKUP
 *
˘x
);

426 
X509_LOOKUP_mëh_£t_˘æ
(
X509_LOOKUP_METHOD
 *
mëhod
,

427 
X509_LOOKUP_˘æ_‚
 
˘æ_‚
);

428 
X509_LOOKUP_˘æ_‚
 
X509_LOOKUP_mëh_gë_˘æ
(c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

430 
X509_LOOKUP_mëh_£t_gë_by_subje˘
(
X509_LOOKUP_METHOD
 *
mëhod
,

431 
X509_LOOKUP_gë_by_subje˘_‚
 
‚
);

432 
X509_LOOKUP_gë_by_subje˘_‚
 
X509_LOOKUP_mëh_gë_gë_by_subje˘
(

433 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

435 
X509_LOOKUP_mëh_£t_gë_by_issuî_£rül
(
X509_LOOKUP_METHOD
 *
mëhod
,

436 
X509_LOOKUP_gë_by_issuî_£rül_‚
 
‚
);

437 
X509_LOOKUP_gë_by_issuî_£rül_‚
 
X509_LOOKUP_mëh_gë_gë_by_issuî_£rül
(

438 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

440 
X509_LOOKUP_mëh_£t_gë_by_fögî¥öt
(
X509_LOOKUP_METHOD
 *
mëhod
,

441 
X509_LOOKUP_gë_by_fögî¥öt_‚
 
‚
);

442 
X509_LOOKUP_gë_by_fögî¥öt_‚
 
X509_LOOKUP_mëh_gë_gë_by_fögî¥öt
(

443 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

445 
X509_LOOKUP_mëh_£t_gë_by_Æüs
(
X509_LOOKUP_METHOD
 *
mëhod
,

446 
X509_LOOKUP_gë_by_Æüs_‚
 
‚
);

447 
X509_LOOKUP_gë_by_Æüs_‚
 
X509_LOOKUP_mëh_gë_gë_by_Æüs
(

448 c⁄° 
X509_LOOKUP_METHOD
 *
mëhod
);

451 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

452 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

454 
X509_STORE_CTX_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
, 
X509_LOOKUP_TYPE
 
ty≥
,

455 
X509_NAME
 *
«me
, 
X509_OBJECT
 *
ªt
);

456 
X509_OBJECT
 *
X509_STORE_CTX_gë_obj_by_subje˘
(
X509_STORE_CTX
 *
vs
,

457 
X509_LOOKUP_TYPE
 
ty≥
,

458 
X509_NAME
 *
«me
);

460 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

461 
¨gl
, **
ªt
);

463 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

464 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

465 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

467 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

468 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

469 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

470 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

471 
X509_NAME
 *
«me
, 
X509_OBJECT
 *
ªt
);

472 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

473 
X509_NAME
 *
«me
, 
ASN1_INTEGER
 *
£rül
,

474 
X509_OBJECT
 *
ªt
);

475 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

476 c⁄° *
byãs
, 
Àn
,

477 
X509_OBJECT
 *
ªt
);

478 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
X509_LOOKUP_TYPE
 
ty≥
,

479 c⁄° *
°r
, 
Àn
, 
X509_OBJECT
 *
ªt
);

480 
X509_LOOKUP_£t_mëhod_d©a
(
X509_LOOKUP
 *
˘x
, *
d©a
);

481 *
X509_LOOKUP_gë_mëhod_d©a
(c⁄° 
X509_LOOKUP
 *
˘x
);

482 
X509_STORE
 *
X509_LOOKUP_gë_°‹e
(c⁄° 
X509_LOOKUP
 *
˘x
);

483 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

485 
X509_STORE_lﬂd_loˇti⁄s
(
X509_STORE
 *
˘x
,

486 c⁄° *
fûe
, c⁄° *
dú
);

487 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

489 
	#X509_STORE_CTX_gë_ex_√w_ödex
(
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
) \

490 
	`CRYPTO_gë_ex_√w_ödex
(
CRYPTO_EX_INDEX_X509_STORE_CTX
, 
l
, 
p
, 
√wf
, 
dupf
, 
‰ìf
)

	)

491 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
, *
d©a
);

492 *
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
, 
idx
);

493 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

494 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
, 
s
);

495 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

496 
X509_STORE_CTX_£t_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

497 
X509
 *
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

498 
X509_STORE_CTX_£t_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
, 
X509
 *
x
);

499 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

500 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

501 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

502 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë0_chaö
(
X509_STORE_CTX
 *
˘x
);

503 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

504 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
, 
X509
 *
x
);

505 
X509_STORE_CTX_£t0_vîifõd_chaö
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509
Ë*
sk
);

506 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
, 
STACK_OF
(
X509_CRL
Ë*
sk
);

507 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

508 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

509 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

510 
puΩo£
, 
åu°
);

511 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

512 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

513 
time_t
 
t
);

515 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

516 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

517 
X509_STORE_CTX_gë_num_u¡ru°ed
(
X509_STORE_CTX
 *
˘x
);

519 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

520 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

521 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

527 
X509_STORE_CTX_£t0_d™e
(
X509_STORE_CTX
 *
˘x
, 
SSL_DANE
 *
d™e
);

528 
	#DANE_FLAG_NO_DANE_EE_NAMECHECKS
 (1L << 0)

	)

532 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

533 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

534 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

535 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

536 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

537 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

538 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

539 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

540 
Êags
);

541 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

542 
Êags
);

543 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

544 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

545 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

546 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

547 
X509_VERIFY_PARAM_£t_auth_Àvñ
(
X509_VERIFY_PARAM
 *
∑øm
, 
auth_Àvñ
);

548 
time_t
 
X509_VERIFY_PARAM_gë_time
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

549 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

550 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

551 
ASN1_OBJECT
 *
pﬁicy
);

552 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

553 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

555 
X509_VERIFY_PARAM_£t_öh_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

556 
uöt32_t
 
Êags
);

557 
uöt32_t
 
X509_VERIFY_PARAM_gë_öh_Êags
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

559 
X509_VERIFY_PARAM_£t1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

560 c⁄° *
«me
, 
size_t
 
«mñí
);

561 
X509_VERIFY_PARAM_add1_ho°
(
X509_VERIFY_PARAM
 *
∑øm
,

562 c⁄° *
«me
, 
size_t
 
«mñí
);

563 
X509_VERIFY_PARAM_£t_ho°Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

564 
Êags
);

565 
X509_VERIFY_PARAM_gë_ho°Êags
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

566 *
X509_VERIFY_PARAM_gë0_≥î«me
(
X509_VERIFY_PARAM
 *);

567 
X509_VERIFY_PARAM_move_≥î«me
(
X509_VERIFY_PARAM
 *, X509_VERIFY_PARAM *);

568 
X509_VERIFY_PARAM_£t1_emaû
(
X509_VERIFY_PARAM
 *
∑øm
,

569 c⁄° *
emaû
, 
size_t
 
emaûÀn
);

570 
X509_VERIFY_PARAM_£t1_ù
(
X509_VERIFY_PARAM
 *
∑øm
,

571 c⁄° *
ù
, 
size_t
 
ùÀn
);

572 
X509_VERIFY_PARAM_£t1_ù_asc
(
X509_VERIFY_PARAM
 *
∑øm
,

573 c⁄° *
ùasc
);

575 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

576 
X509_VERIFY_PARAM_gë_auth_Àvñ
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

577 c⁄° *
X509_VERIFY_PARAM_gë0_«me
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

579 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

580 
X509_VERIFY_PARAM_gë_cou¡
();

581 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_gë0
(
id
);

582 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

583 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

586 
	#X509_PCY_TREE_FAILURE
 -2

	)

587 
	#X509_PCY_TREE_INVALID
 -1

	)

588 
	#X509_PCY_TREE_INTERNAL
 0

	)

594 
	#X509_PCY_TREE_VALID
 1

	)

595 
	#X509_PCY_TREE_EMPTY
 2

	)

596 
	#X509_PCY_TREE_EXPLICIT
 4

	)

598 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

599 
STACK_OF
(
X509
Ë*
˚πs
,

600 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
, 
Êags
);

602 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

604 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

605 
X509_POLICY_LEVEL
 *
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
,

606 
i
);

608 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_pﬁicõs
(const

609 
X509_POLICY_TREE


610 *
åì
);

612 
STACK_OF
(
X509_POLICY_NODE
Ë*
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(const

613 
X509_POLICY_TREE


614 *
åì
);

616 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

618 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
,

619 
i
);

621 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

623 
STACK_OF
(
POLICYQUALINFO
Ë*
X509_pﬁicy_node_gë0_quÆifõrs
(const

624 
X509_POLICY_NODE


625 *
node
);

626 c⁄° 
X509_POLICY_NODE
 *
X509_pﬁicy_node_gë0_∑ª¡
(const X509_POLICY_NODE

627 *
node
);

629 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509err.h

11 #i‚de‡
HEADER_X509ERR_H


12 
	#HEADER_X509ERR_H


	)

14 
	~<›ís¶/symhacks.h
>

16 #ifde‡ 
__˝lu•lus


19 
ERR_lﬂd_X509_°rögs
();

24 
	#X509_F_ADD_CERT_DIR
 100

	)

25 
	#X509_F_BUILD_CHAIN
 106

	)

26 
	#X509_F_BY_FILE_CTRL
 101

	)

27 
	#X509_F_CHECK_NAME_CONSTRAINTS
 149

	)

28 
	#X509_F_CHECK_POLICY
 145

	)

29 
	#X509_F_DANE_I2D
 107

	)

30 
	#X509_F_DIR_CTRL
 102

	)

31 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

32 
	#X509_F_I2D_X509_AUX
 151

	)

33 
	#X509_F_LOOKUP_CERTS_SK
 152

	)

34 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

35 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

36 
	#X509_F_NEW_DIR
 153

	)

37 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

38 
	#X509_F_X509V3_ADD_EXT
 104

	)

39 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

40 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

41 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

42 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

43 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

44 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

45 
	#X509_F_X509_CRL_DIFF
 105

	)

46 
	#X509_F_X509_CRL_METHOD_NEW
 154

	)

47 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

48 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

49 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

50 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

51 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

52 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

53 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

54 
	#X509_F_X509_LOOKUP_METH_NEW
 160

	)

55 
	#X509_F_X509_LOOKUP_NEW
 155

	)

56 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

57 
	#X509_F_X509_NAME_CANON
 156

	)

58 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

59 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

60 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

61 
	#X509_F_X509_NAME_ONELINE
 116

	)

62 
	#X509_F_X509_NAME_PRINT
 117

	)

63 
	#X509_F_X509_OBJECT_NEW
 150

	)

64 
	#X509_F_X509_PRINT_EX_FP
 118

	)

65 
	#X509_F_X509_PUBKEY_DECODE
 148

	)

66 
	#X509_F_X509_PUBKEY_GET
 161

	)

67 
	#X509_F_X509_PUBKEY_GET0
 119

	)

68 
	#X509_F_X509_PUBKEY_SET
 120

	)

69 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

70 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

71 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

72 
	#X509_F_X509_REQ_TO_X509
 123

	)

73 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

74 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

75 
	#X509_F_X509_STORE_ADD_LOOKUP
 157

	)

76 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

77 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

78 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

79 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

80 
	#X509_F_X509_STORE_NEW
 158

	)

81 
	#X509_F_X509_TO_X509_REQ
 126

	)

82 
	#X509_F_X509_TRUST_ADD
 133

	)

83 
	#X509_F_X509_TRUST_SET
 141

	)

84 
	#X509_F_X509_VERIFY_CERT
 127

	)

85 
	#X509_F_X509_VERIFY_PARAM_NEW
 159

	)

90 
	#X509_R_AKID_MISMATCH
 110

	)

91 
	#X509_R_BAD_SELECTOR
 133

	)

92 
	#X509_R_BAD_X509_FILETYPE
 100

	)

93 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

94 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

95 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

96 
	#X509_R_CRL_ALREADY_DELTA
 127

	)

97 
	#X509_R_CRL_VERIFY_FAILURE
 131

	)

98 
	#X509_R_IDP_MISMATCH
 128

	)

99 
	#X509_R_INVALID_ATTRIBUTES
 138

	)

100 
	#X509_R_INVALID_DIRECTORY
 113

	)

101 
	#X509_R_INVALID_FIELD_NAME
 119

	)

102 
	#X509_R_INVALID_TRUST
 123

	)

103 
	#X509_R_ISSUER_MISMATCH
 129

	)

104 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

105 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

106 
	#X509_R_LOADING_CERT_DIR
 103

	)

107 
	#X509_R_LOADING_DEFAULTS
 104

	)

108 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

109 
	#X509_R_NAME_TOO_LONG
 134

	)

110 
	#X509_R_NEWER_CRL_NOT_NEWER
 132

	)

111 
	#X509_R_NO_CERTIFICATE_FOUND
 135

	)

112 
	#X509_R_NO_CERTIFICATE_OR_CRL_FOUND
 136

	)

113 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

114 
	#X509_R_NO_CRL_FOUND
 137

	)

115 
	#X509_R_NO_CRL_NUMBER
 130

	)

116 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

117 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

118 
	#X509_R_SHOULD_RETRY
 106

	)

119 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

120 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

121 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

122 
	#X509_R_UNKNOWN_NID
 109

	)

123 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

124 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

125 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

126 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

127 
	#X509_R_WRONG_TYPE
 122

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
f˘

58 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
f˘

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__NTHNL
(
f˘
Ëf˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
f˘

69 
	#__NTHNL
(
f˘
Ë
	)
f˘

75 #i‡(
deföed
 
__˝lu•lus
 \

76 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

77 
	#__ölöe
 
ölöe


	)

79 
	#__ölöe


	)

82 
	#__THROW


	)

83 
	#__THROWNL


	)

84 
	#__NTH
(
f˘
Ë
	)
f˘

91 #i‡
deföed
 
__˛™g__
 && deföed 
__has_exãnsi⁄


92 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

94 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë0

	)

99 
	#__P
(
¨gs
Ë
	)
¨gs

100 
	#__PMT
(
¨gs
Ë
	)
¨gs

105 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

106 
	#__STRING
(
x
Ë#x

	)

109 
	#__±r_t
 *

	)

113 #ifdef 
__˝lu•lus


114 
	#__BEGIN_DECLS
 "C" {

	)

115 
	#__END_DECLS
 }

	)

117 
	#__BEGIN_DECLS


	)

118 
	#__END_DECLS


	)

123 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

124 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

127 #i‡
__USE_FORTIFY_LEVEL
 =3 && (
__glibc_˛™g_¥îeq
 (9, 0) \

128 || 
	$__GNUC_PREREQ
 (12, 0))

129 
	#__glibc_objsize0
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 0)

	)

130 
	#__glibc_objsize
(
__o
Ë
	`__buûtö_dy«mic_obje˘_size
 (__o, 1)

	)

132 
	#__glibc_objsize0
(
__o
Ë
	`__bos0
 (__o)

	)

133 
	#__glibc_objsize
(
__o
Ë
	`__bos
 (__o)

	)

140 
	#__glibc_ß„_Àn_c⁄d
(
__l
, 
__s
, 
__osz
Ë((__lË<(__oszË/ (__s))

	)

141 
	#__glibc_unsig√d_‹_posôive
(
__l
) \

142 ((
	`__ty≥of
 (
__l
)) 0 < (__typeof (__l)) -1 \

143 || (
	`__buûtö_c⁄°™t_p
 (
__l
Ë&& (__lË> 0))

	)

147 
	#__glibc_ß„_‹_unknown_Àn
(
__l
, 
__s
, 
__osz
) \

148 ((
	`__buûtö_c⁄°™t_p
 (
__osz
Ë&& (__oszË=(
__SIZE_TYPE__
) -1) \

149 || (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

150 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

151 (
__s
), (
__osz
))) \

152 && 
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), (
__s
), (
__osz
))))

	)

157 
	#__glibc_unß„_Àn
(
__l
, 
__s
, 
__osz
) \

158 (
	`__glibc_unsig√d_‹_posôive
 (
__l
) \

159 && 
	`__buûtö_c⁄°™t_p
 (
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), \

160 
__s
, 
__osz
)) \

161 && !
	`__glibc_ß„_Àn_c⁄d
 ((
__SIZE_TYPE__
Ë(
__l
), 
__s
, 
__osz
))

	)

166 
	#__glibc_f‹tify
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

167 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

168 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

169 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

170 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, 
__osz
) \

171 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, 
__osz
))) \

172 

	)

176 
	#__glibc_f‹tify_n
(
f
, 
__l
, 
__s
, 
__osz
, ...) \

177 (
	`__glibc_ß„_‹_unknown_Àn
 (
__l
, 
__s
, 
__osz
) \

178 ? 
__
 ## 
f
 ## 
	`_Æüs
 (
__VA_ARGS__
) \

179 : (
	`__glibc_unß„_Àn
 (
__l
, 
__s
, 
__osz
) \

180 ? 
__
 ## 
f
 ## 
	`_chk_w¨n
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)) \

181 : 
__
 ## 
f
 ## 
	`_chk
 (
__VA_ARGS__
, (
__osz
Ë/ (
__s
)))) \

182 

	)

183 #i‡
	`__GNUC_PREREQ
 (4,3)

184 
	#__w¨nde˛
(
«me
, 
msg
) \

185 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

186 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

187 
	#__îr‹de˛
(
«me
, 
msg
) \

188 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

190 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

191 
	#__w¨«âr
(
msg
)

	)

192 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

199 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

200 
	#__Êex¨r
 []

	)

201 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

202 #ñi‡
	`__GNUC_PREREQ
 (2,97)

205 
	#__Êex¨r
 []

	)

206 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

207 #ñi‡
deföed
 
__GNUC__


210 
	#__Êex¨r
 [0]

	)

211 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

214 
	#__Êex¨r
 [1]

	)

215 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

229 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

231 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

232 #ifde‡
__˝lu•lus


233 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

234 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

235 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

236 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

238 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

239 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

240 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

241 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

243 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

244 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
˙ame

257 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

258 
	#__©åibuã__
(
xyz
Ë

	)

264 #i‡
	`__GNUC_PREREQ
 (2,96)

265 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

267 
	#__©åibuã_mÆloc__


	)

272 #i‡
	`__GNUC_PREREQ
 (4, 3)

273 
	#__©åibuã_Æloc_size__
(
∑øms
) \

274 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

276 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

282 #i‡
	`__GNUC_PREREQ
 (2,96)

283 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

285 
	#__©åibuã_puª__


	)

289 #i‡
	`__GNUC_PREREQ
 (2,5)

290 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

292 
	#__©åibuã_c⁄°__


	)

298 #i‡
	`__GNUC_PREREQ
 (3,1)

299 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

300 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

302 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

303 
	#__©åibuã_noölöe__


	)

307 #i‡
	`__GNUC_PREREQ
 (3,2)

308 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

310 
	#__©åibuã_dïªˇãd__


	)

316 #i‡
	`__GNUC_PREREQ
 (4,5) || \

317 
	$__glibc_˛™g_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

318 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

319 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

321 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

330 #i‡
	`__GNUC_PREREQ
 (2,8)

331 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

333 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

340 #i‡
	`__GNUC_PREREQ
 (2,97)

341 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

342 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

344 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

349 #i‡
	`__GNUC_PREREQ
 (3,3)

350 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

352 
	#__n⁄nuŒ
(
∑øms
)

	)

357 #i‡
	`__GNUC_PREREQ
 (3,4)

358 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

359 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

360 #i‡
__USE_FORTIFY_LEVEL
 > 0

361 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

364 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

366 #i‚de‡
__wur


367 
	#__wur


	)

371 #i‡
	`__GNUC_PREREQ
 (3,2)

375 #unde‡
__Æways_ölöe


376 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

378 #unde‡
__Æways_ölöe


379 
	#__Æways_ölöe
 
__ölöe


	)

384 #i‡
	`__GNUC_PREREQ
 (4,3)

385 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

387 
	#__©åibuã_¨tificül__


	)

399 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

400 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

401 || 
deföed
 
__GNUC_GNU_INLINE__
)))

402 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


403 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

404 
	#__exã∫_Æways_ölöe
 \

405 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

407 
	#__exã∫_ölöe
 
__ölöe


	)

408 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

412 #ifde‡
__exã∫_Æways_ölöe


413 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

418 #i‡
	`__GNUC_PREREQ
 (4,3)

419 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

420 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

427 #i‡!
	`__GNUC_PREREQ
 (2,8)

428 
	#__exãnsi⁄__


	)

432 #i‡!
	`__GNUC_PREREQ
 (2,92)

433 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

434 
	#__ª°ri˘
 
ª°ri˘


	)

436 
	#__ª°ri˘


	)

443 #i‡
	`__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


444 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

446 #ifde‡
__GNUC__


447 
	#__ª°ri˘_¨r


	)

449 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

450 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

453 
	#__ª°ri˘_¨r


	)

458 #i‡
__GNUC__
 >= 3

459 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

460 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

462 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

463 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

466 #ifde‡
__has_©åibuã


467 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

469 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

472 #i‡(!
deföed
 
_N‹ëu∫
 \

473 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

474 && !
	$__GNUC_PREREQ
 (4,7))

475 #i‡
	`__GNUC_PREREQ
 (2,8)

476 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

478 
	#_N‹ëu∫


	)

482 #i‡
	`__GNUC_PREREQ
 (8, 0)

486 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

488 
	#__©åibuã_n⁄°rög__


	)

491 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

492 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

493 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

494 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

495 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

496 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

499 
	~<bôs/w‹dsize.h
>

500 
	~<bôs/l⁄g-doubÀ.h
>

502 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


503 
	#__LDBL_COMPAT
 1

	)

504 #ifde‡
__REDIRECT


505 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

506 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

507 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

508 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

509 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

510 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

511 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

512 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

513 
	#__LDBL_REDIR_DECL
(
«me
) \

514 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

515 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

516 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

517 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

518 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

521 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


522 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
¥Ÿo

523 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
¥Ÿo

524 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

525 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

526 
	#__LDBL_REDIR_DECL
(
«me
)

	)

527 #ifde‡
__REDIRECT


528 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

529 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

530 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

539 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

540 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

541 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

542 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

544 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

554 #i‡!
deföed
 
__˝lu•lus
 \

555 && (
	`__GNUC_PREREQ
 (4, 9) \

556 || 
	`__glibc_˛™g_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

557 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

558 && 
__STDC_VERSION__
 >= 201112L))

559 
	#__HAVE_GENERIC_SELECTION
 1

	)

561 
	#__HAVE_GENERIC_SELECTION
 0

	)

	@/usr/include/asm-generic/socket.h

2 #i‚de‡
__ASM_GENERIC_SOCKET_H


3 
	#__ASM_GENERIC_SOCKET_H


	)

5 
	~<asm/sockios.h
>

8 
	#SOL_SOCKET
 1

	)

10 
	#SO_DEBUG
 1

	)

11 
	#SO_REUSEADDR
 2

	)

12 
	#SO_TYPE
 3

	)

13 
	#SO_ERROR
 4

	)

14 
	#SO_DONTROUTE
 5

	)

15 
	#SO_BROADCAST
 6

	)

16 
	#SO_SNDBUF
 7

	)

17 
	#SO_RCVBUF
 8

	)

18 
	#SO_SNDBUFFORCE
 32

	)

19 
	#SO_RCVBUFFORCE
 33

	)

20 
	#SO_KEEPALIVE
 9

	)

21 
	#SO_OOBINLINE
 10

	)

22 
	#SO_NO_CHECK
 11

	)

23 
	#SO_PRIORITY
 12

	)

24 
	#SO_LINGER
 13

	)

25 
	#SO_BSDCOMPAT
 14

	)

26 
	#SO_REUSEPORT
 15

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

46 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

48 
	#SO_PEERNAME
 28

	)

49 
	#SO_TIMESTAMP
 29

	)

50 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

52 
	#SO_ACCEPTCONN
 30

	)

54 
	#SO_PEERSEC
 31

	)

55 
	#SO_PASSSEC
 34

	)

56 
	#SO_TIMESTAMPNS
 35

	)

57 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

59 
	#SO_MARK
 36

	)

61 
	#SO_TIMESTAMPING
 37

	)

62 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

64 
	#SO_PROTOCOL
 38

	)

65 
	#SO_DOMAIN
 39

	)

67 
	#SO_RXQ_OVFL
 40

	)

69 
	#SO_WIFI_STATUS
 41

	)

70 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

71 
	#SO_PEEK_OFF
 42

	)

74 
	#SO_NOFCS
 43

	)

76 
	#SO_LOCK_FILTER
 44

	)

78 
	#SO_SELECT_ERR_QUEUE
 45

	)

80 
	#SO_BUSY_POLL
 46

	)

82 
	#SO_MAX_PACING_RATE
 47

	)

84 
	#SO_BPF_EXTENSIONS
 48

	)

86 
	#SO_INCOMING_CPU
 49

	)

88 
	#SO_ATTACH_BPF
 50

	)

89 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

91 
	#SO_ATTACH_REUSEPORT_CBPF
 51

	)

92 
	#SO_ATTACH_REUSEPORT_EBPF
 52

	)

94 
	#SO_CNX_ADVICE
 53

	)

96 
	#SCM_TIMESTAMPING_OPT_STATS
 54

	)

98 
	#SO_MEMINFO
 55

	)

100 
	#SO_INCOMING_NAPI_ID
 56

	)

102 
	#SO_COOKIE
 57

	)

104 
	#SCM_TIMESTAMPING_PKTINFO
 58

	)

106 
	#SO_PEERGROUPS
 59

	)

108 
	#SO_ZEROCOPY
 60

	)

110 
	#SO_TXTIME
 61

	)

111 
	#SCM_TXTIME
 
SO_TXTIME


	)

113 
	#SO_BINDTOIFINDEX
 62

	)

115 
	#SO_DETACH_REUSEPORT_BPF
 68

	)

117 
	#SO_PREFER_BUSY_POLL
 69

	)

118 
	#SO_BUSY_POLL_BUDGET
 70

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/long-double.h

	@/usr/include/bits/mman-shared.h

19 #i‚de‡
_SYS_MMAN_H


23 #ifde‡
__USE_GNU


25 #i‚de‡
MFD_CLOEXEC


26 
	#MFD_CLOEXEC
 1U

	)

27 
	#MFD_ALLOW_SEALING
 2U

	)

28 
	#MFD_HUGETLB
 4U

	)

32 #i‚de‡
MLOCK_ONFAULT


33 
	#MLOCK_ONFAULT
 1U

	)

37 #i‚de‡
PKEY_DISABLE_ACCESS


38 
	#PKEY_DISABLE_ACCESS
 0x1

	)

39 
	#PKEY_DISABLE_WRITE
 0x2

	)

42 
__BEGIN_DECLS


46 
	$memfd_¸óã
 (c⁄° *
__«me
, 
__Êags
Ë
__THROW
;

50 
	$mlock2
 (c⁄° *
__addr
, 
size_t
 
__Àngth
, 
__Êags
Ë
__THROW
;

56 
	$pkey_Æloc
 (
__Êags
, 
__ac˚ss_rights
Ë
__THROW
;

60 
	$pkey_£t
 (
__key
, 
__ac˚ss_rights
Ë
__THROW
;

64 
	$pkey_gë
 (
__key
Ë
__THROW
;

68 
	$pkey_‰ì
 (
__key
Ë
__THROW
;

72 
	$pkey_m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
, 
__pkey
Ë
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

29 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

31 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

32 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

33 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

34 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

35 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

38 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

39 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

40 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

45 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

46 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

47 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

48 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

51 
	#__PTHREAD_COMPAT_PADDING_MID


	)

52 
	#__PTHREAD_COMPAT_PADDING_END


	)

53 
	#__PTHREAD_MUTEX_LOCK_ELISION
 1

	)

54 #ifde‡
__x86_64__


55 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 0

	)

56 
	#__PTHREAD_MUTEX_USE_UNION
 0

	)

58 
	#__PTHREAD_MUTEX_NUSERS_AFTER_KIND
 1

	)

59 
	#__PTHREAD_MUTEX_USE_UNION
 1

	)

62 
	#__LOCK_ALIGNMENT


	)

63 
	#__ONCE_ALIGNMENT


	)

65 
	s__±hªad_rwlock_¨ch_t


67 
	m__ªadîs
;

68 
	m__wrôîs
;

69 
	m__wΩha£_fuãx
;

70 
	m__wrôîs_fuãx
;

71 
	m__∑d3
;

72 
	m__∑d4
;

73 #ifde‡
__x86_64__


74 
	m__cur_wrôî
;

75 
	m__sh¨ed
;

76 sig√d 
	m__rwñisi⁄
;

77 #ifde‡ 
__ILP32__


78 
	m__∑d1
[3];

79 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

81 
	m__∑d1
[7];

82 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

84 
	m__∑d2
;

87 
	m__Êags
;

88 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

92 
	m__Êags
;

93 
	m__sh¨ed
;

94 sig√d 
	m__rwñisi⁄
;

95 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

96 
	m__∑d2
;

97 
	m__cur_wrôî
;

101 #i‚de‡
__x86_64__


103 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/types/struct_sched_param.h

19 #i‚de‡
_BITS_TYPES_STRUCT_SCHED_PARAM


20 
	#_BITS_TYPES_STRUCT_SCHED_PARAM
 1

	)

23 
	ssched_∑øm


25 
	msched_¥i‹ôy
;

	@/usr/include/bits/types/struct_statx.h

19 #i‚de‡
_SYS_STAT_H


20 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
ty≥s
/
°ru˘_°©x
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

23 #i‚de‡
__°©x_deföed


24 
	#__°©x_deföed
 1

	)

30 
	s°©x


32 
__uöt32_t
 
	m°x_mask
;

33 
__uöt32_t
 
	m°x_blksize
;

34 
__uöt64_t
 
	m°x_©åibuãs
;

35 
__uöt32_t
 
	m°x_∆ök
;

36 
__uöt32_t
 
	m°x_uid
;

37 
__uöt32_t
 
	m°x_gid
;

38 
__uöt16_t
 
	m°x_mode
;

39 
__uöt16_t
 
	m__°©x_∑d1
[1];

40 
__uöt64_t
 
	m°x_öo
;

41 
__uöt64_t
 
	m°x_size
;

42 
__uöt64_t
 
	m°x_blocks
;

43 
__uöt64_t
 
	m°x_©åibuãs_mask
;

44 
°©x_time°amp
 
	m°x_©ime
;

45 
°©x_time°amp
 
	m°x_btime
;

46 
°©x_time°amp
 
	m°x_˘ime
;

47 
°©x_time°amp
 
	m°x_mtime
;

48 
__uöt32_t
 
	m°x_rdev_maj‹
;

49 
__uöt32_t
 
	m°x_rdev_mö‹
;

50 
__uöt32_t
 
	m°x_dev_maj‹
;

51 
__uöt32_t
 
	m°x_dev_mö‹
;

52 
__uöt64_t
 
	m__°©x_∑d2
[14];

	@/usr/include/bits/types/struct_statx_timestamp.h

19 #i‚de‡
_SYS_STAT_H


20 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
ty≥s
/
°ru˘_°©x_time°amp
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

23 #i‚de‡
__°©x_time°amp_deföed


24 
	#__°©x_time°amp_deföed
 1

	)

26 
	s°©x_time°amp


28 
__öt64_t
 
	mtv_£c
;

29 
__uöt32_t
 
	mtv_n£c
;

30 
__öt32_t
 
	m__°©x_time°amp_∑d1
[1];

	@/usr/include/bits/uio_lim.h

19 #i‚de‡
_BITS_UIO_LIM_H


20 
	#_BITS_UIO_LIM_H
 1

	)

30 
	#__IOV_MAX
 1024

	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/falloc.h

2 #i‚de‡
_FALLOC_H_


3 
	#_FALLOC_H_


	)

5 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/openssl/buffererr.h

11 #i‚de‡
HEADER_BUFERR_H


12 
	#HEADER_BUFERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_BUF_°rögs
();

26 
	#BUF_F_BUF_MEM_GROW
 100

	)

27 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

28 
	#BUF_F_BUF_MEM_NEW
 101

	)

	@/usr/include/openssl/dherr.h

11 #i‚de‡
HEADER_DHERR_H


12 
	#HEADER_DHERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_DH


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_DH_°rögs
();

30 
	#DH_F_COMPUTE_KEY
 102

	)

31 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

32 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

33 
	#DH_F_DH_CHECK_EX
 121

	)

34 
	#DH_F_DH_CHECK_PARAMS_EX
 122

	)

35 
	#DH_F_DH_CHECK_PUB_KEY_EX
 123

	)

36 
	#DH_F_DH_CMS_DECRYPT
 114

	)

37 
	#DH_F_DH_CMS_SET_PEERKEY
 115

	)

38 
	#DH_F_DH_CMS_SET_SHARED_INFO
 116

	)

39 
	#DH_F_DH_COMPUTE_KEY
 203

	)

40 
	#DH_F_DH_GENERATE_KEY
 202

	)

41 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 201

	)

42 
	#DH_F_DH_METH_DUP
 117

	)

43 
	#DH_F_DH_METH_NEW
 118

	)

44 
	#DH_F_DH_METH_SET1_NAME
 119

	)

45 
	#DH_F_DH_NEW_BY_NID
 104

	)

46 
	#DH_F_DH_NEW_METHOD
 105

	)

47 
	#DH_F_DH_PARAM_DECODE
 107

	)

48 
	#DH_F_DH_PKEY_PUBLIC_CHECK
 124

	)

49 
	#DH_F_DH_PRIV_DECODE
 110

	)

50 
	#DH_F_DH_PRIV_ENCODE
 111

	)

51 
	#DH_F_DH_PUB_DECODE
 108

	)

52 
	#DH_F_DH_PUB_ENCODE
 109

	)

53 
	#DH_F_DO_DH_PRINT
 100

	)

54 
	#DH_F_GENERATE_KEY
 103

	)

55 
	#DH_F_PKEY_DH_CTRL_STR
 120

	)

56 
	#DH_F_PKEY_DH_DERIVE
 112

	)

57 
	#DH_F_PKEY_DH_INIT
 125

	)

58 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

63 
	#DH_R_BAD_GENERATOR
 101

	)

64 
	#DH_R_BN_DECODE_ERROR
 109

	)

65 
	#DH_R_BN_ERROR
 106

	)

66 
	#DH_R_CHECK_INVALID_J_VALUE
 115

	)

67 
	#DH_R_CHECK_INVALID_Q_VALUE
 116

	)

68 
	#DH_R_CHECK_PUBKEY_INVALID
 122

	)

69 
	#DH_R_CHECK_PUBKEY_TOO_LARGE
 123

	)

70 
	#DH_R_CHECK_PUBKEY_TOO_SMALL
 124

	)

71 
	#DH_R_CHECK_P_NOT_PRIME
 117

	)

72 
	#DH_R_CHECK_P_NOT_SAFE_PRIME
 118

	)

73 
	#DH_R_CHECK_Q_NOT_PRIME
 119

	)

74 
	#DH_R_DECODE_ERROR
 104

	)

75 
	#DH_R_INVALID_PARAMETER_NAME
 110

	)

76 
	#DH_R_INVALID_PARAMETER_NID
 114

	)

77 
	#DH_R_INVALID_PUBKEY
 102

	)

78 
	#DH_R_KDF_PARAMETER_ERROR
 112

	)

79 
	#DH_R_KEY_SIZE_TOO_SMALL
 201

	)

80 
	#DH_R_KEYS_NOT_SET
 108

	)

81 
	#DH_R_MISSING_PUBKEY
 125

	)

82 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

83 
	#DH_R_NOT_SUITABLE_GENERATOR
 120

	)

84 
	#DH_R_NO_PARAMETERS_SET
 107

	)

85 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

86 
	#DH_R_NON_FIPS_METHOD
 202

	)

87 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

88 
	#DH_R_PEER_KEY_ERROR
 111

	)

89 
	#DH_R_SHARED_INFO_ERROR
 113

	)

90 
	#DH_R_UNABLE_TO_CHECK_GENERATOR
 121

	)

	@/usr/include/openssl/dsaerr.h

11 #i‚de‡
HEADER_DSAERR_H


12 
	#HEADER_DSAERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_DSA


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_DSA_°rögs
();

30 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

31 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

32 
	#DSA_F_DSA_BUILTIN_KEYGEN
 202

	)

33 
	#DSA_F_DSA_BUILTIN_PARAMGEN
 125

	)

34 
	#DSA_F_DSA_BUILTIN_PARAMGEN2
 126

	)

35 
	#DSA_F_DSA_GENERATE_KEY
 201

	)

36 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 200

	)

37 
	#DSA_F_DSA_DO_SIGN
 112

	)

38 
	#DSA_F_DSA_DO_VERIFY
 113

	)

39 
	#DSA_F_DSA_METH_DUP
 127

	)

40 
	#DSA_F_DSA_METH_NEW
 128

	)

41 
	#DSA_F_DSA_METH_SET1_NAME
 129

	)

42 
	#DSA_F_DSA_NEW_METHOD
 103

	)

43 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

44 
	#DSA_F_DSA_PRINT_FP
 105

	)

45 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

46 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

47 
	#DSA_F_DSA_PUB_DECODE
 117

	)

48 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

49 
	#DSA_F_DSA_SIGN
 106

	)

50 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

51 
	#DSA_F_DSA_SIG_NEW
 102

	)

52 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

53 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

54 
	#DSA_F_PKEY_DSA_CTRL_STR
 104

	)

55 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

60 
	#DSA_R_BAD_Q_VALUE
 102

	)

61 
	#DSA_R_BN_DECODE_ERROR
 108

	)

62 
	#DSA_R_BN_ERROR
 109

	)

63 
	#DSA_R_DECODE_ERROR
 104

	)

64 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

65 
	#DSA_R_INVALID_PARAMETERS
 112

	)

66 
	#DSA_R_KEY_SIZE_INVALID
 201

	)

67 
	#DSA_R_KEY_SIZE_TOO_SMALL
 202

	)

68 
	#DSA_R_MISSING_PARAMETERS
 101

	)

69 
	#DSA_R_MISSING_PRIVATE_KEY
 111

	)

70 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

71 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

72 
	#DSA_R_NON_FIPS_DSA_METHOD
 200

	)

73 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

74 
	#DSA_R_Q_NOT_PRIME
 113

	)

75 
	#DSA_R_SEED_LEN_SMALL
 110

	)

	@/usr/include/openssl/ecerr.h

11 #i‚de‡
HEADER_ECERR_H


12 
	#HEADER_ECERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 
	~<›ís¶/›ís¶c⁄f.h
>

20 #i‚de‡
OPENSSL_NO_EC


22 #ifde‡ 
__˝lu•lus


25 
ERR_lﬂd_EC_°rögs
();

30 
	#EC_F_BN_TO_FELEM
 224

	)

31 
	#EC_F_D2I_ECPARAMETERS
 144

	)

32 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

33 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

34 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

35 
	#EC_F_ECDH_CMS_DECRYPT
 238

	)

36 
	#EC_F_ECDH_CMS_SET_SHARED_INFO
 239

	)

37 
	#EC_F_ECDH_COMPUTE_KEY
 246

	)

38 
	#EC_F_ECDH_SIMPLE_COMPUTE_KEY
 257

	)

39 
	#EC_F_ECDSA_DO_SIGN_EX
 251

	)

40 
	#EC_F_ECDSA_DO_VERIFY
 252

	)

41 
	#EC_F_ECDSA_SIGN_EX
 254

	)

42 
	#EC_F_ECDSA_SIGN_SETUP
 248

	)

43 
	#EC_F_ECDSA_SIG_NEW
 265

	)

44 
	#EC_F_ECDSA_VERIFY
 253

	)

45 
	#EC_F_ECDSA_SIMPLE_SIGN_SETUP
 310

	)

46 
	#EC_F_ECDSA_SIMPLE_SIGN_SIG
 311

	)

47 
	#EC_F_ECDSA_SIMPLE_VERIFY_SIG
 312

	)

48 
	#EC_F_ECDSA_S390X_NISTP_SIGN_SIG
 313

	)

49 
	#EC_F_ECDSA_S390X_NISTP_VERIFY_SIG
 314

	)

50 
	#EC_F_ECD_ITEM_VERIFY
 270

	)

51 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

52 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

53 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

54 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

55 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

56 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

57 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

58 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

59 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

60 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

61 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

62 
	#EC_F_ECP_NISTZ256_GET_AFFINE
 240

	)

63 
	#EC_F_ECP_NISTZ256_INV_MOD_ORD
 275

	)

64 
	#EC_F_ECP_NISTZ256_MULT_PRECOMPUTE
 243

	)

65 
	#EC_F_ECP_NISTZ256_POINTS_MUL
 241

	)

66 
	#EC_F_ECP_NISTZ256_PRE_COMP_NEW
 244

	)

67 
	#EC_F_ECP_NISTZ256_WINDOWED_MUL
 242

	)

68 
	#EC_F_ECX_KEY_OP
 266

	)

69 
	#EC_F_ECX_PRIV_ENCODE
 267

	)

70 
	#EC_F_ECX_PUB_ENCODE
 268

	)

71 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

72 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

73 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

74 
	#EC_F_EC_GF2M_SIMPLE_FIELD_INV
 296

	)

75 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

76 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

77 
	#EC_F_EC_GF2M_SIMPLE_LADDER_POST
 285

	)

78 
	#EC_F_EC_GF2M_SIMPLE_LADDER_PRE
 288

	)

79 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

80 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

81 
	#EC_F_EC_GF2M_SIMPLE_POINTS_MUL
 289

	)

82 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

83 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

84 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

85 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

86 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

87 
	#EC_F_EC_GFP_MONT_FIELD_INV
 297

	)

88 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

89 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

90 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

91 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

92 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

93 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

94 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

95 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

96 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

97 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

98 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

99 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

100 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

101 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

102 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

103 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

104 
	#EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES
 287

	)

105 
	#EC_F_EC_GFP_SIMPLE_FIELD_INV
 298

	)

106 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

107 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

108 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

109 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

110 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

111 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

112 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

113 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

114 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

115 
	#EC_F_EC_GROUP_CHECK
 170

	)

116 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

117 
	#EC_F_EC_GROUP_COPY
 106

	)

118 
	#EC_F_EC_GROUP_GET_CURVE
 291

	)

119 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

120 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

121 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

122 
	#EC_F_EC_GROUP_GET_ECPARAMETERS
 261

	)

123 
	#EC_F_EC_GROUP_GET_ECPKPARAMETERS
 262

	)

124 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

125 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

126 
	#EC_F_EC_GROUP_NEW
 108

	)

127 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

128 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

129 
	#EC_F_EC_GROUP_NEW_FROM_ECPARAMETERS
 263

	)

130 
	#EC_F_EC_GROUP_NEW_FROM_ECPKPARAMETERS
 264

	)

131 
	#EC_F_EC_GROUP_SET_CURVE
 292

	)

132 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

133 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

134 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

135 
	#EC_F_EC_GROUP_SET_SEED
 286

	)

136 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

137 
	#EC_F_EC_KEY_COPY
 178

	)

138 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

139 
	#EC_F_EC_KEY_NEW
 182

	)

140 
	#EC_F_EC_KEY_NEW_METHOD
 245

	)

141 
	#EC_F_EC_KEY_OCT2PRIV
 255

	)

142 
	#EC_F_EC_KEY_PRINT
 180

	)

143 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

144 
	#EC_F_EC_KEY_PRIV2BUF
 279

	)

145 
	#EC_F_EC_KEY_PRIV2OCT
 256

	)

146 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

147 
	#EC_F_EC_KEY_SIMPLE_CHECK_KEY
 258

	)

148 
	#EC_F_EC_KEY_SIMPLE_OCT2PRIV
 259

	)

149 
	#EC_F_EC_KEY_SIMPLE_PRIV2OCT
 260

	)

150 
	#EC_F_EC_PKEY_CHECK
 273

	)

151 
	#EC_F_EC_PKEY_PARAM_CHECK
 274

	)

152 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

153 
	#EC_F_EC_POINTS_MUL
 290

	)

154 
	#EC_F_EC_POINT_ADD
 112

	)

155 
	#EC_F_EC_POINT_BN2POINT
 280

	)

156 
	#EC_F_EC_POINT_CMP
 113

	)

157 
	#EC_F_EC_POINT_COPY
 114

	)

158 
	#EC_F_EC_POINT_DBL
 115

	)

159 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES
 293

	)

160 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

161 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

162 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

163 
	#EC_F_EC_POINT_INVERT
 210

	)

164 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

165 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

166 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

167 
	#EC_F_EC_POINT_NEW
 121

	)

168 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

169 
	#EC_F_EC_POINT_POINT2BUF
 281

	)

170 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

171 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES
 294

	)

172 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

173 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

174 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES
 295

	)

175 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

176 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

177 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

178 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

179 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

180 
	#EC_F_EC_SCALAR_MUL_LADDER
 284

	)

181 
	#EC_F_EC_WNAF_MUL
 187

	)

182 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

183 
	#EC_F_I2D_ECPARAMETERS
 190

	)

184 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

185 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

186 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

187 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

188 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

189 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

190 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

191 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

192 
	#EC_F_OSSL_ECDH_COMPUTE_KEY
 247

	)

193 
	#EC_F_OSSL_ECDSA_SIGN_SETUP
 300

	)

194 
	#EC_F_OSSL_ECDSA_SIGN_SIG
 249

	)

195 
	#EC_F_OSSL_ECDSA_VERIFY_SIG
 250

	)

196 
	#EC_F_PKEY_ECD_CTRL
 271

	)

197 
	#EC_F_PKEY_ECD_DIGESTSIGN
 272

	)

198 
	#EC_F_PKEY_ECD_DIGESTSIGN25519
 276

	)

199 
	#EC_F_PKEY_ECD_DIGESTSIGN448
 277

	)

200 
	#EC_F_PKEY_ECX_DERIVE
 269

	)

201 
	#EC_F_PKEY_EC_CTRL
 197

	)

202 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

203 
	#EC_F_PKEY_EC_DERIVE
 217

	)

204 
	#EC_F_PKEY_EC_INIT
 282

	)

205 
	#EC_F_PKEY_EC_KDF_DERIVE
 283

	)

206 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

207 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

208 
	#EC_F_PKEY_EC_SIGN
 218

	)

209 
	#EC_F_S390X_PKEY_ECD_DIGESTSIGN25519
 320

	)

210 
	#EC_F_S390X_PKEY_ECD_DIGESTSIGN448
 321

	)

211 
	#EC_F_S390X_PKEY_ECD_KEYGEN25519
 322

	)

212 
	#EC_F_S390X_PKEY_ECD_KEYGEN448
 323

	)

213 
	#EC_F_S390X_PKEY_ECX_KEYGEN25519
 324

	)

214 
	#EC_F_S390X_PKEY_ECX_KEYGEN448
 325

	)

215 
	#EC_F_VALIDATE_ECX_DERIVE
 278

	)

220 
	#EC_R_ASN1_ERROR
 115

	)

221 
	#EC_R_BAD_SIGNATURE
 156

	)

222 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

223 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

224 
	#EC_R_CANNOT_INVERT
 165

	)

225 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

226 
	#EC_R_CURVE_DOES_NOT_SUPPORT_ECDH
 160

	)

227 
	#EC_R_CURVE_DOES_NOT_SUPPORT_ECDSA
 170

	)

228 
	#EC_R_CURVE_DOES_NOT_SUPPORT_SIGNING
 159

	)

229 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

230 
	#EC_R_DECODE_ERROR
 142

	)

231 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

232 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

233 
	#EC_R_FIELD_TOO_LARGE
 143

	)

234 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

235 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

236 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

237 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

238 
	#EC_R_INVALID_ARGUMENT
 112

	)

239 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

240 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

241 
	#EC_R_INVALID_CURVE
 141

	)

242 
	#EC_R_INVALID_DIGEST
 151

	)

243 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

244 
	#EC_R_INVALID_ENCODING
 102

	)

245 
	#EC_R_INVALID_FIELD
 103

	)

246 
	#EC_R_INVALID_FORM
 104

	)

247 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

248 
	#EC_R_INVALID_KEY
 116

	)

249 
	#EC_R_INVALID_OUTPUT_LENGTH
 161

	)

250 
	#EC_R_INVALID_PEER_KEY
 133

	)

251 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

252 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

253 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

254 
	#EC_R_KDF_PARAMETER_ERROR
 148

	)

255 
	#EC_R_KEYS_NOT_SET
 140

	)

256 
	#EC_R_LADDER_POST_FAILURE
 136

	)

257 
	#EC_R_LADDER_PRE_FAILURE
 153

	)

258 
	#EC_R_LADDER_STEP_FAILURE
 162

	)

259 
	#EC_R_MISSING_OID
 167

	)

260 
	#EC_R_MISSING_PARAMETERS
 124

	)

261 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

262 
	#EC_R_NEED_NEW_SETUP_VALUES
 157

	)

263 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

264 
	#EC_R_NOT_IMPLEMENTED
 126

	)

265 
	#EC_R_NOT_INITIALIZED
 111

	)

266 
	#EC_R_NO_PARAMETERS_SET
 139

	)

267 
	#EC_R_NO_PRIVATE_VALUE
 154

	)

268 
	#EC_R_OPERATION_NOT_SUPPORTED
 152

	)

269 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

270 
	#EC_R_PEER_KEY_ERROR
 149

	)

271 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

272 
	#EC_R_POINT_ARITHMETIC_FAILURE
 155

	)

273 
	#EC_R_POINT_AT_INFINITY
 106

	)

274 
	#EC_R_POINT_COORDINATES_BLIND_FAILURE
 163

	)

275 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

276 
	#EC_R_RANDOM_NUMBER_GENERATION_FAILED
 158

	)

277 
	#EC_R_SHARED_INFO_ERROR
 150

	)

278 
	#EC_R_SLOT_FULL
 108

	)

279 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

280 
	#EC_R_UNDEFINED_ORDER
 128

	)

281 
	#EC_R_UNKNOWN_COFACTOR
 164

	)

282 
	#EC_R_UNKNOWN_GROUP
 129

	)

283 
	#EC_R_UNKNOWN_ORDER
 114

	)

284 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

285 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

286 
	#EC_R_WRONG_ORDER
 130

	)

	@/usr/include/openssl/pkcs7err.h

11 #i‚de‡
HEADER_PKCS7ERR_H


12 
	#HEADER_PKCS7ERR_H


	)

14 #i‚de‡
HEADER_SYMHACKS_H


15 
	~<›ís¶/symhacks.h
>

18 #ifde‡ 
__˝lu•lus


21 
ERR_lﬂd_PKCS7_°rögs
();

26 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

27 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

28 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

29 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

30 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

31 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

32 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

33 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

34 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

35 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

36 
	#PKCS7_F_PKCS7_CTRL
 104

	)

37 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

38 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

39 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

40 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

41 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

42 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

43 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

44 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

45 
	#PKCS7_F_PKCS7_FINAL
 134

	)

46 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

47 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

48 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

49 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

50 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

51 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

52 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

53 
	#PKCS7_F_PKCS7_SIGN
 116

	)

54 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

55 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

56 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

57 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

58 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

59 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

64 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

65 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

66 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

67 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

68 
	#PKCS7_R_CTRL_ERROR
 152

	)

69 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

70 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

71 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

72 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

73 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

74 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

75 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

76 
	#PKCS7_R_INVALID_SIGNED_DATA_TYPE
 155

	)

77 
	#PKCS7_R_NO_CONTENT
 122

	)

78 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

79 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

80 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

81 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

82 
	#PKCS7_R_NO_SIGNERS
 142

	)

83 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

84 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

85 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

86 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

87 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

88 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

89 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

90 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

91 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

92 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

93 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

94 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

95 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

96 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

97 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

98 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

99 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

100 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

101 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

	@/usr/include/asm-generic/errno.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_H


3 
	#_ASM_GENERIC_ERRNO_H


	)

5 
	~<asm-gíîic/î∫o-ba£.h
>

7 
	#EDEADLK
 35

	)

8 
	#ENAMETOOLONG
 36

	)

9 
	#ENOLCK
 37

	)

18 
	#ENOSYS
 38

	)

20 
	#ENOTEMPTY
 39

	)

21 
	#ELOOP
 40

	)

22 
	#EWOULDBLOCK
 
EAGAIN


	)

23 
	#ENOMSG
 42

	)

24 
	#EIDRM
 43

	)

25 
	#ECHRNG
 44

	)

26 
	#EL2NSYNC
 45

	)

27 
	#EL3HLT
 46

	)

28 
	#EL3RST
 47

	)

29 
	#ELNRNG
 48

	)

30 
	#EUNATCH
 49

	)

31 
	#ENOCSI
 50

	)

32 
	#EL2HLT
 51

	)

33 
	#EBADE
 52

	)

34 
	#EBADR
 53

	)

35 
	#EXFULL
 54

	)

36 
	#ENOANO
 55

	)

37 
	#EBADRQC
 56

	)

38 
	#EBADSLT
 57

	)

40 
	#EDEADLOCK
 
EDEADLK


	)

42 
	#EBFONT
 59

	)

43 
	#ENOSTR
 60

	)

44 
	#ENODATA
 61

	)

45 
	#ETIME
 62

	)

46 
	#ENOSR
 63

	)

47 
	#ENONET
 64

	)

48 
	#ENOPKG
 65

	)

49 
	#EREMOTE
 66

	)

50 
	#ENOLINK
 67

	)

51 
	#EADV
 68

	)

52 
	#ESRMNT
 69

	)

53 
	#ECOMM
 70

	)

54 
	#EPROTO
 71

	)

55 
	#EMULTIHOP
 72

	)

56 
	#EDOTDOT
 73

	)

57 
	#EBADMSG
 74

	)

58 
	#EOVERFLOW
 75

	)

59 
	#ENOTUNIQ
 76

	)

60 
	#EBADFD
 77

	)

61 
	#EREMCHG
 78

	)

62 
	#ELIBACC
 79

	)

63 
	#ELIBBAD
 80

	)

64 
	#ELIBSCN
 81

	)

65 
	#ELIBMAX
 82

	)

66 
	#ELIBEXEC
 83

	)

67 
	#EILSEQ
 84

	)

68 
	#ERESTART
 85

	)

69 
	#ESTRPIPE
 86

	)

70 
	#EUSERS
 87

	)

71 
	#ENOTSOCK
 88

	)

72 
	#EDESTADDRREQ
 89

	)

73 
	#EMSGSIZE
 90

	)

74 
	#EPROTOTYPE
 91

	)

75 
	#ENOPROTOOPT
 92

	)

76 
	#EPROTONOSUPPORT
 93

	)

77 
	#ESOCKTNOSUPPORT
 94

	)

78 
	#EOPNOTSUPP
 95

	)

79 
	#EPFNOSUPPORT
 96

	)

80 
	#EAFNOSUPPORT
 97

	)

81 
	#EADDRINUSE
 98

	)

82 
	#EADDRNOTAVAIL
 99

	)

83 
	#ENETDOWN
 100

	)

84 
	#ENETUNREACH
 101

	)

85 
	#ENETRESET
 102

	)

86 
	#ECONNABORTED
 103

	)

87 
	#ECONNRESET
 104

	)

88 
	#ENOBUFS
 105

	)

89 
	#EISCONN
 106

	)

90 
	#ENOTCONN
 107

	)

91 
	#ESHUTDOWN
 108

	)

92 
	#ETOOMANYREFS
 109

	)

93 
	#ETIMEDOUT
 110

	)

94 
	#ECONNREFUSED
 111

	)

95 
	#EHOSTDOWN
 112

	)

96 
	#EHOSTUNREACH
 113

	)

97 
	#EALREADY
 114

	)

98 
	#EINPROGRESS
 115

	)

99 
	#ESTALE
 116

	)

100 
	#EUCLEAN
 117

	)

101 
	#ENOTNAM
 118

	)

102 
	#ENAVAIL
 119

	)

103 
	#EISNAM
 120

	)

104 
	#EREMOTEIO
 121

	)

105 
	#EDQUOT
 122

	)

107 
	#ENOMEDIUM
 123

	)

108 
	#EMEDIUMTYPE
 124

	)

109 
	#ECANCELED
 125

	)

110 
	#ENOKEY
 126

	)

111 
	#EKEYEXPIRED
 127

	)

112 
	#EKEYREVOKED
 128

	)

113 
	#EKEYREJECTED
 129

	)

116 
	#EOWNERDEAD
 130

	)

117 
	#ENOTRECOVERABLE
 131

	)

119 
	#ERFKILL
 132

	)

121 
	#EHWPOISON
 133

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm/types.h

2 #i‚de‡
_ASM_X86_TYPES_H


3 
	#_ASM_X86_TYPES_H


	)

5 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/errno-base.h

2 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


3 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

5 
	#EPERM
 1

	)

6 
	#ENOENT
 2

	)

7 
	#ESRCH
 3

	)

8 
	#EINTR
 4

	)

9 
	#EIO
 5

	)

10 
	#ENXIO
 6

	)

11 
	#E2BIG
 7

	)

12 
	#ENOEXEC
 8

	)

13 
	#EBADF
 9

	)

14 
	#ECHILD
 10

	)

15 
	#EAGAIN
 11

	)

16 
	#ENOMEM
 12

	)

17 
	#EACCES
 13

	)

18 
	#EFAULT
 14

	)

19 
	#ENOTBLK
 15

	)

20 
	#EBUSY
 16

	)

21 
	#EEXIST
 17

	)

22 
	#EXDEV
 18

	)

23 
	#ENODEV
 19

	)

24 
	#ENOTDIR
 20

	)

25 
	#EISDIR
 21

	)

26 
	#EINVAL
 22

	)

27 
	#ENFILE
 23

	)

28 
	#EMFILE
 24

	)

29 
	#ENOTTY
 25

	)

30 
	#ETXTBSY
 26

	)

31 
	#EFBIG
 27

	)

32 
	#ENOSPC
 28

	)

33 
	#ESPIPE
 29

	)

34 
	#EROFS
 30

	)

35 
	#EMLINK
 31

	)

36 
	#EPIPE
 32

	)

37 
	#EDOM
 33

	)

38 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

2 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


3 
	#__ASM_GENERIC_SOCKIOS_H


	)

6 
	#FIOSETOWN
 0x8901

	)

7 
	#SIOCSPGRP
 0x8902

	)

8 
	#FIOGETOWN
 0x8903

	)

9 
	#SIOCGPGRP
 0x8904

	)

10 
	#SIOCATMARK
 0x8905

	)

11 
	#SIOCGSTAMP
 0x8906

	)

12 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm-generic/types.h

2 #i‚de‡
_ASM_GENERIC_TYPES_H


3 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

2 #ifde‡
__i386__


3 
	~<asm/posix_ty≥s_32.h
>

4 #ñi‡
deföed
(
__ILP32__
)

5 
	~<asm/posix_ty≥s_x32.h
>

7 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/linux/stddef.h

2 #i‚de‡
_LINUX_STDDEF_H


3 
	#_LINUX_STDDEF_H


	)

7 #i‚de‡
__Æways_ölöe


8 
	#__Æways_ölöe
 
__ölöe__


	)

26 
	#__°ru˘_group
(
TAG
, 
NAME
, 
ATTRS
, 
MEMBERS
...) \

28 °ru˘ { 
MEMBERS
 } 
ATTRS
; \

29 
	sTAG
 { 
MEMBERS
 } 
ATTRS
 
NAME
; \

30 }

	)

44 
	#__DECLARE_FLEX_ARRAY
(
TYPE
, 
NAME
) \

46 °ru˘ { } 
__em±y_
 ## 
NAME
; \

47 
TYPE
 
NAME
[]; \

48 }

	)

	@/usr/include/asm-generic/int-ll64.h

9 #i‚de‡
_ASM_GENERIC_INT_LL64_H


10 
	#_ASM_GENERIC_INT_LL64_H


	)

12 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__ASSEMBLY__


20 
__sig√d__
 
	t__s8
;

21 
	t__u8
;

23 
__sig√d__
 
	t__s16
;

24 
	t__u16
;

26 
__sig√d__
 
	t__s32
;

27 
	t__u32
;

29 #ifde‡
__GNUC__


30 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

31 
__exãnsi⁄__
 
	t__u64
;

33 
__sig√d__
 
	t__s64
;

34 
	t__u64
;

	@/usr/include/asm/posix_types_32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


3 
	#_ASM_X86_POSIX_TYPES_32_H


	)

11 
	t__kî√l_mode_t
;

12 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

14 
	t__kî√l_ùc_pid_t
;

15 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

17 
	t__kî√l_uid_t
;

18 
	t__kî√l_gid_t
;

19 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

21 
	t__kî√l_ﬁd_dev_t
;

22 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

24 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


3 
	#_ASM_X86_POSIX_TYPES_64_H


	)

11 
	t__kî√l_ﬁd_uid_t
;

12 
	t__kî√l_ﬁd_gid_t
;

13 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

15 
	t__kî√l_ﬁd_dev_t
;

16 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

18 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

2 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


3 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

16 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

18 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm-generic/posix_types.h

2 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


3 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

5 
	~<asm/bô•îl⁄g.h
>

14 #i‚de‡
__kî√l_l⁄g_t


15 
	t__kî√l_l⁄g_t
;

16 
	t__kî√l_ul⁄g_t
;

19 #i‚de‡
__kî√l_öo_t


20 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

23 #i‚de‡
__kî√l_mode_t


24 
	t__kî√l_mode_t
;

27 #i‚de‡
__kî√l_pid_t


28 
	t__kî√l_pid_t
;

31 #i‚de‡
__kî√l_ùc_pid_t


32 
	t__kî√l_ùc_pid_t
;

35 #i‚de‡
__kî√l_uid_t


36 
	t__kî√l_uid_t
;

37 
	t__kî√l_gid_t
;

40 #i‚de‡
__kî√l_su£c⁄ds_t


41 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

44 #i‚de‡
__kî√l_daddr_t


45 
	t__kî√l_daddr_t
;

48 #i‚de‡
__kî√l_uid32_t


49 
	t__kî√l_uid32_t
;

50 
	t__kî√l_gid32_t
;

53 #i‚de‡
__kî√l_ﬁd_uid_t


54 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

55 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

58 #i‚de‡
__kî√l_ﬁd_dev_t


59 
	t__kî√l_ﬁd_dev_t
;

66 #i‚de‡
__kî√l_size_t


67 #i‡
__BITS_PER_LONG
 != 64

68 
	t__kî√l_size_t
;

69 
	t__kî√l_ssize_t
;

70 
	t__kî√l_±rdiff_t
;

72 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

74 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

78 #i‚de‡
__kî√l_fsid_t


80 
	mvÆ
[2];

81 } 
	t__kî√l_fsid_t
;

87 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

88 
	t__kî√l_loff_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_ﬁd_time_t
;

90 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

91 
	t__kî√l_time64_t
;

92 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

93 
	t__kî√l_timî_t
;

94 
	t__kî√l_˛ockid_t
;

95 * 
	t__kî√l_ˇddr_t
;

96 
	t__kî√l_uid16_t
;

97 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

2 #i‚de‡
__ASM_X86_BITSPERLONG_H


3 
	#__ASM_X86_BITSPERLONG_H


	)

5 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

6 
	#__BITS_PER_LONG
 64

	)

8 
	#__BITS_PER_LONG
 32

	)

11 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

2 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


3 
	#__ASM_GENERIC_BITS_PER_LONG


	)

12 #i‚de‡
__BITS_PER_LONG


13 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
222
6541
client.c
ev.aes.256.ut.c
gen_list.c
gen_list.h
list_dev_id.h
main.save.bin.c
msg_notify.c
msg_notify.h
notifier.c
rsa.ut.c
rubbish/skylab_shared_data.cc
rubbish/skylab_shared_data.h
server.c
test_msg_notify.c
/usr/include/arpa/inet.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/netinet/in.h
/usr/include/openssl/aes.h
/usr/include/openssl/conf.h
/usr/include/openssl/err.h
/usr/include/openssl/evp.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/rsa.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/in.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/mman.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/sigevent-consts.h
/usr/include/bits/siginfo-consts.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/ss_flags.h
/usr/include/bits/stat.h
/usr/include/bits/statx.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/error_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/sig_atomic_t.h
/usr/include/bits/types/sigevent_t.h
/usr/include/bits/types/siginfo_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/sigval_t.h
/usr/include/bits/types/stack_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/types/struct_iovec.h
/usr/include/bits/types/struct_itimerspec.h
/usr/include/bits/types/struct_osockaddr.h
/usr/include/bits/types/struct_sigstack.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/types/struct_tm.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/uintn-identity.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/limits.h
/usr/include/openssl/asn1.h
/usr/include/openssl/bio.h
/usr/include/openssl/bn.h
/usr/include/openssl/conferr.h
/usr/include/openssl/crypto.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/evperr.h
/usr/include/openssl/lhash.h
/usr/include/openssl/objects.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/pemerr.h
/usr/include/openssl/rsaerr.h
/usr/include/openssl/safestack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/x509.h
/usr/include/sched.h
/usr/include/strings.h
/usr/include/sys/select.h
/usr/include/sys/syslog.h
/usr/include/sys/ucontext.h
/usr/include/asm/socket.h
/usr/include/bits/cpu-set.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/mman-linux.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/siginfo-arch.h
/usr/include/bits/siginfo-consts-arch.h
/usr/include/bits/signum-generic.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/statx-generic.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/timex.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/__sigset_t.h
/usr/include/bits/types/__sigval_t.h
/usr/include/bits/typesizes.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/stubs.h
/usr/include/inttypes.h
/usr/include/linux/errno.h
/usr/include/linux/stat.h
/usr/include/openssl/asn1err.h
/usr/include/openssl/bioerr.h
/usr/include/openssl/bnerr.h
/usr/include/openssl/buffer.h
/usr/include/openssl/cryptoerr.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/objectserr.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/sha.h
/usr/include/openssl/stack.h
/usr/include/openssl/x509_vfy.h
/usr/include/openssl/x509err.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/bits/local_lim.h
/usr/include/bits/long-double.h
/usr/include/bits/mman-shared.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/types/struct_sched_param.h
/usr/include/bits/types/struct_statx.h
/usr/include/bits/types/struct_statx_timestamp.h
/usr/include/bits/uio_lim.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/falloc.h
/usr/include/linux/types.h
/usr/include/openssl/buffererr.h
/usr/include/openssl/dherr.h
/usr/include/openssl/dsaerr.h
/usr/include/openssl/ecerr.h
/usr/include/openssl/pkcs7err.h
/usr/include/asm-generic/errno.h
/usr/include/asm/sockios.h
/usr/include/asm/types.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/linux/stddef.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
